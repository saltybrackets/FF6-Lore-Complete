Entry points
EE/0000:	4C9983  	JMP $8399      (Serpent Trench and world map)
EE/0003:	4C7819  	JMP $1978      (From the opening credits)
EE/0006:	4C8019  	JMP $1980      (Unused)
EE/0009:	4C9019  	JMP $1990      (From the opening credits)
EE/000C:	4C9419  	JMP $1994      (From the opening credits)
EE/000F:	4C8819  	JMP $1988      (Unused)
EE/0012:	4C488C  	JMP $8C48      (Mine-cart ride)
EE/0015:	4CD48E  	JMP $8ED4      (Airship scene from the ending)

Main function for vehicle mode
EE/0018:	206905  	JSR $0569      (Initialize DMA and HDMA, etc.)
EE/001B:	203D07  	JSR $073D
EE/001E:	207A07  	JSR $077A      (VRAM-related function)
EE/0021:	20C43F  	JSR $3FC4      (Hide some objects and initialize gradient overlay)
EE/0024:	203240  	JSR $4032      (Set $6D30-$6D34 and $6D3D-$6D4F to #$AA; zero $6D35-$6D3C)
EE/0027:	209E07  	JSR $079E      (Zero $8000-$87FF and $A000-$A03F in VRAM)
EE/002A:	201157  	JSR $5711      (Copy object data to RAM)
EE/002D:	201841  	JSR $4118      (Zero $B5D0 through $B64F)
EE/0030:	C220    	REP #$20       (16-bit A)
EE/0032:	A90080  	LDA #$8000
EE/0035:	8544    	STA $44        (Disable first VRAM part of NMI code)
EE/0037:	8546    	STA $46        (Disable second VRAM part of NMI code)
EE/0039:	ADF611  	LDA $11F6
EE/003C:	894000  	BIT #$0040     (Just met Doom Gaze?)
EE/003F:	D008    	BNE $0049      (Branch if so)
EE/0041:	890200  	BIT #$0002     (Returning from battle?) (LSR A, LSR A, BCC...)
EE/0044:	F009    	BEQ $004F      (Branch if not)
EE/0046:	4CCE00  	JMP $00CE
EE/0049:	29BFFF  	AND #$FFBF     (Clear Doom Gaze flag)
EE/004C:	8DF611  	STA $11F6      (Save changes)
EE/004F:	A92000  	LDA #$0020
EE/0052:	8593    	STA $93
EE/0054:	ADF211  	LDA $11F2      (Backup of direction, including flags)
EE/0057:	100F    	BPL $0068      (Branch if not entering map in vehicle)
EE/0059:	29FF7F  	AND #$7FFF     (Clear vehicle mode flag)
EE/005C:	8573    	STA $73        (Set vehicle's direction)
EE/005E:	9CF211  	STZ $11F2      (Clear the backup)
EE/0061:	ADF411  	LDA $11F4      (Backup of vehicle height)
EE/0064:	852F    	STA $2F        (Set vehicle height)
EE/0066:	8005    	BRA $006D      (Skip next two instructions)
EE/0068:	A90000  	LDA #$0000     (Value for north)
EE/006B:	8573    	STA $73        (Set direction) (STZ...)
EE/006D:	A900A0  	LDA #$A000
EE/0070:	858B    	STA $8B        (Set zoom variable to #$A000)
EE/0072:	8591    	STA $91        (Unused? DMA?)
EE/0074:	648D    	STZ $8D
EE/0076:	A900FF  	LDA #$FF00
EE/0079:	858F    	STA $8F
EE/007B:	A90F00  	LDA #$000F
EE/007E:	8522    	STA $22        (Set screen to reach full brightness)
EE/0080:	6423    	STZ $23        (Start with a blank screen; clear NMI count)
EE/0082:	A583    	LDA $83        (Sky rotation variable)
EE/0084:	1003    	BPL $0089      (Branch if rotated counterclockwise)
EE/0086:	49FFFF  	EOR #$FFFF     (Make value positive)
EE/0089:	4A      	LSR A          (Divide by 2)
EE/008A:	18      	CLC            (Clear Carry for addition)
EE/008B:	6585    	ADC $85
EE/008D:	8587    	STA $87
EE/008F:	E220    	SEP #$20       (8-bit A)
EE/0091:	A00000  	LDY #$0000     (Zero Y in anticipation of what follows) ($00...)
EE/0094:	AFFD1100	LDA $0011FD    (Backup of event address, low byte) ($11FD...)
EE/0098:	F001    	BEQ $009B      (Branch if null)
EE/009A:	C8      	INY            (Increase Y to acknowledge that no branching occurred)
EE/009B:	85EA    	STA $EA        (Set event address, low byte)
EE/009D:	AFFE1100	LDA $0011FE    (Backup of event address, middle byte) ($11FE...)
EE/00A1:	F001    	BEQ $00A4      (Branch if null)
EE/00A3:	C8      	INY            (Increase Y to acknowledge that no branching occurred)
EE/00A4:	85EB    	STA $EB        (Set event address, middle byte)
EE/00A6:	AFFF1100	LDA $0011FF    (Backup of event address, high byte) ($11FF...)
EE/00AA:	F001    	BEQ $00AD      (Branch if null)
EE/00AC:	C8      	INY            (Increase Y to acknowledge that no branching occurred)
EE/00AD:	85EC    	STA $EC        (Set event address, high byte)
EE/00AF:	C00000  	CPY #$0000     (All 3 cases resulted in a branch?) (CPY $00...)
EE/00B2:	F01A    	BEQ $00CE      (Branch if so)
EE/00B4:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/00B6:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/00B8:	8980    	BIT #$80       (Is the high bit of the event bank already set?)
EE/00BA:	D00A    	BNE $00C6      (Branch if so; only the Bahamut and Zone Eater events won't do so)
EE/00BC:	0980    	ORA #$80       (Set the bit so the value matches an event bank)
EE/00BE:	85EC    	STA $EC        (Set event address, high byte)
EE/00C0:	A5E7    	LDA $E7
EE/00C2:	0941    	ORA #$41
EE/00C4:	8006    	BRA $00CC      (Skip next three instructions)
EE/00C6:	A5E7    	LDA $E7
EE/00C8:	0901    	ORA #$01       (AND #$BE, INC A...)
EE/00CA:	29BF    	AND #$BF
EE/00CC:	85E7    	STA $E7        (Save changes)
EE/00CE:	E220    	SEP #$20       (8-bit A)
EE/00D0:	A9C8    	LDA #$C8       (200)
EE/00D2:	8D0742  	STA $4207      (Set H-Count timer, low byte)
EE/00D5:	E220    	SEP #$20       (...)
EE/00D7:	58      	CLI            (Enable IRQ)
EE/00D8:	A980    	LDA #$80
EE/00DA:	8D0021  	STA $2100      (Disable screen)
EE/00DD:	CD1042  	CMP $4210      (Clear NMI flag)
EE/00E0:	AD1242  	LDA $4212      (PPU status)
EE/00E3:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/00E5:	F0F6    	BEQ $00DD      (Loop if not)
EE/00E7:	A9B1    	LDA #$B1
EE/00E9:	8D0042  	STA $4200      (Enable NMI, H/V-Count IRQ, auto joypad read)
EE/00EC:	A524    	LDA $24        (NMI count)
EE/00EE:	F0FC    	BEQ $00EC      (Loop until an NMI occurs)
EE/00F0:	6424    	STZ $24        (Reset NMI count)
EE/00F2:	ADF611  	LDA $11F6
EE/00F5:	8910    	BIT #$10       (Show animation for mode transition?)
EE/00F7:	F003    	BEQ $00FC      (Branch if not)
EE/00F9:	204395  	JSR $9543      (Mode 7 rendering for an airship taking off)
EE/00FC:	E220    	SEP #$20       (8-bit A)
EE/00FE:	ADF611  	LDA $11F6
EE/0101:	29FD    	AND #$FD       (Clear "invoke battle" bit)
EE/0103:	8DF611  	STA $11F6      (Save changes)
EE/0106:	8901    	BIT #$01       (Minimap is disabled?)
EE/0108:	D003    	BNE $010D      (Branch if so) (LSR A, BCS...)
EE/010A:	202D41  	JSR $412D      (Show minimap)
EE/010D:	CD1042  	CMP $4210      (Clear NMI flag)
EE/0110:	AD1242  	LDA $4212      (PPU status)
EE/0113:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/0115:	F0F6    	BEQ $010D      (Loop if not)
EE/0117:	A902    	LDA #$02
EE/0119:	8D0521  	STA $2105      (BG mode 2, 8x8 tiles)
EE/011C:	A524    	LDA $24        (NMI count)
EE/011E:	F0FC    	BEQ $011C      (Loop until an NMI occurs)
EE/0120:	6424    	STZ $24        (Reset NMI count)
EE/0122:	E220    	SEP #$20       (8-bit A) (Start of loop)
EE/0124:	A902    	LDA #$02
EE/0126:	8D0521  	STA $2105      (BG mode 2, 8x8 tiles)
EE/0129:	AD641F  	LDA $1F64      (Map number from SRAM, low byte)
EE/012C:	C902    	CMP #$02       (Serpent Trench?)
EE/012E:	F004    	BEQ $0134      (Branch if so)
EE/0130:	A903    	LDA #$03
EE/0132:	8002    	BRA $0136      (Skip next instruction)
EE/0134:	A983    	LDA #$83
EE/0136:	8D3121  	STA $2131      (Enable color math for BG1 and BG2; subtract colors)
EE/0139:	220900C3	JSL $C30009    (Decode joypad status register 1)
EE/013D:	A570    	LDA $70
EE/013F:	8D0F21  	STA $210F      (BG2 horizontal scroll, low byte)
EE/0142:	A571    	LDA $71
EE/0144:	8D0F21  	STA $210F      (BG2 horizontal scroll, high byte)
EE/0147:	20FF39  	JSR $39FF      (Sky rotation mechanics)
EE/014A:	20B637  	JSR $37B6      (Adjust the sky's position)
EE/014D:	C220    	REP #$20       (16-bit A)
EE/014F:	A9E000  	LDA #$00E0
EE/0152:	38      	SEC            (Set Carry for subtraction)
EE/0153:	E587    	SBC $87
EE/0155:	8D0942  	STA $4209      (V-Count timer)
EE/0158:	209819  	JSR $1998
EE/015B:	ADF611  	LDA $11F6
EE/015E:	890200  	BIT #$0002     (Is a battle set to occur?) (LSR A, LSR A...)
EE/0161:	F068    	BEQ $01CB      (Branch if not)
EE/0163:	207518  	JSR $1875      (Effects preceding a battle in airship mode)
EE/0166:	E220    	SEP #$20       (8-bit A)
EE/0168:	20B290  	JSR $90B2      (Copy 256 bytes of RAM from $0000 to $0A00)
EE/016B:	A980    	LDA #$80
EE/016D:	8D0021  	STA $2100      (Disable screen)
EE/0170:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/0173:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0176:	78      	SEI            (Disable IRQ)
EE/0177:	08      	PHP            (Bank C2 handles that...)
EE/0178:	8B      	PHB            (Save data bank)
EE/0179:	220000C2	JSL $C20000    (Execute battle code)
EE/017D:	AB      	PLB            (Restore data bank)
EE/017E:	28      	PLP            (...)
EE/017F:	A980    	LDA #$80
EE/0181:	8D0021  	STA $2100      (Disable screen)
EE/0184:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/0187:	9C0C42  	STZ $420C      (Disable HDMA)
EE/018A:	78      	SEI            (Disable IRQ again...)
EE/018B:	ADD11D  	LDA $1DD1      (Battle event byte)
EE/018E:	8901    	BIT #$01       (Annihilated?)
EE/0190:	F003    	BEQ $0195      (Branch if not) (LSR A, BCC...)
EE/0192:	4C3593  	JMP $9335      (Game over!)
EE/0195:	ADF611  	LDA $11F6
EE/0198:	8920    	BIT #$20       (Battle involved Doom Gaze?)
EE/019A:	F02C    	BEQ $01C8      (Branch if not)
EE/019C:	ADD21D  	LDA $1DD2      (Battle event byte)
EE/019F:	8901    	BIT #$01       (Defeated Doom Gaze?)
EE/01A1:	F01B    	BEQ $01BE      (Branch if not) (LSR A, BCC...)
EE/01A3:	AF7BB2EE	LDA $EEB27B    (Pointer to Bahamut event, low byte)
EE/01A7:	8FFD1100	STA $0011FD    (Set backup of event address, low byte) ($11FD...)
EE/01AB:	AF7CB2EE	LDA $EEB27C    (Pointer to Bahamut event, middle byte)
EE/01AF:	8FFE1100	STA $0011FE    (Set backup of event address, middle byte) ($11FE...)
EE/01B3:	AF7DB2EE	LDA $EEB27D    (Pointer to Bahamut event, high byte)
EE/01B7:	18      	CLC            (Clear Carry for addition)
EE/01B8:	694A    	ADC #$4A       (Add #$4A; the high bit will be set later)
EE/01BA:	8FFF1100	STA $0011FF    (Set backup of event address, high byte) ($11FF...)
EE/01BE:	ADF611  	LDA $11F6
EE/01C1:	29DF    	AND #$DF       (Clear the "battle involved Doom Gaze" bit)
EE/01C3:	0940    	ORA #$40       (Set another bit indicating Doom Gaze was fought)
EE/01C5:	8DF611  	STA $11F6      (Save changes)
EE/01C8:	4CF683  	JMP $83F6      (Formalities prior to returning to a world map from a battle, a menu, etc.)
EE/01CB:	C220    	REP #$20       (16-bit A)
EE/01CD:	A583    	LDA $83        (Sky rotation variable)
EE/01CF:	1003    	BPL $01D4      (Branch if rotated counterclockwise)
EE/01D1:	49FFFF  	EOR #$FFFF     (Make value positive)
EE/01D4:	4A      	LSR A          (Divide by 2)
EE/01D5:	18      	CLC            (Clear Carry for addition)
EE/01D6:	6585    	ADC $85
EE/01D8:	8587    	STA $87
EE/01DA:	208838  	JSR $3888      (Draw the gradient overlay beneath the sky)
EE/01DD:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/01E0:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/01E3:	207C42  	JSR $427C      (Sprite-related function)
EE/01E6:	ADF611  	LDA $11F6
EE/01E9:	890100  	BIT #$0001     (Minimap is disabled?)
EE/01EC:	D003    	BNE $01F1      (Branch if so) (LSR A, BCS...)
EE/01EE:	20B541  	JSR $41B5      (Draw location dot on minimap)
EE/01F1:	A520    	LDA $20        (Map mode)
EE/01F3:	C90400  	CMP #$0004     (Serpent Trench mode?)
EE/01F6:	F008    	BEQ $0200      (Branch if so)
EE/01F8:	206333  	JSR $3363      (Generate 32x32 world map for VRAM...?)
EE/01FB:	20ADAA  	JSR $AAAD      (Animate water tiles)
EE/01FE:	8003    	BRA $0203      (Skip next instruction)
EE/0200:	208B35  	JSR $358B      (Generate 32x32 Serpent Trench map for VRAM...?)
EE/0203:	E220    	SEP #$20       (8-bit A)
EE/0205:	A519    	LDA $19
EE/0207:	C9FF    	CMP #$FF       (Was a map loaded via a vehicle or map script command?) (INC A...)
EE/0209:	D006    	BNE $0211      (Branch if not)
EE/020B:	20D722  	JSR $22D7
EE/020E:	4CD291  	JMP $91D2      (Exit point for vehicle mode) (BRA $0235...)
EE/0211:	A519    	LDA $19
EE/0213:	F023    	BEQ $0238      (Branch if not exiting vehicle mode)
EE/0215:	8901    	BIT #$01
EE/0217:	F003    	BEQ $021C      (LSR A, BCC...)
EE/0219:	20561C  	JSR $1C56      (Lower altitude until ready to land)
EE/021C:	A519    	LDA $19
EE/021E:	2904    	AND #$04       (Ready to land?)
EE/0220:	C904    	CMP #$04       (...)
EE/0222:	D014    	BNE $0238      (Branch if not)
EE/0224:	ADF611  	LDA $11F6
EE/0227:	091C    	ORA #$1C       (Set "don't reload map tiles and data" and "show animation for mode transition")
EE/0229:	8DF611  	STA $11F6      (Save changes) (LDA #$1C, TSB $11F6...)
EE/022C:	A520    	LDA $20        (Map mode)
EE/022E:	C902    	CMP #$02       (Chocobo mode?)
EE/0230:	F003    	BEQ $0235      (Branch if so)
EE/0232:	205396  	JSR $9653      (Mode 7 rendering for a landing airship)
EE/0235:	4CD291  	JMP $91D2      (Exit point for vehicle mode)
EE/0238:	AD2400  	LDA $0024      (NMI count) ($24...)
EE/023B:	F0FB    	BEQ $0238      (Loop until an NMI occurs)
EE/023D:	9C2400  	STZ $0024      (Reset NMI count) ($24...)
EE/0240:	A523    	LDA $23        (Current brightness)
EE/0242:	C522    	CMP $22        (Compare to desired brightness)
EE/0244:	F006    	BEQ $024C      (Branch if equal)
EE/0246:	B003    	BCS $024B      (Branch if greater)
EE/0248:	1A      	INC A          (Increase brightness)
EE/0249:	8001    	BRA $024C      (Skip next instruction) (INC A...)
EE/024B:	3A      	DEC A          (Decrease brightness)
EE/024C:	8523    	STA $23        (Save changes)
EE/024E:	4C2201  	JMP $0122      (Loop)

Main function for character mode
EE/0251:	205F06  	JSR $065F      (DMA and HDMA initialization, etc.)
EE/0254:	201540  	JSR $4015      (Hide some objects)
EE/0257:	20BE40  	JSR $40BE      (Set $6D30-$6D34 to #$AA, and zero $6D35-$6D4F)
EE/025A:	209E07  	JSR $079E      (Zero $8000-$87FF and $A000-$A03F in VRAM)
EE/025D:	201157  	JSR $5711      (Copy object data to RAM)
EE/0260:	201841  	JSR $4118      (Zero $B5D0 through $B64F)
EE/0263:	C220    	REP #$20       (16-bit A)
EE/0265:	A90080  	LDA #$8000
EE/0268:	8544    	STA $44        (Disable first VRAM part of NMI code)
EE/026A:	8546    	STA $46        (Disable second VRAM part of NMI code)
EE/026C:	A92000  	LDA #$0020
EE/026F:	8593    	STA $93
EE/0271:	A90000  	LDA #$0000     (Value for north) (TDC...)
EE/0274:	8573    	STA $73        (Set vehicle direction) (STZ...)
EE/0276:	A90090  	LDA #$9000
EE/0279:	858B    	STA $8B        (Set zoom variable to #$9000)
EE/027B:	8591    	STA $91        (Unused? DMA?)
EE/027D:	A9FF8F  	LDA #$8FFF
EE/0280:	858D    	STA $8D
EE/0282:	A9FFFF  	LDA #$FFFF     (TDC, DEC A...)
EE/0285:	858F    	STA $8F
EE/0287:	A90F00  	LDA #$000F     (Value for full brightness)
EE/028A:	8522    	STA $22        (Set target screen brightness)
EE/028C:	6423    	STZ $23        (Start with a blank screen; clear NMI count)
EE/028E:	A583    	LDA $83        (Sky rotation variable)
EE/0290:	1004    	BPL $0296      (Branch if rotated counterclockwise)
EE/0292:	49FFFF  	EOR #$FFFF     (Make value positive)
EE/0295:	1A      	INC A          (Add one)
EE/0296:	4A      	LSR A          (Divide by 2)
EE/0297:	18      	CLC            (Clear Carry for addition)
EE/0298:	6585    	ADC $85
EE/029A:	8587    	STA $87
EE/029C:	E220    	SEP #$20       (8-bit A)
EE/029E:	A00000  	LDY #$0000     (Zero Y in anticipation of what follows) (LDY $00...)
EE/02A1:	AFFD1100	LDA $0011FD    (Backup of event address, low byte)
EE/02A5:	F001    	BEQ $02A8      (Branch if zero)
EE/02A7:	C8      	INY            (Acknowledge no branching)
EE/02A8:	85EA    	STA $EA        (Set event address, low byte)
EE/02AA:	AFFE1100	LDA $0011FE    (Backup of event address, middle byte)
EE/02AE:	F001    	BEQ $02B1      (Branch if zero)
EE/02B0:	C8      	INY            (Acknowledge no branching)
EE/02B1:	85EB    	STA $EB        (Set event address, middle byte)
EE/02B3:	AFFF1100	LDA $0011FF    (Backup of event address, high byte)
EE/02B7:	F001    	BEQ $02BA      (Branch if zero)
EE/02B9:	C8      	INY            (Acknowledge no branchingd)
EE/02BA:	85EC    	STA $EC        (Set event address, high byte)
EE/02BC:	C00000  	CPY #$0000     (CA/0000?) ($00...)
EE/02BF:	F01A    	BEQ $02DB      (Branch if so)
EE/02C1:	64ED    	STZ $ED        (Clear event queue, low byte)
EE/02C3:	64EE    	STZ $EE        (Clear event queue, high byte)
EE/02C5:	8980    	BIT #$80       (High bit of event bank already set?)
EE/02C7:	D00A    	BNE $02D3      (Branch if so; only Bahamut and Zone Eater events won't do so)
EE/02C9:	0980    	ORA #$80       (Set bit so value matches an event bank)
EE/02CB:	85EC    	STA $EC        (Save changes)
EE/02CD:	A5E7    	LDA $E7
EE/02CF:	0941    	ORA #$41
EE/02D1:	8006    	BRA $02D9      (Skip next three instructions)
EE/02D3:	A5E7    	LDA $E7
EE/02D5:	0901    	ORA #$01       (AND #$BE, INC A...)
EE/02D7:	29BF    	AND #$BF
EE/02D9:	85E7    	STA $E7        (Save changes)
EE/02DB:	AD0502  	LDA $0205      (Menu variable)
EE/02DE:	C902    	CMP #$02       (Used Tent?)
EE/02E0:	D022    	BNE $0304      (Branch if so)
EE/02E2:	AF6CB2EE	LDA $EEB26C    (Pointer to Tent event, low byte)
EE/02E6:	85EA    	STA $EA        (Set event address, low byte)
EE/02E8:	AF6DB2EE	LDA $EEB26D    (Pointer to Tent event, middle byte)
EE/02EC:	85EB    	STA $EB        (Set event address, middle byte)
EE/02EE:	AF6EB2EE	LDA $EEB26E    (Pointer to Tent event, high byte)
EE/02F2:	18      	CLC            (Clear Carry for addition)
EE/02F3:	69CA    	ADC #$CA       (Add base bank)
EE/02F5:	85EC    	STA $EC        (Set event address, high byte)
EE/02F7:	64ED    	STZ $ED        (Clear event queue, low byte)
EE/02F9:	64EE    	STZ $EE        (Clear event queue, high byte)
EE/02FB:	A5E7    	LDA $E7
EE/02FD:	0941    	ORA #$41
EE/02FF:	85E7    	STA $E7        (Save changes) (LDA #$41, TSB $E7...)
EE/0301:	9C0502  	STZ $0205      (Clear multipurpose menu variable)
EE/0304:	A904    	LDA #$04
EE/0306:	8558    	STA $58        (Make a general purpose variable point to the fourth party slot)
EE/0308:	A00000  	LDY #$0000     (Start from first actor slot) (LDY $00...)
EE/030B:	B95018  	LDA $1850,Y    (Party info)
EE/030E:	8940    	BIT #$40       (Actor is available?)
EE/0310:	F017    	BEQ $0329      (Branch if not)
EE/0312:	2907    	AND #$07       (Isolate party number)
EE/0314:	CD6D1A  	CMP $1A6D      (Active party?)
EE/0317:	D010    	BNE $0329      (Branch if not)
EE/0319:	B95018  	LDA $1850,Y    (Party info)
EE/031C:	4A      	LSR A          (Divide by 2)
EE/031D:	4A      	LSR A          (Divide by 4)
EE/031E:	4A      	LSR A          (Divide by 8)
EE/031F:	2903    	AND #$03       (Isolate roster position)
EE/0321:	C558    	CMP $58        (Compare to the value of the general-purpose variable)
EE/0323:	B004    	BCS $0329      (Branch if equal or greater)
EE/0325:	8558    	STA $58        (Store the position number to said variable)
EE/0327:	845A    	STY $5A        (Store the character number to another such variable)
EE/0329:	C8      	INY            (Point to next character)
EE/032A:	C01000  	CPY #$0010     (Processed all 16 character slots?)
EE/032D:	D0DC    	BNE $030B      (Loop if not)
EE/032F:	A55A    	LDA $5A        (Slot number for leader)
EE/0331:	8D0242  	STA $4202      (Save as multiplicand)
EE/0334:	A925    	LDA #$25       (Number of bytes per character in SRAM)
EE/0336:	8D0342  	STA $4203      (Set multiplier to 37)
EE/0339:	EA      	NOP
EE/033A:	EA      	NOP
EE/033B:	EA      	NOP
EE/033C:	AE1642  	LDX $4216      (Load X with the product)
EE/033F:	BD0116  	LDA $1601,X    (Sprite number of leader)
EE/0342:	8DFB11  	STA $11FB      (Set sprite number of map character)
EE/0345:	A65A    	LDX $5A
EE/0347:	BD701F  	LDA $1F70,X    (Leader's palette index)
EE/034A:	4A      	LSR A          (Halve it)
EE/034B:	8DFC11  	STA $11FC      (Set palette number for map character)
EE/034E:	E220    	SEP #$20       (8-bit A)
EE/0350:	A9C8    	LDA #$C8
EE/0352:	8D0742  	STA $4207      (Set H-Count timer, low byte)
EE/0355:	9C0842  	STZ $4208      (Clear the high byte)
EE/0358:	A990    	LDA #$90
EE/035A:	8D0942  	STA $4209      (Set V-Count timer, low byte)
EE/035D:	9C0A42  	STZ $420A      (Clear the high byte)
EE/0360:	E220    	SEP #$20       (8-bit A)
EE/0362:	CD1042  	CMP $4210      (Clear NMI flag)
EE/0365:	AD1242  	LDA $4212      (PPU status)
EE/0368:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/036A:	F0F6    	BEQ $0362      (Loop if not)
EE/036C:	58      	CLI            (Enable IRQ)
EE/036D:	A980    	LDA #$80
EE/036F:	8D0021  	STA $2100      (Disable screen)
EE/0372:	A9B1    	LDA #$B1
EE/0374:	8D0042  	STA $4200      (Enable NMI, H/V-Count IRQ, auto joypad read)
EE/0377:	AD2400  	LDA $0024      (NMI count) ($24...)
EE/037A:	F0FB    	BEQ $0377      (Loop until an NMI occurs)
EE/037C:	9C2400  	STZ $0024      (Reset NMI count) ($24...)
EE/037F:	ADF611  	LDA $11F6
EE/0382:	8910    	BIT #$10       (Is the "show animation for mode transition" bit set?)
EE/0384:	F003    	BEQ $0389      (Branch if not)
EE/0386:	207697  	JSR $9776      (Show airship landing)
EE/0389:	ADF611  	LDA $11F6
EE/038C:	8901    	BIT #$01       (Minimap is disabled?)
EE/038E:	D003    	BNE $0393      (Branch if so) (LSR A, BCS...)
EE/0390:	202D41  	JSR $412D      (Show minimap)
EE/0393:	C220    	REP #$20       (...)
EE/0395:	E220    	SEP #$20       (8-bit A)
EE/0397:	A520    	LDA $20        (Map mode)
EE/0399:	C904    	CMP #$04       (Serpent Trench mode?)
EE/039B:	D004    	BNE $03A1      (Branch if not)
EE/039D:	A9A3    	LDA #$A3
EE/039F:	8002    	BRA $03A3      (Skip next instruction)
EE/03A1:	A963    	LDA #$63
EE/03A3:	8D3121  	STA $2131      (Enable color math (half) for BG1, BG2, backdrop)
EE/03A6:	220900C3	JSL $C30009    (Decode joypad status register 1)
EE/03AA:	200E1D  	JSR $1D0E      (Determine if you walked, got into a fight, etc.)
EE/03AD:	A5E9    	LDA $E9
EE/03AF:	8910    	BIT #$10
EE/03B1:	D03F    	BNE $03F2
EE/03B3:	A5E8    	LDA $E8
EE/03B5:	8901    	BIT #$01       (Menu set to open?) (LSR A, BCC...)
EE/03B7:	F039    	BEQ $03F2      (Branch if not; this is set in the $1D0E call)
EE/03B9:	209222  	JSR $2292      (Fade the screen completely at double the normal rate)
EE/03BC:	A98F    	LDA #$8F
EE/03BE:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/03C1:	78      	SEI            (Disable IRQ)
EE/03C2:	9C0C42  	STZ $420C      (Disable HDMA)
EE/03C5:	9C0002  	STZ $0200
EE/03C8:	A980    	LDA #$80
EE/03CA:	8D0102  	STA $0201      (Set the "save point" flag; disable warp, etc.)
EE/03CD:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/03D0:	9CFD11  	STZ $11FD      (Zero backup of event address, low byte)
EE/03D3:	9CFE11  	STZ $11FE      (Zero backup of event address, middle byte)
EE/03D6:	9CFF11  	STZ $11FF      (Zero backup of event address, high byte)
EE/03D9:	A5E0    	LDA $E0        (Current X position in tiles)
EE/03DB:	8D601F  	STA $1F60      (Save in SRAM)
EE/03DE:	A5E2    	LDA $E2        (Current Y position in tiles)
EE/03E0:	8D611F  	STA $1F61      (Save in SRAM)
EE/03E3:	A5F6    	LDA $F6        (Current direction)
EE/03E5:	8D681F  	STA $1F68      (Save in SRAM)
EE/03E8:	209F90  	JSR $909F      (Move #$06E0 bytes from 7E/F120 to 00/0520)
EE/03EB:	220000C3	JSL $C30000    (Open the menu)
EE/03EF:	4CF683  	JMP $83F6      (Formalities prior to returning to a world map from a battle, a menu, etc.)
EE/03F2:	A5E9    	LDA $E9
EE/03F4:	29EF    	AND #$EF
EE/03F6:	85E9    	STA $E9        (Save changes) (LDA #$10, TRB $E9...)
EE/03F8:	A5E8    	LDA $E8
EE/03FA:	8940    	BIT #$40       (Airship's set to take off?)
EE/03FC:	F02D    	BEQ $042B      (Branch if not) (ASL A, BPL...)
EE/03FE:	ADF611  	LDA $11F6
EE/0401:	0910    	ORA #$10       (Set mode transition to be shown)
EE/0403:	8DF611  	STA $11F6      (Save changes) (LDA #$10, TSB $11F6...)
EE/0406:	20D494  	JSR $94D4      (Show airship taking off)
EE/0409:	A98F    	LDA #$8F
EE/040B:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/040E:	78      	SEI            (Disable IRQ)
EE/040F:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0412:	9CFD11  	STZ $11FD      (Zero backup of event address, low byte)
EE/0415:	9CFE11  	STZ $11FE      (Zero backup of event address, middle byte)
EE/0418:	9CFF11  	STZ $11FF      (Zero backup of event address, high byte)
EE/041B:	A5E0    	LDA $E0        (Current X position in tiles)
EE/041D:	8D601F  	STA $1F60      (Save in SRAM)
EE/0420:	A5E2    	LDA $E2        (Current Y position in tiles)
EE/0422:	8D611F  	STA $1F61      (Save in SRAM)
EE/0425:	209F90  	JSR $909F      (Move #$06E0 bytes from 7E/F120 to 00/0520)
EE/0428:	4C2284  	JMP $8422      (Airship mode initialization)
EE/042B:	E220    	SEP #$20       (8-bit A)
EE/042D:	A5E8    	LDA $E8
EE/042F:	8910    	BIT #$10
EE/0431:	F02C    	BEQ $045F
EE/0433:	ADD11D  	LDA $1DD1      (Battle event byte)
EE/0436:	8901    	BIT #$01       (Annihilated?)
EE/0438:	F003    	BEQ $043D      (Branch if not) (LSR A, BCC...)
EE/043A:	4C3593  	JMP $9335      (Game over!)
EE/043D:	8980    	BIT #$80       (Was everyone engulfed?) (BPL...)
EE/043F:	F01B    	BEQ $045C      (Branch if not)
EE/0441:	AF78B2EE	LDA $EEB278    (Pointer to Zone Eater event, low byte)
EE/0445:	8FFD1100	STA $0011FD    (Save as backup of event address, low byte)
EE/0449:	AF79B2EE	LDA $EEB279    (Pointer to Zone Eater event, middle byte)
EE/044D:	8FFE1100	STA $0011FE    (Save as backup of event address, high byte)
EE/0451:	AF7AB2EE	LDA $EEB27A    (Pointer to Zone Eater event, high byte)
EE/0455:	18      	CLC            (Clear Carry for addition)
EE/0456:	694A    	ADC #$4A       (Add #$4A; high bit will eventually be set)
EE/0458:	8FFF1100	STA $0011FF    (Save as backup of event address, high byte)
EE/045C:	4CF683  	JMP $83F6      (Formalities prior to returning to a world map from a battle, a menu, etc.)
EE/045F:	C230    	REP #$30       (16-bit A and indexes)
EE/0461:	A9E000  	LDA #$00E0
EE/0464:	8587    	STA $87
EE/0466:	20513E  	JSR $3E51      (Mode 7 rendering for character mode)
EE/0469:	A5E9    	LDA $E9
EE/046B:	090400  	ORA #$0004     (Set the airship to be capable of being boarded)
EE/046E:	85E9    	STA $E9        (Save changes) (LDA #$0004, TSB $E9...)
EE/0470:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/0473:	200243  	JSR $4302      (Sprite-related function)
EE/0476:	ADF611  	LDA $11F6
EE/0479:	890100  	BIT #$0001     (Minimap is disabled?)
EE/047C:	D003    	BNE $0481      (Branch if so) (LSR A, BCS...)
EE/047E:	20B541  	JSR $41B5      (Draw location dot on minimap)
EE/0481:	206333  	JSR $3363      (Generate 32x32 world map for VRAM...?)
EE/0484:	20ADAA  	JSR $AAAD      (Animate water tiles)
EE/0487:	E220    	SEP #$20       (8-bit A)
EE/0489:	A519    	LDA $19
EE/048B:	F00D    	BEQ $049A      (Branch if no map was loaded)
EE/048D:	3005    	BMI $0494      (Branch if a map was loaded via a map script command)
EE/048F:	209222  	JSR $2292      (Fade the screen completely at double the normal rate)
EE/0492:	8003    	BRA $0497      (Skip next instruction)
EE/0494:	20B622  	JSR $22B6      (Fade the screen completely at a normal rate)
EE/0497:	4C8492  	JMP $9284      (Exit point for character mode resulting from a map load)
EE/049A:	A524    	LDA $24        (NMI count)
EE/049C:	F0FC    	BEQ $049A      (Loop until an NMI occurs)
EE/049E:	6424    	STZ $24        (Reset NMI count)
EE/04A0:	A523    	LDA $23        (Current brightness)
EE/04A2:	C522    	CMP $22        (Compare to desired brightness)
EE/04A4:	F006    	BEQ $04AC      (Branch if equal)
EE/04A6:	B003    	BCS $04AB      (Branch if greater)
EE/04A8:	1A      	INC A          (Increase brightness)
EE/04A9:	8001    	BRA $04AC      (Skip next instruction) (INC A...)
EE/04AB:	3A      	DEC A          (Decrease brightness)
EE/04AC:	8523    	STA $23        (Save changes)
EE/04AE:	4C9503  	JMP $0395      (Loop)

Main function for mine-cart ride
EE/04B1:	E220    	SEP #$20       (8-bit A)
EE/04B3:	C210    	REP #$10       (16-bit indexes)
EE/04B5:	201540  	JSR $4015      (Hide some objects)
EE/04B8:	207440  	JSR $4074      (Set $6D30-$6D34 and $6D3D-$6D4F to #$AA; zero $6D35-$6D3C)
EE/04BB:	A90F    	LDA #$0F
EE/04BD:	8522    	STA $22        (Set screen to reach full brightness)
EE/04BF:	6423    	STZ $23        (Start from a blank screen)
EE/04C1:	6424    	STZ $24        (Reset NMI count)
EE/04C3:	ADF611  	LDA $11F6
EE/04C6:	29FD    	AND #$FD       (Clear "invoke battle" bit)
EE/04C8:	8DF611  	STA $11F6      (Save changes) (LDA #$02, TRB $11F6...)
EE/04CB:	A9D0    	LDA #$D0
EE/04CD:	8D0942  	STA $4209      (V-Count timer, low byte)
EE/04D0:	9C0A42  	STZ $420A      (V-Count timer, high byte)
EE/04D3:	A940    	LDA #$40
EE/04D5:	8D0742  	STA $4207      (H-Count timer, low byte)
EE/04D8:	9C0842  	STZ $4208      (H-Count timer, high byte)
EE/04DB:	CD1142  	CMP $4211      (Clear IRQ flag)
EE/04DE:	A901    	LDA #$01
EE/04E0:	8D2C21  	STA $212C      (Enable BG1 for main screen)
EE/04E3:	9C2D21  	STZ $212D      (Disable all layers for subscreen)
EE/04E6:	E220    	SEP #$20       (8-bit A)
EE/04E8:	CD1042  	CMP $4210      (Clear NMI flag)
EE/04EB:	AD1242  	LDA $4212      (PPU status)
EE/04EE:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/04F0:	F0F6    	BEQ $04E8      (Loop if not)
EE/04F2:	A900    	LDA #$00
EE/04F4:	8D0021  	STA $2100      (Turn on the screen; set brightness to zero) (STZ...)
EE/04F7:	A9B1    	LDA #$B1
EE/04F9:	8D0042  	STA $4200      (Enable NMI, H/V-Count IRQ, auto joypad read)
EE/04FC:	58      	CLI            (Enable IRQ)
EE/04FD:	E220    	SEP #$20       (8-bit A)
EE/04FF:	220900C3	JSL $C30009    (Decode joypad status register 1)
EE/0503:	202623  	JSR $2326
EE/0506:	20149F  	JSR $9F14
EE/0509:	ADF611  	LDA $11F6
EE/050C:	8902    	BIT #$02       (Is a battle set to occur?)
EE/050E:	F035    	BEQ $0545      (Branch if not)
EE/0510:	20CE18  	JSR $18CE      (Effects preceding a mine-cart battle)
EE/0513:	E220    	SEP #$20       (8-bit A)
EE/0515:	20B290  	JSR $90B2      (Copy 256 bytes of RAM from $0000 to $0A00)
EE/0518:	A980    	LDA #$80
EE/051A:	8D0021  	STA $2100      (Disable screen)
EE/051D:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/0520:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0523:	78      	SEI            (Disable IRQ)
EE/0524:	08      	PHP            (Bank C2 handles that...)
EE/0525:	8B      	PHB            (Save data bank)
EE/0526:	220000C2	JSL $C20000    (Execute battle code)
EE/052A:	AB      	PLB            (Restore data bank)
EE/052B:	28      	PLP            (...)
EE/052C:	A980    	LDA #$80
EE/052E:	8D0021  	STA $2100      (Disable screen)
EE/0531:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/0534:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0537:	78      	SEI            (Disable IRQ again...)
EE/0538:	ADD11D  	LDA $1DD1      (Battle event byte)
EE/053B:	8901    	BIT #$01       (Annihilated?)
EE/053D:	F003    	BEQ $0542      (Branch if not) (LSR A, BCC...)
EE/053F:	4C3593  	JMP $9335      (Game over!)
EE/0542:	4C488C  	JMP $8C48      (Mine-cart ride initialization)
EE/0545:	A519    	LDA $19
EE/0547:	F007    	BEQ $0550      (Branch if mine-cart script has not completed)
EE/0549:	A523    	LDA $23        (Current brightness)
EE/054B:	D003    	BNE $0550      (Branch if the screen is not blank)
EE/054D:	4C1A93  	JMP $931A      (Exit point for mine-cart ride)
EE/0550:	E220    	SEP #$20       (8-bit A)
EE/0552:	A5FA    	LDA $FA        (NMI count)
EE/0554:	C904    	CMP #$04       (Below four?)
EE/0556:	90FA    	BCC $0552      (Loop if so)
EE/0558:	A523    	LDA $23        (Current brightness)
EE/055A:	C522    	CMP $22        (Compare to desired brightness)
EE/055C:	F006    	BEQ $0564      (Branch if equal)
EE/055E:	B003    	BCS $0563      (Branch if greater)
EE/0560:	1A      	INC A          (Increase brightness)
EE/0561:	8001    	BRA $0564      (Skip next instruction) (INC A...)
EE/0563:	3A      	DEC A          (Decrease brightness)
EE/0564:	8523    	STA $23        (Save changes)
EE/0566:	4CFD04  	JMP $04FD      (Loop) (BRA...)

DMA and HDMA initialization, among other things, for vehicle mode
EE/0569:	E220    	SEP #$20       (8-bit A)
EE/056B:	A9FC    	LDA #$FC
EE/056D:	859F    	STA $9F        (Variable for Mode 7 matrix A)
EE/056F:	85A6    	STA $A6        (Variable for Mode 7 matrix B)
EE/0571:	85AD    	STA $AD        (Variable for Mode 7 matrix C)
EE/0573:	85B4    	STA $B4        (Variable for Mode 7 matrix D)
EE/0575:	8F00607E	STA $7E6000
EE/0579:	8F07627E	STA $7E6207
EE/057D:	A9E4    	LDA #$E4
EE/057F:	85A2    	STA $A2
EE/0581:	85A9    	STA $A9
EE/0583:	85B0    	STA $B0
EE/0585:	85B7    	STA $B7
EE/0587:	8F03607E	STA $7E6003
EE/058B:	8F0A627E	STA $7E620A
EE/058F:	64A5    	STZ $A5
EE/0591:	64AC    	STZ $AC
EE/0593:	64B3    	STZ $B3
EE/0595:	64BA    	STZ $BA
EE/0597:	7B      	TDC            (Zero A)
EE/0598:	8F06607E	STA $7E6006
EE/059C:	8F0D627E	STA $7E620D
EE/05A0:	C220    	REP #$20       (16-bit A)
EE/05A2:	A99F00  	LDA #$009F
EE/05A5:	8D4243  	STA $4342      (Source address for DMA channel 4)
EE/05A8:	A9A600  	LDA #$00A6
EE/05AB:	8D5243  	STA $4352      (Source address for DMA channel 5)
EE/05AE:	A9AD00  	LDA #$00AD
EE/05B1:	8D6243  	STA $4362      (Source address for DMA channel 6)
EE/05B4:	A9B400  	LDA #$00B4
EE/05B7:	8D7243  	STA $4372      (Source address for DMA channel 7)
EE/05BA:	A9BB00  	LDA #$00BB
EE/05BD:	8D1243  	STA $4312      (Source address for DMA channel 1)
EE/05C0:	A90060  	LDA #$6000
EE/05C3:	8D2243  	STA $4322      (Source address for DMA channel 2)
EE/05C6:	A90762  	LDA #$6207
EE/05C9:	8D3243  	STA $4332      (Source address for DMA channel 3)
EE/05CC:	A90760  	LDA #$6007
EE/05CF:	8F01607E	STA $7E6001
EE/05D3:	A9FF60  	LDA #$60FF
EE/05D6:	8F04607E	STA $7E6004
EE/05DA:	A90E62  	LDA #$620E
EE/05DD:	8F08627E	STA $7E6208
EE/05E1:	A9FE63  	LDA #$63FE
EE/05E4:	8F0B627E	STA $7E620B
EE/05E8:	E220    	SEP #$20       (8-bit A)
EE/05EA:	A942    	LDA #$42
EE/05EC:	8D4043  	STA $4340      (Control for DMA channel 4)
EE/05EF:	8D5043  	STA $4350      (Control for DMA channel 5)
EE/05F2:	8D6043  	STA $4360      (Control for DMA channel 6)
EE/05F5:	8D7043  	STA $4370      (Control for DMA channel 7)
EE/05F8:	A91B    	LDA #$1B
EE/05FA:	8D4143  	STA $4341      (Set destination for DMA channel 4 to $211B: Mode 7 matrix A)
EE/05FD:	A91C    	LDA #$1C       (INC A...)
EE/05FF:	8D5143  	STA $4351      (Set destination for DMA channel 5 to $211C: Mode 7 matrix B)
EE/0602:	A91D    	LDA #$1D       (INC A...)
EE/0604:	8D6143  	STA $4361      (Set destination for DMA channel 6 to $211D: Mode 7 matrix C)
EE/0607:	A91E    	LDA #$1E       (INC A...)
EE/0609:	8D7143  	STA $4371      (Set destination for DMA channel 7 to $211E: Mode 7 matrix D)
EE/060C:	9C4443  	STZ $4344      (Source bank for DMA channel 4; 00/009F)
EE/060F:	9C5443  	STZ $4354      (Source bank for DMA channel 5; 00/00A6)
EE/0612:	9C6443  	STZ $4364      (Source bank for DMA channel 6; 00/00AD)
EE/0615:	9C7443  	STZ $4374      (Source bank for DMA channel 7; 00/00B4)
EE/0618:	9C4743  	STZ $4347      (Set indirect bank for HDMA channel 4 to 00)
EE/061B:	9C5743  	STZ $4357      (Set indirect bank for HDMA channel 5 to 00)
EE/061E:	9C6743  	STZ $4367      (Set indirect bank for HDMA channel 6 to 00)
EE/0621:	9C7743  	STZ $4377      (Set indirect bank for HDMA channel 7 to 00)
EE/0624:	A942    	LDA #$42
EE/0626:	8D1043  	STA $4310      (Control for DMA channel 1)
EE/0629:	A90F    	LDA #$0F
EE/062B:	8D1143  	STA $4311      (Set destination for DMA channel 1 to $210F: BG2 horizontal scroll)
EE/062E:	9C1443  	STZ $4314      (Source bank for DMA channel 1; 00/00BB)
EE/0631:	A97E    	LDA #$7E
EE/0633:	8D1743  	STA $4317      (Set indirect bank for HDMA channel 1 to 7E)
EE/0636:	A942    	LDA #$42
EE/0638:	8D2043  	STA $4320      (Control for DMA channel 2)
EE/063B:	A932    	LDA #$32
EE/063D:	8D2143  	STA $4321      (Set destination for DMA channel 2 to $2132: fixed color data)
EE/0640:	A97E    	LDA #$7E
EE/0642:	8D2443  	STA $4324      (Source bank for DMA channel 2; 7E/6000)
EE/0645:	A97E    	LDA #$7E       (...)
EE/0647:	8D2743  	STA $4327      (Set indirect bank for HDMA channel 2 to 7E)
EE/064A:	A944    	LDA #$44
EE/064C:	8D3043  	STA $4330      (Control for DMA channel 3)
EE/064F:	A926    	LDA #$26
EE/0651:	8D3143  	STA $4331      (Set destination for DMA channel 3 to $2126: window 1 left position)
EE/0654:	A97E    	LDA #$7E
EE/0656:	8D3443  	STA $4334      (Source bank for DMA channel 3; 7E/6207)
EE/0659:	A97E    	LDA #$7E       (...)
EE/065B:	8D3743  	STA $4337      (Set indirect bank for HDMA channel 3 to 7E)
EE/065E:	60      	RTS

DMA and HDMA initialization, among other things, for character mode
EE/065F:	E220    	SEP #$20       (8-bit A)
EE/0661:	A9FC    	LDA #$FC
EE/0663:	859F    	STA $9F        (Variable for Mode 7 matrix A)
EE/0665:	85A6    	STA $A6        (Variable for Mode 7 matrix B)
EE/0667:	85AD    	STA $AD        (Variable for Mode 7 matrix C)
EE/0669:	85B4    	STA $B4        (Variable for Mode 7 matrix D)
EE/066B:	8F00607E	STA $7E6000
EE/066F:	8F07627E	STA $7E6207
EE/0673:	A9E4    	LDA #$E4
EE/0675:	85A2    	STA $A2
EE/0677:	85A9    	STA $A9
EE/0679:	85B0    	STA $B0
EE/067B:	85B7    	STA $B7
EE/067D:	8F03607E	STA $7E6003
EE/0681:	8F0A627E	STA $7E620A
EE/0685:	64A5    	STZ $A5
EE/0687:	64AC    	STZ $AC
EE/0689:	64B3    	STZ $B3
EE/068B:	64BA    	STZ $BA
EE/068D:	7B      	TDC            (Zero A)
EE/068E:	8F06607E	STA $7E6006
EE/0692:	8F0D627E	STA $7E620D
EE/0696:	C220    	REP #$20       (16-bit A)
EE/0698:	A99F00  	LDA #$009F
EE/069B:	8D4243  	STA $4342      (Source address for DMA channel 4)
EE/069E:	A9A600  	LDA #$00A6
EE/06A1:	8D5243  	STA $4352      (Source address for DMA channel 5)
EE/06A4:	A9AD00  	LDA #$00AD
EE/06A7:	8D6243  	STA $4362      (Source address for DMA channel 6)
EE/06AA:	A9B400  	LDA #$00B4
EE/06AD:	8D7243  	STA $4372      (Source address for DMA channel 7)
EE/06B0:	A90060  	LDA #$6000
EE/06B3:	8D2243  	STA $4322      (Source address for DMA channel 2)
EE/06B6:	A90762  	LDA #$6207
EE/06B9:	8D3243  	STA $4332      (Source address for DMA channel 3)
EE/06BC:	A90760  	LDA #$6007
EE/06BF:	8F01607E	STA $7E6001
EE/06C3:	A9FF60  	LDA #$60FF
EE/06C6:	8F04607E	STA $7E6004
EE/06CA:	A90E62  	LDA #$620E
EE/06CD:	8F08627E	STA $7E6208
EE/06D1:	A9FE63  	LDA #$63FE
EE/06D4:	8F0B627E	STA $7E620B
EE/06D8:	E220    	SEP #$20       (8-bit A)
EE/06DA:	A942    	LDA #$42
EE/06DC:	8D4043  	STA $4340      (Control for DMA channel 4)
EE/06DF:	8D5043  	STA $4350      (Control for DMA channel 5)
EE/06E2:	8D6043  	STA $4360      (Control for DMA channel 6)
EE/06E5:	8D7043  	STA $4370      (Control for DMA channel 7)
EE/06E8:	A91B    	LDA #$1B
EE/06EA:	8D4143  	STA $4341      (Set destination for DMA channel 4 to $211B: Mode 7 matrix A)
EE/06ED:	A91C    	LDA #$1C       (INC A...)
EE/06EF:	8D5143  	STA $4351      (Set destination for DMA channel 5 to $211C: Mode 7 matrix B)
EE/06F2:	A91D    	LDA #$1D       (INC A...)
EE/06F4:	8D6143  	STA $4361      (Set destination for DMA channel 6 to $211D: Mode 7 matrix C)
EE/06F7:	A91E    	LDA #$1E       (INC A...)
EE/06F9:	8D7143  	STA $4371      (Set destination for DMA channel 7 to $211E: Mode 7 matrix D)
EE/06FC:	9C4443  	STZ $4344      (Source bank for DMA channel 4; 00/009F)
EE/06FF:	9C5443  	STZ $4354      (Source bank for DMA channel 5; 00/00A6)
EE/0702:	9C6443  	STZ $4364      (Source bank for DMA channel 6; 00/00AD)
EE/0705:	9C7443  	STZ $4374      (Source bank for DMA channel 7; 00/00B4)
EE/0708:	9C4743  	STZ $4347      (Set indirect bank for HDMA channel 4 to 00)
EE/070B:	9C5743  	STZ $4357      (Set indirect bank for HDMA channel 5 to 00)
EE/070E:	9C6743  	STZ $4367      (Set indirect bank for HDMA channel 6 to 00)
EE/0711:	9C7743  	STZ $4377      (Set indirect bank for HDMA channel 7 to 00)
EE/0714:	A942    	LDA #$42
EE/0716:	8D2043  	STA $4320      (Control for DMA channel 2)
EE/0719:	A932    	LDA #$32
EE/071B:	8D2143  	STA $4321      (Set destination for DMA channel 2 to $2132: fixed color data)
EE/071E:	A97E    	LDA #$7E
EE/0720:	8D2443  	STA $4324      (Source bank for DMA channel 2; 7E/6000)
EE/0723:	A97E    	LDA #$7E       (...)
EE/0725:	8D2743  	STA $4327      (Set indirect bank for HDMA channel 2 to 7E)
EE/0728:	A944    	LDA #$44
EE/072A:	8D3043  	STA $4330      (Control for DMA channel 3)
EE/072D:	A926    	LDA #$26
EE/072F:	8D3143  	STA $4331      (Set destination for DMA channel 3 to $2126: window 1 left position)
EE/0732:	A97E    	LDA #$7E
EE/0734:	8D3443  	STA $4334      (Source bank for DMA channel 3; 7E/6207)
EE/0737:	A97E    	LDA #$7E       (...)
EE/0739:	8D3743  	STA $4337      (Set indirect bank for HDMA channel 3 to 7E)
EE/073C:	60      	RTS

Function for vehicle mode
EE/073D:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/073F:	C210    	REP #$10       (16-bit indexes)
EE/0741:	A90100  	LDA #$0001     (TDC, TAX, INC A...)
EE/0744:	8566    	STA $66
EE/0746:	A20000  	LDX #$0000     (Zero X)
EE/0749:	A02000  	LDY #$0020     (Loop counter)
EE/074C:	A9E0FF  	LDA #$FFE0
EE/074F:	8558    	STA $58
EE/0751:	645A    	STZ $5A
EE/0753:	A566    	LDA $66
EE/0755:	0A      	ASL A          (Multiply by 2)
EE/0756:	18      	CLC            (Clear Carry for addition)
EE/0757:	6558    	ADC $58
EE/0759:	C92000  	CMP #$0020     (Compare to 40)
EE/075C:	3006    	BMI $0764
EE/075E:	E65A    	INC $5A
EE/0760:	38      	SEC            (Set Carry for subtraction)
EE/0761:	E94000  	SBC #$0040     (Subtract 64)
EE/0764:	8558    	STA $58
EE/0766:	A55A    	LDA $5A
EE/0768:	9F62B87E	STA $7EB862,X
EE/076C:	E8      	INX
EE/076D:	88      	DEY            (Decrease loop counter)
EE/076E:	D0E3    	BNE $0753      (Loop unless null)
EE/0770:	E666    	INC $66
EE/0772:	A566    	LDA $66
EE/0774:	C92000  	CMP #$0020     (32?)
EE/0777:	D0D0    	BNE $0749      (Loop if not)
EE/0779:	60      	RTS

VRAM-related function for vehicle mode
EE/077A:	E220    	SEP #$20       (8-bit A)
EE/077C:	C210    	REP #$10       (16-bit indexes)
EE/077E:	A980    	LDA #$80
EE/0780:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/0783:	A2004C  	LDX #$4C00
EE/0786:	8E1621  	STX $2116      (Set VRAM pointer to $9800)
EE/0789:	A940    	LDA #$40
EE/078B:	A22000  	LDX #$0020     (Loop counter)
EE/078E:	9C1921  	STZ $2119      (VRAM data write, high byte: 00)
EE/0791:	CA      	DEX
EE/0792:	D0FA    	BNE $078E      (Loop 49 times)
EE/0794:	A22000  	LDX #$0020
EE/0797:	8D1921  	STA $2119      (VRAM data write, high byte: 40)
EE/079A:	CA      	DEX            (Decrease loop counter)
EE/079B:	D0FA    	BNE $0797      (Loop unless null)
EE/079D:	60      	RTS

Zero $8000-$87FF and $A000-$A03F in VRAM
EE/079E:	A20040  	LDX #$4000
EE/07A1:	8E1621  	STX $2116      (Set VRAM pointer to $8000)
EE/07A4:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/07A7:	A00004  	LDY #$0400     (Loop counter)
EE/07AA:	8E1821  	STX $2118      (VRAM data write: 0000)
EE/07AD:	88      	DEY            (Decrease loop counter)
EE/07AE:	D0FA    	BNE $07AA      (Loop unless null)
EE/07B0:	A20050  	LDX #$5000
EE/07B3:	8E1621  	STX $2116      (Set VRAM pointer to $A000)
EE/07B6:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/07B9:	A02000  	LDY #$0020     (Loop counter)
EE/07BC:	8E1821  	STX $2118      (VRAM data write: 0000)
EE/07BF:	88      	DEY            (Decrease loop counter)
EE/07C0:	D0FA    	BNE $07BC      (Loop unless null)
EE/07C2:	60      	RTS

Scene with airship heading to Vector
EE/07C3:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/07C5:	A98F    	LDA #$8F
EE/07C7:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/07CA:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/07CD:	9C0C42  	STZ $420C      (Disable HDMA)
EE/07D0:	78      	SEI            (Disable IRQ)
EE/07D1:	A97E    	LDA #$7E
EE/07D3:	48      	PHA
EE/07D4:	AB      	PLB            (Set data bank to 7E)
EE/07D5:	AF36B2EE	LDA $EEB236    (Pointer to palette for BG with Imperial Castle, low byte)
EE/07D9:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/07DB:	AF37B2EE	LDA $EEB237    (Pointer to palette for BG with Imperial Castle, middle byte)
EE/07DF:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/07E1:	AF38B2EE	LDA $EEB238    (Pointer to palette for BG with Imperial Castle, high byte)
EE/07E5:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/07E7:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/07EA:	C220    	REP #$20       (16-bit A)
EE/07EC:	B7D2    	LDA [$D2],Y    (BG palette)
EE/07EE:	99E0E0  	STA $E0E0,Y    (Save in RAM)
EE/07F1:	C8      	INY
EE/07F2:	C8      	INY            (Point to next color)
EE/07F3:	C02000  	CPY #$0020     (Copied the entire palette?)
EE/07F6:	D0F4    	BNE $07EC      (Loop if not)
EE/07F8:	E220    	SEP #$20       (8-bit A)
EE/07FA:	7B      	TDC            (Zero A)
EE/07FB:	48      	PHA
EE/07FC:	AB      	PLB            (Set data bank to 00)
EE/07FD:	A2B8DF  	LDX #$DFB8
EE/0800:	86D2    	STX $D2        (Source address)
EE/0802:	A9D8    	LDA #$D8
EE/0804:	85D4    	STA $D3        (Source bank; D8/DFB8)
EE/0806:	A20020  	LDX #$2000
EE/0809:	86D5    	STX $D5        (Destination address)
EE/080B:	A97E    	LDA #$7E
EE/080D:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/080F:	2076A4  	JSR $A476      (LZSS decompression)
EE/0812:	2080AD  	JSR $AD80      (Transfer decompressed graphics to VRAM)
EE/0815:	A2BFE5  	LDX #$E5BF
EE/0818:	86D2    	STX $D2        (Source address)
EE/081A:	A9D8    	LDA #$D8
EE/081C:	85D4    	STA $D3        (Source bank; D8/E5BF)
EE/081E:	A20020  	LDX #$2000
EE/0821:	86D5    	STX $D5        (Destination address)
EE/0823:	A97E    	LDA #$7E
EE/0825:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/0827:	2076A4  	JSR $A476      (LZSS decompression)
EE/082A:	20A8AD  	JSR $ADA8      (Transfer decompressed tilemap to VRAM)
EE/082D:	A980    	LDA #$80
EE/082F:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/0832:	A20048  	LDX #$4800
EE/0835:	8E1621  	STX $2116      (Set VRAM pointer to $9000)
EE/0838:	A00004  	LDY #$0400     (Loop counter)
EE/083B:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/083E:	8E1821  	STX $2118      (VRAM data write: 0000)
EE/0841:	88      	DEY            (Decrease loop counter)
EE/0842:	D0FA    	BNE $083E      (Loop unless null)
EE/0844:	A97E    	LDA #$7E
EE/0846:	48      	PHA
EE/0847:	AB      	PLB            (Set data bank to 7E)
EE/0848:	20F040  	JSR $40F0      (Hide some graphics)
EE/084B:	C220    	REP #$20       (16-bit A)
EE/084D:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/0850:	E220    	SEP #$20       (8-bit A)
EE/0852:	7B      	TDC            (Zero A)
EE/0853:	9F07607E	STA $7E6007,X
EE/0857:	9F08607E	STA $7E6008,X
EE/085B:	C220    	REP #$20       (16-bit A)
EE/085D:	E8      	INX
EE/085E:	E8      	INX
EE/085F:	E09C00  	CPX #$009C
EE/0862:	D0EC    	BNE $0850      (Loop if not)
EE/0864:	A90007  	LDA #$0700
EE/0867:	8558    	STA $58
EE/0869:	A9000A  	LDA #$0A00
EE/086C:	855A    	STA $5A
EE/086E:	A558    	LDA $58
EE/0870:	38      	SEC            (Set Carry for subtraction)
EE/0871:	E90700  	SBC #$0007     (Subtract 7)
EE/0874:	8558    	STA $58        (Save changes)
EE/0876:	A55A    	LDA $5A
EE/0878:	38      	SEC            (Set Carry for subtraction)
EE/0879:	E90A00  	SBC #$000A     (Subtract 10)
EE/087C:	855A    	STA $5A        (Save changes)
EE/087E:	E220    	SEP #$20       (8-bit A)
EE/0880:	A559    	LDA $59
EE/0882:	0920    	ORA #$20
EE/0884:	9F07607E	STA $7E6007,X
EE/0888:	A55B    	LDA $5B
EE/088A:	09C0    	ORA #$C0
EE/088C:	9F08607E	STA $7E6008,X
EE/0890:	C220    	REP #$20       (16-bit A)
EE/0892:	E8      	INX
EE/0893:	E8      	INX
EE/0894:	E0C001  	CPX #$01C0
EE/0897:	D0D5    	BNE $086E      (Loop if not)
EE/0899:	A99200  	LDA #$0092
EE/089C:	8585    	STA $85
EE/089E:	A9B400  	LDA #$00B4
EE/08A1:	8573    	STA $73        (Set vehicle's direction to 180 degrees, the south direction)
EE/08A3:	A90030  	LDA #$3000
EE/08A6:	858B    	STA $8B        (Set zoom variable to #$3000)
EE/08A8:	8591    	STA $91        (Unused? DMA?)
EE/08AA:	A90018  	LDA #$1800
EE/08AD:	858D    	STA $8D
EE/08AF:	A9FFFE  	LDA #$FEFF
EE/08B2:	858F    	STA $8F
EE/08B4:	A90033  	LDA #$3300
EE/08B7:	852F    	STA $2F        (Set vehicle height to #$3300)
EE/08B9:	A98009  	LDA #$0980
EE/08BC:	8F2E6B7E	STA $7E6B2E
EE/08C0:	A900F0  	LDA #$F000
EE/08C3:	8564    	STA $64
EE/08C5:	6431    	STZ $31
EE/08C7:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/08CA:	8F60B67E	STA $7EB660
EE/08CE:	A96400  	LDA #$0064
EE/08D1:	8F62B67E	STA $7EB662
EE/08D5:	A90300  	LDA #$0003
EE/08D8:	8F64B67E	STA $7EB664
EE/08DC:	A90700  	LDA #$0007
EE/08DF:	8F66B67E	STA $7EB666
EE/08E3:	A91E00  	LDA #$001E
EE/08E6:	8F68B67E	STA $7EB668
EE/08EA:	A98C00  	LDA #$008C
EE/08ED:	8F6AB67E	STA $7EB66A
EE/08F1:	A90200  	LDA #$0002
EE/08F4:	8F6CB67E	STA $7EB66C
EE/08F8:	A90700  	LDA #$0007
EE/08FB:	8F6EB67E	STA $7EB66E
EE/08FF:	A92800  	LDA #$0028
EE/0902:	8F70B67E	STA $7EB670
EE/0906:	A9A000  	LDA #$00A0
EE/0909:	8F72B67E	STA $7EB672
EE/090D:	A90400  	LDA #$0004
EE/0910:	8F74B67E	STA $7EB674
EE/0914:	A90400  	LDA #$0004     (...)
EE/0917:	8F76B67E	STA $7EB676
EE/091B:	A91900  	LDA #$0019
EE/091E:	8F78B67E	STA $7EB678
EE/0922:	A96E00  	LDA #$006E
EE/0925:	8F7AB67E	STA $7EB67A
EE/0929:	A90200  	LDA #$0002
EE/092C:	8F7CB67E	STA $7EB67C
EE/0930:	A90300  	LDA #$0003     (INC A...)
EE/0933:	8F7EB67E	STA $7EB67E
EE/0937:	E220    	SEP #$20       (8-bit A)
EE/0939:	7B      	TDC            (Zero A)
EE/093A:	8F0F6B7E	STA $7E6B0F
EE/093E:	8F136B7E	STA $7E6B13
EE/0942:	8F176B7E	STA $7E6B17
EE/0946:	8F1B6B7E	STA $7E6B1B
EE/094A:	8F1F6B7E	STA $7E6B1F
EE/094E:	8F236B7E	STA $7E6B23
EE/0952:	8F276B7E	STA $7E6B27
EE/0956:	8F2B6B7E	STA $7E6B2B
EE/095A:	A94E    	LDA #$4E
EE/095C:	8F116B7E	STA $7E6B11
EE/0960:	8F156B7E	STA $7E6B15
EE/0964:	8F196B7E	STA $7E6B19
EE/0968:	8F1D6B7E	STA $7E6B1D
EE/096C:	8F216B7E	STA $7E6B21
EE/0970:	8F256B7E	STA $7E6B25
EE/0974:	8F296B7E	STA $7E6B29
EE/0978:	8F2D6B7E	STA $7E6B2D
EE/097C:	A965    	LDA #$65
EE/097E:	8F106B7E	STA $7E6B10
EE/0982:	A967    	LDA #$67
EE/0984:	8F146B7E	STA $7E6B14
EE/0988:	A98A    	LDA #$8A
EE/098A:	8F186B7E	STA $7E6B18
EE/098E:	A98C    	LDA #$8C
EE/0990:	8F1C6B7E	STA $7E6B1C
EE/0994:	A99A    	LDA #$9A
EE/0996:	8F206B7E	STA $7E6B20
EE/099A:	A99B    	LDA #$9B       (INC A...)
EE/099C:	8F246B7E	STA $7E6B24
EE/09A0:	A970    	LDA #$70
EE/09A2:	8F286B7E	STA $7E6B28
EE/09A6:	A971    	LDA #$71       (INC A...)
EE/09A8:	8F2C6B7E	STA $7E6B2C
EE/09AC:	A5E9    	LDA $E9
EE/09AE:	0903    	ORA #$03
EE/09B0:	85E9    	STA $E9        (Save changes) (LDA #$03, TSB $E9...)
EE/09B2:	7B      	TDC            (Zero A)
EE/09B3:	48      	PHA
EE/09B4:	AB      	PLB            (Set data bank to 00)
EE/09B5:	9C2321  	STZ $2123      (Window mask settings for BG1 and BG2)
EE/09B8:	9C2421  	STZ $2124      (Window mask settings for BG3 and BG4)
EE/09BB:	A9A0    	LDA #$A0
EE/09BD:	8D2521  	STA $2125      (Window mask settings for OBJ and color window)
EE/09C0:	A902    	LDA #$02
EE/09C2:	8D2D21  	STA $212D      (Enable BG2 for subscreen)
EE/09C5:	9C2F21  	STZ $212F      (Disable window masking on subscreen)
EE/09C8:	CD1042  	CMP $4210      (Clear NMI flag)
EE/09CB:	AD1242  	LDA $4212      (PPU status)
EE/09CE:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/09D0:	F0F6    	BEQ $09C8      (Loop if not)
EE/09D2:	A9B1    	LDA #$B1
EE/09D4:	8D0042  	STA $4200      (Enable NMI, H/V-Count IRQ, auto joypad read)
EE/09D7:	A207A7  	LDX #$A707
EE/09DA:	8E0515  	STX $1505      (IRQ address)
EE/09DD:	A9EE    	LDA #$EE
EE/09DF:	8D0715  	STA $1507      (IRQ bank; EE/A707)
EE/09E2:	58      	CLI            (Enable IRQ)
EE/09E3:	A524    	LDA $24        (NMI count)
EE/09E5:	F0FC    	BEQ $09E3      (Loop until an NMI occurs)
EE/09E7:	6424    	STZ $24        (Reset NMI count)
EE/09E9:	E220    	SEP #$20       (8-bit A)
EE/09EB:	A24E00  	LDX #$004E
EE/09EE:	8E0942  	STX $4209      (V-Count timer)
EE/09F1:	A2C800  	LDX #$00C8
EE/09F4:	8E0742  	STX $4207      (H-Count timer)
EE/09F7:	A912    	LDA #$12
EE/09F9:	8D3021  	STA $2130      (Color addition select)
EE/09FC:	A901    	LDA #$01
EE/09FE:	8D0521  	STA $2105      (BG mode 1, 8x8 tiles)
EE/0A01:	A903    	LDA #$03
EE/0A03:	8D3121  	STA $2131      (Enable color math for BG1 and BG2)
EE/0A06:	A565    	LDA $65
EE/0A08:	8D1021  	STA $2110      (BG2 vertical scroll, low byte)
EE/0A0B:	9C1021  	STZ $2110      (Zero the high byte)
EE/0A0E:	C221    	REP #$21       (16-bit A; clear Carry)
EE/0A10:	A564    	LDA $64
EE/0A12:	690700  	ADC #$0007
EE/0A15:	C90030  	CMP #$3000
EE/0A18:	1002    	BPL $0A1C
EE/0A1A:	8564    	STA $64        (Save changes)
EE/0A1C:	A585    	LDA $85
EE/0A1E:	8587    	STA $87
EE/0A20:	A537    	LDA $37        (Current Y position in 1/256 pixels)
EE/0A22:	18      	CLC            (Clear Carry for addition)
EE/0A23:	696000  	ADC #$0060     (Add 96)
EE/0A26:	8537    	STA $37        (Save changes)
EE/0A28:	A539    	LDA $39        (Current Y position in pixels, high byte)
EE/0A2A:	690000  	ADC #$0000     (Add one if Carry set) (ADC $00...)
EE/0A2D:	8539    	STA $39        (Save changes)
EE/0A2F:	A538    	LDA $38        (Current Y position in pixels, high byte)
EE/0A31:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/0A34:	8538    	STA $38        (Save changes) (LDA #$F000, TRB $38...)
EE/0A36:	A540    	LDA $40
EE/0A38:	18      	CLC            (Clear Carry for addition)
EE/0A39:	696000  	ADC #$0060     (Add 96)
EE/0A3C:	8540    	STA $40        (Save changes)
EE/0A3E:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/0A41:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/0A44:	207C42  	JSR $427C      (Sprite-related function)
EE/0A47:	206333  	JSR $3363      (Generate 32x32 world map for VRAM...?)
EE/0A4A:	C220    	REP #$20       (...)
EE/0A4C:	A531    	LDA $31
EE/0A4E:	1A      	INC A          (Add one)
EE/0A4F:	290300  	AND #$0003
EE/0A52:	8531    	STA $31        (Save changes)
EE/0A54:	0A      	ASL A          (Multiply by 2)
EE/0A55:	0A      	ASL A          (Multiply by 4)
EE/0A56:	0A      	ASL A          (Multiply by 8)
EE/0A57:	AA      	TAX            (Transfer A to X)
EE/0A58:	BF0E6B7E	LDA $7E6B0E,X
EE/0A5C:	8558    	STA $58        (Save it temporarily)
EE/0A5E:	BF106B7E	LDA $7E6B10,X
EE/0A62:	855A    	STA $5A        (Save it temporarily)
EE/0A64:	A531    	LDA $31
EE/0A66:	0A      	ASL A          (Multiply by 2)
EE/0A67:	290200  	AND #$0002     (0 or 2)
EE/0A6A:	8560    	STA $60
EE/0A6C:	DA      	PHX
EE/0A6D:	205F16  	JSR $165F
EE/0A70:	FA      	PLX
EE/0A71:	C220    	REP #$20       (16-bit A)
EE/0A73:	BF126B7E	LDA $7E6B12,X
EE/0A77:	8558    	STA $58        (Save it temporarily)
EE/0A79:	BF146B7E	LDA $7E6B14,X
EE/0A7D:	855A    	STA $5A        (Save it temporarily)
EE/0A7F:	A531    	LDA $31
EE/0A81:	0A      	ASL A          (Multiply by 2)
EE/0A82:	290200  	AND #$0002     (0 or 2)
EE/0A85:	1A      	INC A          (Add one)
EE/0A86:	8560    	STA $60
EE/0A88:	205F16  	JSR $165F
EE/0A8B:	C220    	REP #$20       (16-bit A)
EE/0A8D:	A531    	LDA $31
EE/0A8F:	0A      	ASL A          (Multiply by 2)
EE/0A90:	0A      	ASL A          (Multiply by 4)
EE/0A91:	0A      	ASL A          (Multiply by 8)
EE/0A92:	AA      	TAX            (Transfer A to X)
EE/0A93:	6460    	STZ $60
EE/0A95:	BF60B67E	LDA $7EB660,X
EE/0A99:	18      	CLC            (Clear Carry for addition)
EE/0A9A:	7F64B67E	ADC $7EB664,X
EE/0A9E:	C96801  	CMP #$0168     (Compare to 360)
EE/0AA1:	9003    	BCC $0AA6      (Branch if smaller)
EE/0AA3:	E96801  	SBC #$0168     (Subtract 360)
EE/0AA6:	9F60B67E	STA $7EB660,X  (Save changes)
EE/0AAA:	C9B400  	CMP #$00B4     (Facing western hemisphere?)
EE/0AAD:	9005    	BCC $0AB4      (Branch if so)
EE/0AAF:	E9B400  	SBC #$00B4     (Subtract 180)
EE/0AB2:	C660    	DEC $60
EE/0AB4:	DA      	PHX            (Save X)
EE/0AB5:	AA      	TAX            (Transfer A to X)
EE/0AB6:	E220    	SEP #$20       (8-bit A)
EE/0AB8:	BFF1FEEF	LDA $EFFEF1,X
EE/0ABC:	FA      	PLX            (Restore X)
EE/0ABD:	4A      	LSR A          (Divide by 2)
EE/0ABE:	4A      	LSR A          (Divide by 4)
EE/0ABF:	4A      	LSR A          (Divide by 8)
EE/0AC0:	855C    	STA $5C        (Save it temporarily)
EE/0AC2:	A560    	LDA $60
EE/0AC4:	1007    	BPL $0ACD
EE/0AC6:	A55C    	LDA $5C
EE/0AC8:	49FF    	EOR #$FF       (Toggle all bits)
EE/0ACA:	1A      	INC A          (Add one)
EE/0ACB:	855C    	STA $5C        (Save changes)
EE/0ACD:	BF62B67E	LDA $7EB662,X
EE/0AD1:	18      	CLC            (Clear Carry for addition)
EE/0AD2:	655C    	ADC $5C
EE/0AD4:	855D    	STA $5D        (Save it temporarily)
EE/0AD6:	18      	CLC            (Clear Carry for addition)
EE/0AD7:	7F66B67E	ADC $7EB666,X
EE/0ADB:	9F126B7E	STA $7E6B12,X
EE/0ADF:	A55D    	LDA $5D
EE/0AE1:	FF66B67E	SBC $7EB666,X
EE/0AE5:	9F0E6B7E	STA $7E6B0E,X
EE/0AE9:	E220    	SEP #$20       (8-bit A)
EE/0AEB:	A524    	LDA $24        (NMI count)
EE/0AED:	F0FC    	BEQ $0AEB      (Loop until an NMI occurs)
EE/0AEF:	6424    	STZ $24        (Reset NMI count)
EE/0AF1:	A523    	LDA $23        (Current brightness)
EE/0AF3:	C522    	CMP $22        (Compare to desired brightness)
EE/0AF5:	F006    	BEQ $0AFD      (Branch if equal)
EE/0AF7:	B003    	BCS $0AFC      (Branch if greater)
EE/0AF9:	1A      	INC A          (Increase brightness)
EE/0AFA:	8001    	BRA $0AFD      (Skip next instruction) (INC A...)
EE/0AFC:	3A      	DEC A          (Decrease brightness)
EE/0AFD:	8523    	STA $23        (Save changes)
EE/0AFF:	C900    	CMP #$00       (Results in black screen?)
EE/0B01:	D002    	BNE $0B05      (Branch if not)
EE/0B03:	A980    	LDA #$80       (Disable screen)
EE/0B05:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/0B08:	C220    	REP #$20       (16-bit A)
EE/0B0A:	AF2E6B7E	LDA $7E6B2E
EE/0B0E:	3A      	DEC A          (Decrease by one)
EE/0B0F:	8F2E6B7E	STA $7E6B2E    (Save changes)
EE/0B13:	F010    	BEQ $0B25      (Branch if zero)
EE/0B15:	C98000  	CMP #$0080
EE/0B18:	B008    	BCS $0B22
EE/0B1A:	4A      	LSR A          (Divide by 2)
EE/0B1B:	4A      	LSR A          (Divide by 4)
EE/0B1C:	4A      	LSR A          (Divide by 8)
EE/0B1D:	4A      	LSR A          (Divide by 16)
EE/0B1E:	E220    	SEP #$20       (8-bit A)
EE/0B20:	8522    	STA $22        (Save as desired brightness)
EE/0B22:	4CE909  	JMP $09E9      (Loop)
EE/0B25:	E220    	SEP #$20       (8-bit A)
EE/0B27:	A98F    	LDA #$8F
EE/0B29:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/0B2C:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0B2F:	60      	RTS

Show airship crashing
EE/0B30:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/0B32:	A98F    	LDA #$8F
EE/0B34:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/0B37:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/0B3A:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0B3D:	78      	SEI            (Disable IRQ)
EE/0B3E:	A901    	LDA #$01
EE/0B40:	8D2C21  	STA $212C      (Enable BG1 for main screen)
EE/0B43:	8D2D21  	STA $212D      (Enable BG1 for subscreen)
EE/0B46:	C220    	REP #$20       (16-bit A)
EE/0B48:	A90080  	LDA #$8000
EE/0B4B:	8F60B67E	STA $7EB660
EE/0B4F:	A90050  	LDA #$5000
EE/0B52:	8F62B67E	STA $7EB662
EE/0B56:	A9FFFE  	LDA #$FEFF
EE/0B59:	858F    	STA $8F
EE/0B5B:	A9E000  	LDA #$00E0
EE/0B5E:	8587    	STA $87
EE/0B60:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/0B63:	8F64B67E	STA $7EB664
EE/0B67:	A90000  	LDA #$0000     (...)
EE/0B6A:	8F66B67E	STA $7EB666
EE/0B6E:	A90200  	LDA #$0002     (INC A, INC A...)
EE/0B71:	8F68B67E	STA $7EB668
EE/0B75:	A90001  	LDA #$0100     (DEC A, XBA...)
EE/0B78:	8F6AB67E	STA $7EB66A
EE/0B7C:	A9000F  	LDA #$0F00
EE/0B7F:	8F6CB67E	STA $7EB66C
EE/0B83:	A90001  	LDA #$0100     (Same as EE/0B75...)
EE/0B86:	857D    	STA $7D
EE/0B88:	E220    	SEP #$20       (8-bit A)
EE/0B8A:	CD1042  	CMP $4210      (Clear NMI flag)
EE/0B8D:	AD1242  	LDA $4212      (PPU status)
EE/0B90:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/0B92:	F0F6    	BEQ $0B8A      (Loop if not)
EE/0B94:	A9B1    	LDA #$B1
EE/0B96:	8D0042  	STA $4200      (Enable NMI, H/V-Count IRQ, auto joypad read)
EE/0B99:	A907    	LDA #$07
EE/0B9B:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/0B9E:	A524    	LDA $24        (NMI count)
EE/0BA0:	F0FC    	BEQ $0B9E      (Loop until an NMI occurs)
EE/0BA2:	6424    	STZ $24        (Reset NMI count)
EE/0BA4:	C220    	REP #$20       (16-bit A)
EE/0BA6:	A98003  	LDA #$0380
EE/0BA9:	8526    	STA $26        (Set vehicle speed to 896)
EE/0BAB:	C231    	REP #$31       (16-bit A and indexes; clear Carry)
EE/0BAD:	AF60B67E	LDA $7EB660
EE/0BB1:	E94100  	SBC #$0041     (Subtract 66)
EE/0BB4:	C90003  	CMP #$0300     (Compare to 768)
EE/0BB7:	B007    	BCS $0BC0      (Branch if equal or greater)
EE/0BB9:	7B      	TDC            (Zero A)
EE/0BBA:	8F6CB67E	STA $7EB66C
EE/0BBE:	8004    	BRA $0BC4      (Skip next instruction)
EE/0BC0:	8F60B67E	STA $7EB660    (Save changes)
EE/0BC4:	8F8B0000	STA $00008B    ($8B...)
EE/0BC8:	AF62B67E	LDA $7EB662
EE/0BCC:	8F8D0000	STA $00008D    ($8D...)
EE/0BD0:	AF66B67E	LDA $7EB666
EE/0BD4:	AA      	TAX            (Transfer A to X)
EE/0BD5:	290100  	AND #$0001
EE/0BD8:	F008    	BEQ $0BE2      (LSR A, BCC...)
EE/0BDA:	8558    	STA $58
EE/0BDC:	AF64B67E	LDA $7EB664
EE/0BE0:	802F    	BRA $0C11
EE/0BE2:	6458    	STZ $58
EE/0BE4:	BF0000E0	LDA $E00000,X
EE/0BE8:	290300  	AND #$0003
EE/0BEB:	C90300  	CMP #$0003
EE/0BEE:	D003    	BNE $0BF3
EE/0BF0:	A90200  	LDA #$0002
EE/0BF3:	38      	SEC            (Set Carry for subtraction) (DEC A...)
EE/0BF4:	E90100  	SBC #$0001     (Subtract one)
EE/0BF7:	18      	CLC            (Clear Carry for addition)
EE/0BF8:	6F64B67E	ADC $7EB664
EE/0BFC:	300B    	BMI $0C09
EE/0BFE:	C96801  	CMP #$0168     (Compare to 360)
EE/0C01:	900A    	BCC $0C0D      (Branch if smaller)
EE/0C03:	38      	SEC            (Carry is already set...)
EE/0C04:	E96801  	SBC #$0168     (Subtract 360)
EE/0C07:	8004    	BRA $0C0D      (Skip next two instructions)
EE/0C09:	18      	CLC            (Clear Carry for addition)
EE/0C0A:	696801  	ADC #$0168     (Add 360)
EE/0C0D:	8F64B67E	STA $7EB664
EE/0C11:	18      	CLC            (Clear Carry for addition)
EE/0C12:	6558    	ADC $58
EE/0C14:	C96801  	CMP #$0168     (Compare to 360)
EE/0C17:	9003    	BCC $0C1C      (Branch if smaller)
EE/0C19:	E96801  	SBC #$0168     (Subtract 360)
EE/0C1C:	8573    	STA $73        (Set vehicle's direction)
EE/0C1E:	E8      	INX
EE/0C1F:	8A      	TXA            (Transfer X to A)
EE/0C20:	8F66B67E	STA $7EB666
EE/0C24:	08      	PHP            (Save processor status)
EE/0C25:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/0C28:	206333  	JSR $3363      (Generate 32x32 world map for VRAM...?)
EE/0C2B:	204E17  	JSR $174E
EE/0C2E:	28      	PLP            (Restore processor status)
EE/0C2F:	20ADAA  	JSR $AAAD      (Animate water tiles)
EE/0C32:	E220    	SEP #$20       (8-bit A)
EE/0C34:	A524    	LDA $24        (NMI count)
EE/0C36:	F0FC    	BEQ $0C34      (Loop until an NMI occurs)
EE/0C38:	6424    	STZ $24        (Reset NMI count)
EE/0C3A:	C220    	REP #$20       (16-bit A)
EE/0C3C:	AF6AB67E	LDA $7EB66A
EE/0C40:	CF6CB67E	CMP $7EB66C
EE/0C44:	F00A    	BEQ $0C50
EE/0C46:	B005    	BCS $0C4D
EE/0C48:	694000  	ADC #$0040     (Add 64)
EE/0C4B:	8003    	BRA $0C50      (Skip next instruction)
EE/0C4D:	E94000  	SBC #$0040     (Subtract 64)
EE/0C50:	8F6AB67E	STA $7EB66A    (Save changes)
EE/0C54:	E220    	SEP #$20       (8-bit A)
EE/0C56:	EB      	XBA            (Exchange B and A)
EE/0C57:	C900    	CMP #$00       (Results in black screen?)
EE/0C59:	D002    	BNE $0C5D      (Branch if not)
EE/0C5B:	A980    	LDA #$80       (Disable screen)
EE/0C5D:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/0C60:	C980    	CMP #$80       (Is the screen turned off?)
EE/0C62:	F003    	BEQ $0C67      (Branch if so)
EE/0C64:	4CA40B  	JMP $0BA4      (Loop)
EE/0C67:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0C6A:	A90F    	LDA #$0F
EE/0C6C:	8522    	STA $22        (Set screen to reach full brightness)
EE/0C6E:	6423    	STZ $23        (Start from a blank screen)
EE/0C70:	60      	RTS

Show airship emerging from the ocean
EE/0C71:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/0C73:	A98F    	LDA #$8F
EE/0C75:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/0C78:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/0C7B:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0C7E:	78      	SEI            (Disable IRQ)
EE/0C7F:	20F040  	JSR $40F0      (Hide some graphics)
EE/0C82:	C220    	REP #$20       (16-bit A)
EE/0C84:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/0C87:	BFC0E17E	LDA $7EE1C0,X  (Palette data)
EE/0C8B:	9F40E17E	STA $7EE140,X  (Save to palette for water objects)
EE/0C8F:	E8      	INX
EE/0C90:	E8      	INX            (Point to next color)
EE/0C91:	E02000  	CPX #$0020     (Copied the entire palette?)
EE/0C94:	D0F1    	BNE $0C87      (Loop if not)
EE/0C96:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/0C99:	BF00E17E	LDA $7EE100,X  (Palette color) (Integrate this into the above...)
EE/0C9D:	9F20E17E	STA $7EE120,X  (Save to palette for airship)
EE/0CA1:	BF02E17E	LDA $7EE102,X  (Next color)
EE/0CA5:	9F22E17E	STA $7EE122,X  (Save to palette for airship)
EE/0CA9:	E8      	INX
EE/0CAA:	E8      	INX
EE/0CAB:	E8      	INX
EE/0CAC:	E8      	INX            (Point to next two colors)
EE/0CAD:	E02000  	CPX #$0020     (Copied the entire palette?)
EE/0CB0:	D0E7    	BNE $0C99      (Loop if not)
EE/0CB2:	A9E000  	LDA #$00E0
EE/0CB5:	8585    	STA $85
EE/0CB7:	8587    	STA $87
EE/0CB9:	A97053  	LDA #$5370
EE/0CBC:	858B    	STA $8B        (Set zoom variable to #$5370)
EE/0CBE:	A9CD22  	LDA #$22CD
EE/0CC1:	858D    	STA $8D
EE/0CC3:	A9FFFE  	LDA #$FEFF
EE/0CC6:	858F    	STA $8F
EE/0CC8:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/0CCB:	A90004  	LDA #$0400
EE/0CCE:	8526    	STA $26        (Set vehicle speed to 1024)
EE/0CD0:	E220    	SEP #$20       (8-bit A)
EE/0CD2:	C210    	REP #$10       (16-bit indexes)
EE/0CD4:	9C2D21  	STZ $212D      (Disable all layers for subscreen)
EE/0CD7:	9C2F21  	STZ $212F      (Disable window masking on subscreen)
EE/0CDA:	9C3021  	STZ $2130      (Color addition select)
EE/0CDD:	A930    	LDA #$30
EE/0CDF:	8D1021  	STA $2110      (BG2 vertical scroll, low byte)
EE/0CE2:	9C1021  	STZ $2110      (Zero the high byte)
EE/0CE5:	A90E    	LDA #$0E
EE/0CE7:	85CA    	STA $CA        (This will initialize and eventually animate the airship and water objects)
EE/0CE9:	A907    	LDA #$07
EE/0CEB:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/0CEE:	A51E    	LDA $1E        (Vehicle behavior)
EE/0CF0:	0920    	ORA #$20
EE/0CF2:	851E    	STA $1E        (Save changes)
EE/0CF4:	CD1042  	CMP $4210      (Clear NMI flag)
EE/0CF7:	AD1242  	LDA $4212      (PPU status)
EE/0CFA:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/0CFC:	F0F6    	BEQ $0CF4      (Loop if not)
EE/0CFE:	A981    	LDA #$81
EE/0D00:	8D0042  	STA $4200      (Enable NMI and auto joypad read; disable IRQ)
EE/0D03:	58      	CLI            (Enable IRQ)
EE/0D04:	A524    	LDA $24        (NMI count)
EE/0D06:	F0FC    	BEQ $0D04      (Loop until an NMI occurs)
EE/0D08:	6424    	STZ $24        (Reset NMI count)
EE/0D0A:	E220    	SEP #$20       (8-bit A)
EE/0D0C:	A24000  	LDX #$0040
EE/0D0F:	8E0942  	STX $4209      (V-Count timer)
EE/0D12:	A2DC00  	LDX #$00DC
EE/0D15:	8E0742  	STX $4207      (H-Count timer)
EE/0D18:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/0D1B:	200243  	JSR $4302      (Sprite-related function)
EE/0D1E:	20ADAA  	JSR $AAAD      (Animate water tiles)
EE/0D21:	204E17  	JSR $174E
EE/0D24:	206333  	JSR $3363      (Generate 32x32 world map for VRAM...?)
EE/0D27:	C220    	REP #$20       (...)
EE/0D29:	AF50B67E	LDA $7EB650
EE/0D2D:	C90060  	CMP #$6000
EE/0D30:	B006    	BCS $0D38
EE/0D32:	E220    	SEP #$20       (8-bit A)
EE/0D34:	A900    	LDA #$00
EE/0D36:	8522    	STA $22        (Set screen to go blank)
EE/0D38:	E220    	SEP #$20       (8-bit A)
EE/0D3A:	A524    	LDA $24        (NMI count)
EE/0D3C:	F0FC    	BEQ $0D3A      (Loop until an NMI occurs)
EE/0D3E:	6424    	STZ $24        (Reset NMI count)
EE/0D40:	A523    	LDA $23        (Current brightness)
EE/0D42:	C522    	CMP $22        (Compare to desired brightness)
EE/0D44:	F006    	BEQ $0D4C      (Branch if equal)
EE/0D46:	B003    	BCS $0D4B      (Branch if greater)
EE/0D48:	1A      	INC A          (Increase brightness)
EE/0D49:	8001    	BRA $0D4C      (Skip next instruction) (INC A...)
EE/0D4B:	3A      	DEC A          (Decrease brightness)
EE/0D4C:	8523    	STA $23        (Save changes)
EE/0D4E:	A523    	LDA $23        (Load it again) (DEC A, BPL $0D0A...)
EE/0D50:	F003    	BEQ $0D55      (Branch if this will result in a blank screen)
EE/0D52:	4C0A0D  	JMP $0D0A      (Loop) (BRA...)
EE/0D55:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/0D57:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0D5A:	78      	SEI            (Disable IRQ) (PLP follows...)
EE/0D5B:	60      	RTS

Unused data
EE/0D5C:	7A9C
EE/0D5E:	739D
EE/0D60:	719B
EE/0D62:	719B
EE/0D64:	6F99
EE/0D66:	6F99
EE/0D68:	6D97
EE/0D6A:	6D97
EE/0D6C:	6B95
EE/0D6E:	6B95
EE/0D70:	6993
EE/0D72:	6993
EE/0D74:	6993
EE/0D76:	6791
EE/0D78:	6791
EE/0D7A:	6791
EE/0D7C:	658F
EE/0D7E:	658F
EE/0D80:	658F
EE/0D82:	638D
EE/0D84:	638D
EE/0D86:	638D
EE/0D88:	638D
EE/0D8A:	638B
EE/0D8C:	638B
EE/0D8E:	638B
EE/0D90:	638B
EE/0D92:	6289
EE/0D94:	6289
EE/0D96:	6289
EE/0D98:	6289
EE/0D9A:	6187
EE/0D9C:	6187
EE/0D9E:	6187
EE/0DA0:	6187
EE/0DA2:	6187
EE/0DA4:	6185
EE/0DA6:	6185
EE/0DA8:	6185
EE/0DAA:	6185
EE/0DAC:	6185
EE/0DAE:	6185
EE/0DB0:	6083
EE/0DB2:	6083
EE/0DB4:	6083
EE/0DB6:	6083
EE/0DB8:	6083
EE/0DBA:	6083

Function pertaining to the airship scene from the ending, as well as an unused scene
EE/0DBC:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/0DBE:	A98F    	LDA #$8F
EE/0DC0:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/0DC3:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/0DC6:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0DC9:	78      	SEI            (Disable IRQ)
EE/0DCA:	206905  	JSR $0569      (Initialize DMA and HDMA, etc.)
EE/0DCD:	20C43F  	JSR $3FC4      (Hide some objects and initialize gradient overlay)
EE/0DD0:	20BE40  	JSR $40BE      (Set $6D30-$6D34 to #$AA, and zero $6D35-$6D4F)
EE/0DD3:	201157  	JSR $5711      (Copy object data to RAM)
EE/0DD6:	201841  	JSR $4118      (Zero $B5D0 through $B64F)
EE/0DD9:	C220    	REP #$20       (16-bit A)
EE/0DDB:	A90080  	LDA #$8000
EE/0DDE:	8544    	STA $44        (Disable first VRAM part of NMI code)
EE/0DE0:	8546    	STA $46        (Disable second VRAM part of NMI code)
EE/0DE2:	6473    	STZ $73
EE/0DE4:	A9E000  	LDA #$00E0
EE/0DE7:	8585    	STA $85
EE/0DE9:	8587    	STA $87
EE/0DEB:	A97053  	LDA #$5370
EE/0DEE:	858B    	STA $8B        (Set zoom variable to #$5370)
EE/0DF0:	A9CD22  	LDA #$22CD
EE/0DF3:	858D    	STA $8D
EE/0DF5:	A9FFFE  	LDA #$FEFF
EE/0DF8:	858F    	STA $8F
EE/0DFA:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/0DFD:	C210    	REP #$10       (16-bit indexes)
EE/0DFF:	A96400  	LDA #$0064
EE/0E02:	8575    	STA $75
EE/0E04:	A90004  	LDA #$0400
EE/0E07:	8526    	STA $26        (Set vehicle speed to 1024)
EE/0E09:	203019  	JSR $1930      (Apply a gradient effect to the screen)
EE/0E0C:	A5E9    	LDA $E9
EE/0E0E:	090100  	ORA #$0001
EE/0E11:	85E9    	STA $E9        (Save changes) (SEP #$20, LDA #$01, TSB $E9...)
EE/0E13:	E220    	SEP #$20       (8-bit A)
EE/0E15:	A90F    	LDA #$0F
EE/0E17:	8522    	STA $22        (Set screen to reach full brightness)
EE/0E19:	6423    	STZ $23        (Start from a blank screen)
EE/0E1B:	9C2321  	STZ $2123      (Window mask settings for BG1 and BG2)
EE/0E1E:	9C2D21  	STZ $212D      (Disable all layers for subscreen)
EE/0E21:	9C2F21  	STZ $212F      (Disable window masking on subscreen)
EE/0E24:	9C3021  	STZ $2130      (Color addition select)
EE/0E27:	A930    	LDA #$30
EE/0E29:	8D1021  	STA $2110      (BG2 vertical scroll, low byte)
EE/0E2C:	9C1021  	STZ $2110      (Zero the high byte)
EE/0E2F:	A917    	LDA #$17
EE/0E31:	85CA    	STA $CA        (This will initialize and eventually animate the airship)
EE/0E33:	A907    	LDA #$07
EE/0E35:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/0E38:	A51E    	LDA $1E        (Vehicle behavior)
EE/0E3A:	0920    	ORA #$20
EE/0E3C:	851E    	STA $1E        (Save changes)
EE/0E3E:	CD1042  	CMP $4210      (Clear NMI flag)
EE/0E41:	AD1242  	LDA $4212      (PPU status)
EE/0E44:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/0E46:	F0F6    	BEQ $0E3E      (Loop if not)
EE/0E48:	A981    	LDA #$81
EE/0E4A:	8D0042  	STA $4200      (Enable NMI and auto joypad read; disable IRQ)
EE/0E4D:	78      	SEI            (Disable IRQ)
EE/0E4E:	A524    	LDA $24        (NMI count)
EE/0E50:	F0FC    	BEQ $0E4E      (Loop until an NMI occurs)
EE/0E52:	6424    	STZ $24        (Reset NMI count)
EE/0E54:	E220    	SEP #$20       (8-bit A)
EE/0E56:	A24000  	LDX #$0040
EE/0E59:	8E0942  	STX $4209      (V-Count timer)
EE/0E5C:	A2DC00  	LDX #$00DC
EE/0E5F:	8E0742  	STX $4207      (H-Count timer)
EE/0E62:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/0E65:	200243  	JSR $4302      (Sprite-related function)
EE/0E68:	204E17  	JSR $174E
EE/0E6B:	C220    	REP #$20       (...)
EE/0E6D:	AF50B67E	LDA $7EB650
EE/0E71:	C90038  	CMP #$3800
EE/0E74:	B006    	BCS $0E7C
EE/0E76:	E220    	SEP #$20       (8-bit A)
EE/0E78:	A900    	LDA #$00
EE/0E7A:	8522    	STA $22        (Set screen to go blank) (STZ...)
EE/0E7C:	E220    	SEP #$20       (8-bit A)
EE/0E7E:	A524    	LDA $24        (NMI count)
EE/0E80:	F0FC    	BEQ $0E7E      (Loop until an NMI occurs)
EE/0E82:	6424    	STZ $24        (Reset NMI count)
EE/0E84:	A523    	LDA $23        (Current brightness)
EE/0E86:	C522    	CMP $22        (Compare to desired brightness)
EE/0E88:	F006    	BEQ $0E90      (Branch if equal)
EE/0E8A:	B003    	BCS $0E8F      (Branch if greater)
EE/0E8C:	1A      	INC A          (Increase brightness)
EE/0E8D:	8001    	BRA $0E90      (Skip next instruction) (INC A...)
EE/0E8F:	3A      	DEC A          (Decrease brightness)
EE/0E90:	8523    	STA $23        (Save changes)
EE/0E92:	A523    	LDA $23        (Load it again) (DEC A, BPL $0E54...)
EE/0E94:	F003    	BEQ $0E99      (Branch if this will result in a blank screen)
EE/0E96:	4C540E  	JMP $0E54      (Loop) (BRA...)
EE/0E99:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/0E9B:	A98F    	LDA #$8F
EE/0E9D:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/0EA0:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/0EA3:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0EA6:	78      	SEI            (Disable IRQ)
EE/0EA7:	209F90  	JSR $909F      (Move #$06E0 bytes from 7E/F120 to 00/0520)
EE/0EAA:	6B      	RTL

Show part of world getting zapped, produce explosions (unused; freezes the game)
EE/0EAB:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/0EAD:	A98F    	LDA #$8F
EE/0EAF:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/0EB2:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/0EB5:	9C0C42  	STZ $420C      (Disable HDMA)
EE/0EB8:	78      	SEI            (Disable IRQ)
EE/0EB9:	20F040  	JSR $40F0      (Hide some graphics)
EE/0EBC:	C230    	REP #$30       (16-bit A and indexes)
EE/0EBE:	A90000  	LDA #$0000     (Zero A) (TDC, TAX...)
EE/0EC1:	A20000  	LDX #$0000     (Zero X)
EE/0EC4:	9F0E627E	STA $7E620E,X  (Zero a byte)
EE/0EC8:	E8      	INX
EE/0EC9:	E8      	INX            (Move to the next byte)
EE/0ECA:	E00007  	CPX #$0700     (Are we done zeroing bytes?)
EE/0ECD:	D0F5    	BNE $0EC4      (Loop if not)
EE/0ECF:	A9E000  	LDA #$00E0
EE/0ED2:	8585    	STA $85
EE/0ED4:	8587    	STA $87
EE/0ED6:	A90070  	LDA #$7000
EE/0ED9:	858B    	STA $8B        (Set zoom variable to #$7000)
EE/0EDB:	A90030  	LDA #$3000
EE/0EDE:	858D    	STA $8D
EE/0EE0:	A9FFFF  	LDA #$FFFF     (TDC, DEC A...)
EE/0EE3:	858F    	STA $8F
EE/0EE5:	A900FF  	LDA #$FF00
EE/0EE8:	8F60B67E	STA $7EB660
EE/0EEC:	A900C0  	LDA #$C000
EE/0EEF:	8F62B67E	STA $7EB662
EE/0EF3:	A900F8  	LDA #$F800
EE/0EF6:	8F64B67E	STA $7EB664
EE/0EFA:	A90004  	LDA #$0400
EE/0EFD:	8F66B67E	STA $7EB666
EE/0F01:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/0F04:	8F68B67E	STA $7EB668
EE/0F08:	E220    	SEP #$20       (8-bit A)
EE/0F0A:	C210    	REP #$10       (16-bit indexes)
EE/0F0C:	A907    	LDA #$07
EE/0F0E:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/0F11:	9C2321  	STZ $2123      (Window mask settings for BG1 and BG2)
EE/0F14:	9C2421  	STZ $2124      (Window mask settings for BG3 and BG4)
EE/0F17:	A9A0    	LDA #$A0
EE/0F19:	8D2521  	STA $2125      (Window mask settings for OBJ and color window)
EE/0F1C:	9C2D21  	STZ $212D      (Disable all layers for subscreen)
EE/0F1F:	9C2F21  	STZ $212F      (Disable window masking on subscreen)
EE/0F22:	A910    	LDA #$10
EE/0F24:	8D3021  	STA $2130      (Color addition select)
EE/0F27:	A9F0    	LDA #$F0
EE/0F29:	8D3221  	STA $2132      (Fixed color data)
EE/0F2C:	A5E9    	LDA $E9
EE/0F2E:	0902    	ORA #$02
EE/0F30:	85E9    	STA $E9        (Save changes) (LDA #$02, TSB $E9...)
EE/0F32:	CD1042  	CMP $4210      (Clear NMI flag)
EE/0F35:	AD1242  	LDA $4212      (PPU status)
EE/0F38:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/0F3A:	F0F6    	BEQ $0F32      (Loop if not)
EE/0F3C:	A981    	LDA #$81
EE/0F3E:	8D0042  	STA $4200      (Enable NMI and auto joypad read; disable IRQ)
EE/0F41:	78      	SEI            (Disable IRQ)
EE/0F42:	A524    	LDA $24        (NMI count)
EE/0F44:	F0FC    	BEQ $0F42      (Loop until an NMI occurs)
EE/0F46:	6424    	STZ $24        (Reset NMI count)
EE/0F48:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/0F4B:	C230    	REP #$30       (16-bit A and indexes)
EE/0F4D:	AF60B67E	LDA $7EB660
EE/0F51:	38      	SEC            (Set Carry for subtraction)
EE/0F52:	E9F00F  	SBC #$0FF0     (Subtract 4080)
EE/0F55:	C90020  	CMP #$2000     (Compare to 8192)
EE/0F58:	901F    	BCC $0F79      (Branch if smaller)
EE/0F5A:	8F60B67E	STA $7EB660    (Save changes)
EE/0F5E:	AF62B67E	LDA $7EB662
EE/0F62:	38      	SEC            (Carry is already set...)
EE/0F63:	E9000A  	SBC #$0A00     (Subtract 2560)
EE/0F66:	C90020  	CMP #$2000     (Compare to 8192)
EE/0F69:	8F62B67E	STA $7EB662    (Save changes)
EE/0F6D:	AF64B67E	LDA $7EB664
EE/0F71:	38      	SEC            (Set Carry for subtraction)
EE/0F72:	E9800C  	SBC #$0C80     (Subtract 3200)
EE/0F75:	8F64B67E	STA $7EB664    (Save changes)
EE/0F79:	7B      	TDC            (Zero A)
EE/0F7A:	8560    	STA $60
EE/0F7C:	E220    	SEP #$20       (8-bit A)
EE/0F7E:	AF61B67E	LDA $7EB661
EE/0F82:	8558    	STA $58        (Save it temporarily)
EE/0F84:	AF63B67E	LDA $7EB663
EE/0F88:	8559    	STA $59        (Save it temporarily)
EE/0F8A:	AF65B67E	LDA $7EB665
EE/0F8E:	855A    	STA $5A        (Save it temporarily)
EE/0F90:	A9DF    	LDA #$DF
EE/0F92:	855B    	STA $5B
EE/0F94:	205F16  	JSR $165F
EE/0F97:	E220    	SEP #$20       (8-bit A)
EE/0F99:	AF61B67E	LDA $7EB661
EE/0F9D:	8558    	STA $58        (Save it temporarily)
EE/0F9F:	AF63B67E	LDA $7EB663
EE/0FA3:	18      	CLC            (Clear Carry for addition)
EE/0FA4:	6F69B67E	ADC $7EB669
EE/0FA8:	8559    	STA $59        (Save it temporarily)
EE/0FAA:	AF65B67E	LDA $7EB665
EE/0FAE:	18      	CLC            (Clear Carry for addition)
EE/0FAF:	6F67B67E	ADC $7EB667
EE/0FB3:	855A    	STA $5A        (Save it temporarily)
EE/0FB5:	A9DF    	LDA #$DF
EE/0FB7:	855B    	STA $5B
EE/0FB9:	A901    	LDA #$01
EE/0FBB:	8560    	STA $60
EE/0FBD:	205F16  	JSR $165F
EE/0FC0:	E220    	SEP #$20       (8-bit A)
EE/0FC2:	A524    	LDA $24        (NMI count)
EE/0FC4:	F0FC    	BEQ $0FC2      (Loop until an NMI occurs)
EE/0FC6:	6424    	STZ $24        (Reset NMI count)
EE/0FC8:	A523    	LDA $23        (Current brightness)
EE/0FCA:	C522    	CMP $22        (Compare to desired brightness)
EE/0FCC:	F006    	BEQ $0FD4      (Branch if equal)
EE/0FCE:	B003    	BCS $0FD3      (Branch if greater)
EE/0FD0:	1A      	INC A          (Increase brightness)
EE/0FD1:	8001    	BRA $0FD4      (Skip next instruction) (INC A...)
EE/0FD3:	3A      	DEC A          (Decrease brightness)
EE/0FD4:	8523    	STA $23        (Save changes)
EE/0FD6:	C900    	CMP #$00       (Results in black screen?)
EE/0FD8:	D002    	BNE $0FDC      (Branch if not)
EE/0FDA:	A980    	LDA #$80       (Disable screen)
EE/0FDC:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/0FDF:	C220    	REP #$20       (16-bit A)
EE/0FE1:	AF60B67E	LDA $7EB660
EE/0FE5:	C90088  	CMP #$8800     (Compare to 34816)
EE/0FE8:	B021    	BCS $100B      (Loop if equal or greater)
EE/0FEA:	AF66B67E	LDA $7EB666
EE/0FEE:	D013    	BNE $1003
EE/0FF0:	AF68B67E	LDA $7EB668
EE/0FF4:	18      	CLC            (Clear Carry for addition)
EE/0FF5:	690002  	ADC #$0200     (Add 512)
EE/0FF8:	8F68B67E	STA $7EB668    (Save changes)
EE/0FFC:	C90040  	CMP #$4000     (Compare to 16384)
EE/0FFF:	F079    	BEQ $107A      (Branch if equal)
EE/1001:	8008    	BRA $100B      (Loop)
EE/1003:	38      	SEC            (Set Carry for subtraction)
EE/1004:	E92000  	SBC #$0020     (Subtract 32)
EE/1007:	8F66B67E	STA $7EB666    (Save changes)
EE/100B:	4C4B0F  	JMP $0F4B      (Loop)

Data for the unused function above
EE/100E:	FE00
EE/1010:	C000
EE/1012:	0001
EE/1014:	0002
EE/1016:	0020
EE/1018:	0100
EE/101A:	D800
EE/101C:	A000
EE/101E:	0001
EE/1020:	0002
EE/1022:	001D
EE/1024:	0600
EE/1026:	B000
EE/1028:	9000
EE/102A:	0001
EE/102C:	0002
EE/102E:	001E
EE/1030:	0A00
EE/1032:	9000
EE/1034:	7800
EE/1036:	0001
EE/1038:	0002
EE/103A:	0018
EE/103C:	0E00
EE/103E:	7800
EE/1040:	6000
EE/1042:	0001
EE/1044:	0002
EE/1046:	0016
EE/1048:	1200
EE/104A:	5800
EE/104C:	4800
EE/104E:	0001
EE/1050:	0002
EE/1052:	0015
EE/1054:	1600
EE/1056:	4200
EE/1058:	3C00
EE/105A:	0001
EE/105C:	0002
EE/105E:	0010
EE/1060:	1A00
EE/1062:	2E00
EE/1064:	2800
EE/1066:	0001
EE/1068:	0002
EE/106A:	000E
EE/106C:	1A00
EE/106E:	2000
EE/1070:	2000
EE/1072:	0001
EE/1074:	0002
EE/1076:	000D
EE/1078:	1E00

From the unused function above
EE/107A:	C220    	REP #$20       (16-bit A)
EE/107C:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/107F:	BF0E10EE	LDA $EE100E,X
EE/1083:	9F60B67E	STA $7EB660,X
EE/1087:	E8      	INX
EE/1088:	E8      	INX
EE/1089:	E06C00  	CPX #$006C
EE/108C:	D0F1    	BNE $107F
EE/108E:	7B      	TDC            (Zero A)
EE/108F:	8F50B67E	STA $7EB650
EE/1093:	E220    	SEP #$20       (8-bit A)
EE/1095:	A93F    	LDA #$3F
EE/1097:	8D3221  	STA $2132      (Fixed color data)
EE/109A:	A950    	LDA #$50
EE/109C:	8D3221  	STA $2132      (Fixed color data)
EE/109F:	A980    	LDA #$80
EE/10A1:	8D3221  	STA $2132      (Fixed color data)
EE/10A4:	8B      	PHB            (Save data bank)
EE/10A5:	E220    	SEP #$20       (8-bit A)
EE/10A7:	A97E    	LDA #$7E
EE/10A9:	48      	PHA
EE/10AA:	AB      	PLB            (Set data bank to 7E)
EE/10AB:	C230    	REP #$30       (16-bit A and indexes)
EE/10AD:	AF50B67E	LDA $7EB650
EE/10B1:	1A      	INC A          (Add one)
EE/10B2:	8F50B67E	STA $7EB650    (Save changes)
EE/10B6:	890100  	BIT #$0001
EE/10B9:	D010    	BNE $10CB      (LSR A, BCS...)
EE/10BB:	A90E62  	LDA #$620E
EE/10BE:	8F08627E	STA $7E6208
EE/10C2:	A9FE63  	LDA #$63FE
EE/10C5:	8F0B627E	STA $7E620B
EE/10C9:	800E    	BRA $10D9
EE/10CB:	A98E65  	LDA #$658E
EE/10CE:	8F08627E	STA $7E6208
EE/10D2:	A97E67  	LDA #$677E
EE/10D5:	8F0B627E	STA $7E620B
EE/10D9:	AF50B67E	LDA $7EB650
EE/10DD:	890100  	BIT #$0001
EE/10E0:	F005    	BEQ $10E7      (LSR A, BCC...)
EE/10E2:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/10E5:	8003    	BRA $10EA      (Skip next instruction)
EE/10E7:	A28003  	LDX #$0380
EE/10EA:	8664    	STX $64
EE/10EC:	A03800  	LDY #$0038
EE/10EF:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/10F2:	9D0E62  	STA $620E,X
EE/10F5:	9D7E62  	STA $627E,X
EE/10F8:	9DEE62  	STA $62EE,X
EE/10FB:	9D5E63  	STA $635E,X
EE/10FE:	9DCE63  	STA $63CE,X
EE/1101:	9D3E64  	STA $643E,X
EE/1104:	9DAE64  	STA $64AE,X
EE/1107:	9D1E65  	STA $651E,X
EE/110A:	E8      	INX
EE/110B:	E8      	INX
EE/110C:	88      	DEY
EE/110D:	D0E3    	BNE $10F2
EE/110F:	7B      	TDC            (Zero A)
EE/1110:	8D52B6  	STA $B652
EE/1113:	A20000  	LDX #$0000     (Zero X) (TAX...)
EE/1116:	BD6AB6  	LDA $B66A,X
EE/1119:	F006    	BEQ $1121      (Branch if zero)
EE/111B:	3A      	DEC A          (Decrease by one)
EE/111C:	9D6AB6  	STA $B66A,X    (Save changes)
EE/111F:	8045    	BRA $1166
EE/1121:	BD64B6  	LDA $B664,X
EE/1124:	18      	CLC            (Clear Carry for addition)
EE/1125:	7D66B6  	ADC $B666,X
EE/1128:	DD68B6  	CMP $B668,X
EE/112B:	B003    	BCS $1130      (Branch if equal or greater)
EE/112D:	9D64B6  	STA $B664,X    (Save changes)
EE/1130:	BD64B6  	LDA $B664,X
EE/1133:	8558    	STA $58        (Save it temporarily)
EE/1135:	DA      	PHX            (Save X)
EE/1136:	2018AC  	JSR $AC18
EE/1139:	FA      	PLX            (Restore X)
EE/113A:	BD60B6  	LDA $B660,X
EE/113D:	8558    	STA $58        (Save it temporarily)
EE/113F:	BD62B6  	LDA $B662,X
EE/1142:	855A    	STA $5A        (Save it temporarily)
EE/1144:	AD52B6  	LDA $B652
EE/1147:	890100  	BIT #$0001
EE/114A:	D005    	BNE $1151      (LSR A, BCS...)
EE/114C:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/114F:	8003    	BRA $1154      (Skip next instruction)
EE/1151:	A90200  	LDA #$0002
EE/1154:	18      	CLC            (Clear Carry for addition)
EE/1155:	6564    	ADC $64
EE/1157:	855C    	STA $5C        (Save it temporarily)
EE/1159:	BD65B6  	LDA $B665,X
EE/115C:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/115F:	855E    	STA $5E
EE/1161:	DA      	PHX            (Save X)
EE/1162:	20A1AC  	JSR $ACA1
EE/1165:	FA      	PLX            (Restore X)
EE/1166:	AD52B6  	LDA $B652
EE/1169:	1A      	INC A          (Add one)
EE/116A:	8D52B6  	STA $B652      (Save changes) (INC $B652...)
EE/116D:	8A      	TXA            (Transfer X to A)
EE/116E:	18      	CLC            (Clear Carry for addition)
EE/116F:	690C00  	ADC #$000C     (Add 12)
EE/1172:	AA      	TAX            (Transfer A to X)
EE/1173:	E06C00  	CPX #$006C     (Compare X to 108)
EE/1176:	D09E    	BNE $1116      (Loop if not equal)
EE/1178:	AB      	PLB            (Restore data bank)
EE/1179:	E220    	SEP #$20       (8-bit A)
EE/117B:	A524    	LDA $24        (NMI count)
EE/117D:	C902    	CMP #$02       (Have at least two NMIs occurred?)
EE/117F:	90FA    	BCC $117B      (Loop if not)
EE/1181:	6424    	STZ $24        (Reset NMI count)
EE/1183:	4CA410  	JMP $10A4

Show part of world getting blown up
EE/1186:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/1188:	A98F    	LDA #$8F
EE/118A:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/118D:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/1190:	9C0C42  	STZ $420C      (Disable HDMA)
EE/1193:	78      	SEI            (Disable IRQ)
EE/1194:	A97E    	LDA #$7E
EE/1196:	48      	PHA
EE/1197:	AB      	PLB            (Set data bank to 7E)
EE/1198:	20F040  	JSR $40F0      (Hide some graphics)
EE/119B:	C230    	REP #$30       (16-bit A and indexes)
EE/119D:	A9FF00  	LDA #$00FF
EE/11A0:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/11A3:	9F0E627E	STA $7E620E,X
EE/11A7:	E8      	INX
EE/11A8:	E8      	INX
EE/11A9:	E00007  	CPX #$0700
EE/11AC:	D0F5    	BNE $11A3      (Loop if not)
EE/11AE:	E220    	SEP #$20       (8-bit A)
EE/11B0:	7B      	TDC            (Zero A)
EE/11B1:	48      	PHA
EE/11B2:	AB      	PLB            (Set data bank to 00)
EE/11B3:	C230    	REP #$30       (16-bit A and indexes)
EE/11B5:	7B      	TDC            (...)
EE/11B6:	8F50B67E	STA $7EB650
EE/11BA:	8F52B67E	STA $7EB652
EE/11BE:	8F54B67E	STA $7EB654
EE/11C2:	A9F000  	LDA #$00F0
EE/11C5:	8F58B67E	STA $7EB658
EE/11C9:	A91000  	LDA #$0010
EE/11CC:	8F5AB67E	STA $7EB65A
EE/11D0:	A9E000  	LDA #$00E0
EE/11D3:	8585    	STA $85
EE/11D5:	8587    	STA $87
EE/11D7:	A90070  	LDA #$7000
EE/11DA:	858B    	STA $8B        (Set zoom variable to #$7000)
EE/11DC:	A90030  	LDA #$3000
EE/11DF:	858D    	STA $8D
EE/11E1:	A9FFFF  	LDA #$FFFF     (TDC, DEC A...)
EE/11E4:	858F    	STA $8F
EE/11E6:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/11E9:	E220    	SEP #$20       (8-bit A)
EE/11EB:	C210    	REP #$10       (16-bit indexes)
EE/11ED:	A907    	LDA #$07
EE/11EF:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/11F2:	9C2321  	STZ $2123      (Window mask settings for BG1 and BG2)
EE/11F5:	9C2421  	STZ $2124      (Window mask settings for BG3 and BG4)
EE/11F8:	A9A0    	LDA #$A0
EE/11FA:	8D2521  	STA $2125      (Window mask settings for OBJ and color window)
EE/11FD:	9C2D21  	STZ $212D      (Disable all layers for subscreen)
EE/1200:	9C2F21  	STZ $212F      (Disable window masking on subscreen)
EE/1203:	A910    	LDA #$10
EE/1205:	8D3021  	STA $2130      (Color addition select)
EE/1208:	A93F    	LDA #$3F
EE/120A:	8D3221  	STA $2132      (Fixed color data)
EE/120D:	A9D4    	LDA #$D4
EE/120F:	8D3221  	STA $2132      (Fixed color data)
EE/1212:	A5E9    	LDA $E9
EE/1214:	0902    	ORA #$02
EE/1216:	85E9    	STA $E9        (Save changes) (LDA #$02, TSB $E9...)
EE/1218:	A903    	LDA #$03
EE/121A:	8523    	STA $23        (Set current brightness setting to 3)
EE/121C:	20C715  	JSR $15C7
EE/121F:	CD1042  	CMP $4210      (Clear NMI flag)
EE/1222:	AD1242  	LDA $4212      (PPU status)
EE/1225:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/1227:	F0F6    	BEQ $121F      (Loop if not)
EE/1229:	A981    	LDA #$81
EE/122B:	8D0042  	STA $4200      (Enable NMI and auto joypad read; disable IRQ)
EE/122E:	78      	SEI            (Disable IRQ)
EE/122F:	A524    	LDA $24        (NMI count)
EE/1231:	F0FC    	BEQ $122F      (Loop until an NMI occurs)
EE/1233:	6424    	STZ $24        (Reset NMI count)
EE/1235:	E220    	SEP #$20       (8-bit A)
EE/1237:	AF5AB67E	LDA $7EB65A
EE/123B:	F01A    	BEQ $1257
EE/123D:	3A      	DEC A
EE/123E:	D010    	BNE $1250
EE/1240:	A980    	LDA #$80
EE/1242:	8D4221  	STA $2142      (Set normal speaker balance)
EE/1245:	A974    	LDA #$74
EE/1247:	8D4121  	STA $2141      (Sound effect: mega explosion)
EE/124A:	A918    	LDA #$18
EE/124C:	8D4021  	STA $2140      (APU I/O register 0)
EE/124F:	7B      	TDC            (Zero A)
EE/1250:	8F5AB67E	STA $7EB65A
EE/1254:	4C3A13  	JMP $133A
EE/1257:	8B      	PHB            (Save data bank)
EE/1258:	A97E    	LDA #$7E
EE/125A:	48      	PHA
EE/125B:	AB      	PLB            (Set data bank to 7E)
EE/125C:	C230    	REP #$30       (16-bit A and indexes)
EE/125E:	AF58B67E	LDA $7EB658
EE/1262:	38      	SEC            (Set Carry for subtraction)
EE/1263:	E90C00  	SBC #$000C     (Subtract 12)
EE/1266:	C98000  	CMP #$0080     (Compare to 128)
EE/1269:	9004    	BCC $126F      (Branch if smaller)
EE/126B:	8F58B67E	STA $7EB658    (Save changes)
EE/126F:	AF58B67E	LDA $7EB658
EE/1273:	C99000  	CMP #$0090     (Compare to 144)
EE/1276:	9005    	BCC $127D      (Branch if smaller)
EE/1278:	8558    	STA $58
EE/127A:	200816  	JSR $1608
EE/127D:	AF54B67E	LDA $7EB654
EE/1281:	1A      	INC A          (Add one)
EE/1282:	8F54B67E	STA $7EB654    (Save changes)
EE/1286:	890100  	BIT #$0001
EE/1289:	D010    	BNE $129B      (LSR A, BCS...)
EE/128B:	A90E62  	LDA #$620E
EE/128E:	8F08627E	STA $7E6208
EE/1292:	A9FE63  	LDA #$63FE
EE/1295:	8F0B627E	STA $7E620B
EE/1299:	800E    	BRA $12A9      (Skip next four instructions)
EE/129B:	A98E65  	LDA #$658E
EE/129E:	8F08627E	STA $7E6208
EE/12A2:	A97E67  	LDA #$677E
EE/12A5:	8F0B627E	STA $7E620B
EE/12A9:	AF54B67E	LDA $7EB654
EE/12AD:	890100  	BIT #$0001
EE/12B0:	F005    	BEQ $12B7      (LSR A, BCC...)
EE/12B2:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/12B5:	8003    	BRA $12BA      (Skip next instruction)
EE/12B7:	A28003  	LDX #$0380
EE/12BA:	A03800  	LDY #$0038
EE/12BD:	A9FF00  	LDA #$00FF
EE/12C0:	9D0E62  	STA $620E,X
EE/12C3:	9D7E62  	STA $627E,X
EE/12C6:	9DEE62  	STA $62EE,X
EE/12C9:	9D5E63  	STA $635E,X
EE/12CC:	9DCE63  	STA $63CE,X
EE/12CF:	9D3E64  	STA $643E,X
EE/12D2:	9DAE64  	STA $64AE,X
EE/12D5:	9D1E65  	STA $651E,X
EE/12D8:	E8      	INX
EE/12D9:	E8      	INX
EE/12DA:	88      	DEY
EE/12DB:	D0E3    	BNE $12C0
EE/12DD:	AB      	PLB
EE/12DE:	AF54B67E	LDA $7EB654
EE/12E2:	890100  	BIT #$0001
EE/12E5:	D005    	BNE $12EC      (LSR A, BCS...)
EE/12E7:	A98003  	LDA #$0380
EE/12EA:	8001    	BRA $12ED      (Skip next instruction)
EE/12EC:	7B      	TDC            (Zero A)
EE/12ED:	8564    	STA $64
EE/12EF:	A93000  	LDA #$0030
EE/12F2:	8558    	STA $58
EE/12F4:	A99000  	LDA #$0090
EE/12F7:	855A    	STA $5A
EE/12F9:	A90000  	LDA #$0000     (...)
EE/12FC:	18      	CLC            (...)
EE/12FD:	6564    	ADC $64        (LDA $64...)
EE/12FF:	855C    	STA $5C
EE/1301:	AF51B67E	LDA $7EB651
EE/1305:	855E    	STA $5E
EE/1307:	20A1AC  	JSR $ACA1
EE/130A:	A9A000  	LDA #$00A0
EE/130D:	8558    	STA $58
EE/130F:	A96000  	LDA #$0060
EE/1312:	855A    	STA $5A
EE/1314:	A90200  	LDA #$0002
EE/1317:	18      	CLC            (Clear Carry for addition)
EE/1318:	6564    	ADC $64
EE/131A:	855C    	STA $5C
EE/131C:	AF51B67E	LDA $7EB651
EE/1320:	855E    	STA $5E
EE/1322:	20A1AC  	JSR $ACA1
EE/1325:	C220    	REP #$20       (16-bit A)
EE/1327:	AF50B67E	LDA $7EB650
EE/132B:	18      	CLC            (Clear Carry for addition)
EE/132C:	690002  	ADC #$0200     (Add 512)
EE/132F:	8F50B67E	STA $7EB650    (Save changes)
EE/1333:	8558    	STA $58
EE/1335:	2018AC  	JSR $AC18
EE/1338:	E220    	SEP #$20       (8-bit A)
EE/133A:	A524    	LDA $24        (NMI count)
EE/133C:	C902    	CMP #$02       (Have at least two NMIs occurred?)
EE/133E:	90FA    	BCC $133A      (Loop if not)
EE/1340:	6424    	STZ $24        (Erase all traces of the NMI occurrences)
EE/1342:	A523    	LDA $23        (Current brightness)
EE/1344:	C522    	CMP $22        (Compare to desired brightness)
EE/1346:	F006    	BEQ $134E      (Branch if equal)
EE/1348:	B003    	BCS $134D      (Branch if greater)
EE/134A:	1A      	INC A          (Increase brightness)
EE/134B:	8001    	BRA $134E      (Skip next instruction) (INC A...)
EE/134D:	3A      	DEC A          (Decrease brightness)
EE/134E:	8523    	STA $23        (Save changes)
EE/1350:	C900    	CMP #$00       (Results in black screen?)
EE/1352:	D002    	BNE $1356      (Branch if not)
EE/1354:	A980    	LDA #$80       (Disable screen)
EE/1356:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/1359:	AF51B67E	LDA $7EB651
EE/135D:	C9E0    	CMP #$E0       (Explosion reached line 225?)
EE/135F:	9009    	BCC $136A      (Branch if not)
EE/1361:	A9FF    	LDA #$FF
EE/1363:	EF51B67E	SBC $7EB651
EE/1367:	4A      	LSR A          (Divide by 2)
EE/1368:	8522    	STA $22        (Save as desired brightness)
EE/136A:	A523    	LDA $23        (Current brightness)
EE/136C:	F003    	BEQ $1371      (Branch if this will result in a blank screen)
EE/136E:	4C3512  	JMP $1235
EE/1371:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/1373:	9C0C42  	STZ $420C      (Disable HDMA)
EE/1376:	78      	SEI            (Disable IRQ)
EE/1377:	60      	RTS

Show part of world getting zapped
EE/1378:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/137A:	A98F    	LDA #$8F
EE/137C:	8D0021  	STA $2100      (Disable screen; full brightness)
EE/137F:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/1382:	9C0C42  	STZ $420C      (Disable HDMA)
EE/1385:	78      	SEI            (Disable IRQ)
EE/1386:	A940    	LDA #$40
EE/1388:	8D6D1F  	STA $1F6D      (Set RNG index to 64)
EE/138B:	20F040  	JSR $40F0      (Hide some graphics)
EE/138E:	C230    	REP #$30       (16-bit A and indexes)
EE/1390:	A90100  	LDA #$0001     (TDC, TAX, INC A...)
EE/1393:	A20000  	LDX #$0000     (Zero X)
EE/1396:	9F0E627E	STA $7E620E,X
EE/139A:	E8      	INX
EE/139B:	E8      	INX
EE/139C:	E00007  	CPX #$0700
EE/139F:	D0F5    	BNE $1396      (Loop if not)
EE/13A1:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/13A4:	BFD6E17E	LDA $7EE1D6,X  (Sprite color)
EE/13A8:	9F42E17E	STA $7EE142,X  (Save to palette for fire sprites)
EE/13AC:	E8      	INX
EE/13AD:	E8      	INX            (Point to next color)
EE/13AE:	E00A00  	CPX #$000A     (Copied 5 colors?)
EE/13B1:	D0F1    	BNE $13A4      (Loop if not)
EE/13B3:	A9E000  	LDA #$00E0
EE/13B6:	8585    	STA $85
EE/13B8:	8587    	STA $87
EE/13BA:	A97073  	LDA #$7370
EE/13BD:	858B    	STA $8B        (Set zoom variable to #$7370)
EE/13BF:	A90030  	LDA #$3000
EE/13C2:	858D    	STA $8D
EE/13C4:	A9FFFF  	LDA #$FFFF     (TDC, DEC A...)
EE/13C7:	858F    	STA $8F
EE/13C9:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/13CC:	A90004  	LDA #$0400
EE/13CF:	8526    	STA $26        (Set vehicle speed to 1024)
EE/13D1:	A5E9    	LDA $E9
EE/13D3:	890800  	BIT #$0008     (Direct laser beam westward?)
EE/13D6:	D023    	BNE $13FB      (Branch if so)
EE/13D8:	A93601  	LDA #$0136
EE/13DB:	8575    	STA $75
EE/13DD:	A90020  	LDA #$2000
EE/13E0:	8F50B67E	STA $7EB650
EE/13E4:	A900A0  	LDA #$A000
EE/13E7:	8F52B67E	STA $7EB652
EE/13EB:	A90020  	LDA #$2000
EE/13EE:	8F54B67E	STA $7EB654
EE/13F2:	A900E0  	LDA #$E000
EE/13F5:	8F56B67E	STA $7EB656
EE/13F9:	8021    	BRA $141C
EE/13FB:	A93C00  	LDA #$003C
EE/13FE:	8575    	STA $75
EE/1400:	A900D0  	LDA #$D000
EE/1403:	8F50B67E	STA $7EB650
EE/1407:	A90070  	LDA #$7000
EE/140A:	8F52B67E	STA $7EB652
EE/140E:	A900F0  	LDA #$F000
EE/1411:	8F54B67E	STA $7EB654
EE/1415:	A900E0  	LDA #$E000
EE/1418:	8F56B67E	STA $7EB656
EE/141C:	7B      	TDC            (Zero A)
EE/141D:	8F58B67E	STA $7EB658
EE/1421:	A98000  	LDA #$0080
EE/1424:	8F5AB67E	STA $7EB65A
EE/1428:	E220    	SEP #$20       (8-bit A)
EE/142A:	C210    	REP #$10       (16-bit indexes)
EE/142C:	9C2321  	STZ $2123      (Window mask settings for BG1 and BG2)
EE/142F:	9C2421  	STZ $2124      (Window mask settings for BG3 and BG4)
EE/1432:	A930    	LDA #$30
EE/1434:	8D2521  	STA $2125      (Window mask settings for OBJ and color window)
EE/1437:	9C2D21  	STZ $212D      (Disable all layers for subscreen)
EE/143A:	9C2E21  	STZ $212E      (Disable window masking on main screen)
EE/143D:	9C2F21  	STZ $212F      (Disable window masking on subscreen)
EE/1440:	A920    	LDA #$20
EE/1442:	8D3021  	STA $2130      (Color addition select)
EE/1445:	A903    	LDA #$03
EE/1447:	8D3121  	STA $2131      (Enable color math for BG1 and BG2)
EE/144A:	A968    	LDA #$68
EE/144C:	8D3221  	STA $2132      (Fixed color data)
EE/144F:	A98F    	LDA #$8F
EE/1451:	8D3221  	STA $2132      (Fixed color data)
EE/1454:	A930    	LDA #$30
EE/1456:	8D1021  	STA $2110      (BG2 vertical scroll, low byte)
EE/1459:	9C1021  	STZ $2110      (Zero the high byte)
EE/145C:	A915    	LDA #$15
EE/145E:	85CA    	STA $CA        (This will initialize and eventually animate the fire objects)
EE/1460:	A907    	LDA #$07
EE/1462:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/1465:	A980    	LDA #$80
EE/1467:	8D4221  	STA $2142      (Set normal speaker balance)
EE/146A:	A951    	LDA #$51
EE/146C:	8D4121  	STA $2141      (Sound effect for Light of Judgment)
EE/146F:	A918    	LDA #$18
EE/1471:	8D4021  	STA $2140      (APU I/O register 0)
EE/1474:	A51E    	LDA $1E        (Vehicle behavior)
EE/1476:	0920    	ORA #$20
EE/1478:	851E    	STA $1E        (Save changes) (LDA #$20, TSB $1E...)
EE/147A:	A5E9    	LDA $E9
EE/147C:	0902    	ORA #$02
EE/147E:	85E9    	STA $E9        (Save changes) (LDA #$02, TSB $E9...)
EE/1480:	CD1042  	CMP $4210      (Clear NMI flag)
EE/1483:	AD1242  	LDA $4212      (PPU status)
EE/1486:	8980    	BIT #$80       (V-Blank flag set?) (BPL...)
EE/1488:	F0F6    	BEQ $1480      (Loop if not)
EE/148A:	A981    	LDA #$81
EE/148C:	8D0042  	STA $4200      (Enable NMI and auto joypad read; disable IRQ)
EE/148F:	78      	SEI            (Disable IRQ)
EE/1490:	A524    	LDA $24        (NMI count)
EE/1492:	F0FC    	BEQ $1490      (Loop until an NMI occurs)
EE/1494:	6424    	STZ $24        (Reset NMI count)
EE/1496:	E220    	SEP #$20       (8-bit A)
EE/1498:	7B      	TDC            (Zero A)
EE/1499:	AD6D1F  	LDA $1F6D      (RNG index)
EE/149C:	AA      	TAX            (Transfer A to X)
EE/149D:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/14A1:	290F    	AND #$0F       (Remain between 0 and 15)
EE/14A3:	0960    	ORA #$60
EE/14A5:	8D3221  	STA $2132      (Fixed color data)
EE/14A8:	C220    	REP #$20       (16-bit A)
EE/14AA:	A5E9    	LDA $E9
EE/14AC:	890800  	BIT #$0008
EE/14AF:	D026    	BNE $14D7
EE/14B1:	AF50B67E	LDA $7EB650
EE/14B5:	18      	CLC            (Clear Carry for addition)
EE/14B6:	698001  	ADC #$0180     (Add 384)
EE/14B9:	8F50B67E	STA $7EB650    (Save changes)
EE/14BD:	AF52B67E	LDA $7EB652
EE/14C1:	38      	SEC            (Set Carry for subtraction)
EE/14C2:	E90001  	SBC #$0100     (Subtract 256)
EE/14C5:	8F52B67E	STA $7EB652    (Save changes)
EE/14C9:	AF54B67E	LDA $7EB654
EE/14CD:	18      	CLC            (Clear Carry for addition)
EE/14CE:	69E000  	ADC #$00E0     (Add 224)
EE/14D1:	8F54B67E	STA $7EB654    (Save changes)
EE/14D5:	8024    	BRA $14FB
EE/14D7:	AF50B67E	LDA $7EB650
EE/14DB:	38      	SEC            (Set Carry for subtraction)
EE/14DC:	E98001  	SBC #$0180     (Subtract 384)
EE/14DF:	8F50B67E	STA $7EB650    (Save changes)
EE/14E3:	AF52B67E	LDA $7EB652
EE/14E7:	38      	SEC            (Set Carry for subtraction)
EE/14E8:	E96000  	SBC #$0060     (Subtract 96)
EE/14EB:	8F52B67E	STA $7EB652    (Save changes)
EE/14EF:	AF54B67E	LDA $7EB654
EE/14F3:	38      	SEC            (Set Carry for subtraction)
EE/14F4:	E92001  	SBC #$0120     (Subtract 288)
EE/14F7:	8F54B67E	STA $7EB654    (Save changes)
EE/14FB:	7B      	TDC            (Zero A)
EE/14FC:	8560    	STA $60
EE/14FE:	AF58B67E	LDA $7EB658
EE/1502:	1A      	INC A
EE/1503:	29FF00  	AND #$00FF     (Zero the high byte)
EE/1506:	8F58B67E	STA $7EB658    (Save changes)
EE/150A:	AA      	TAX            (Transfer A to X)
EE/150B:	E220    	SEP #$20       (8-bit A)
EE/150D:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/1511:	2903    	AND #$03       (0 to 3)
EE/1513:	C903    	CMP #$03       (Compare to 3)
EE/1515:	D001    	BNE $1518      (Branch if not equal)
EE/1517:	7B      	TDC            (Zero A)
EE/1518:	8F59B67E	STA $7EB659
EE/151C:	AF51B67E	LDA $7EB651
EE/1520:	38      	SEC            (Set Carry for subtraction)
EE/1521:	EF59B67E	SBC $7EB659
EE/1525:	8558    	STA $58        (Save it temporarily)
EE/1527:	AF53B67E	LDA $7EB653
EE/152B:	8559    	STA $59        (Save it temporarily)
EE/152D:	AF55B67E	LDA $7EB655
EE/1531:	18      	CLC
EE/1532:	EF59B67E	SBC $7EB659
EE/1536:	855A    	STA $5A        (Save it temporarily)
EE/1538:	AF57B67E	LDA $7EB657
EE/153C:	855B    	STA $5B
EE/153E:	205F16  	JSR $165F
EE/1541:	E220    	SEP #$20       (8-bit A)
EE/1543:	AF51B67E	LDA $7EB651
EE/1547:	18      	CLC            (Clear Carry for addition)
EE/1548:	6F59B67E	ADC $7EB659
EE/154C:	8558    	STA $58        (Save it temporarily)
EE/154E:	AF53B67E	LDA $7EB653
EE/1552:	8559    	STA $59        (Save it temporarily)
EE/1554:	AF55B67E	LDA $7EB655
EE/1558:	38      	SEC
EE/1559:	6F59B67E	ADC $7EB659
EE/155D:	855A    	STA $5A        (Save it temporarily)
EE/155F:	AF57B67E	LDA $7EB657
EE/1563:	855B    	STA $5B
EE/1565:	A901    	LDA #$01
EE/1567:	8560    	STA $60
EE/1569:	205F16  	JSR $165F
EE/156C:	E220    	SEP #$20       (8-bit A)
EE/156E:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/1571:	200243  	JSR $4302      (Sprite-related function)
EE/1574:	20ADAA  	JSR $AAAD      (Animate water tiles)
EE/1577:	204E17  	JSR $174E
EE/157A:	206333  	JSR $3363      (Generate 32x32 world map for VRAM...?)
EE/157D:	C220    	REP #$20       (...)
EE/157F:	AF5AB67E	LDA $7EB65A
EE/1583:	3A      	DEC A          (Decrease by one)
EE/1584:	8F5AB67E	STA $7EB65A    (Save changes)
EE/1588:	C90800  	CMP #$0008     (Compare to 8)
EE/158B:	B005    	BCS $1592      (Branch if equal or greater)
EE/158D:	E220    	SEP #$20       (8-bit A)
EE/158F:	0A      	ASL A          (Multiply by 2)
EE/1590:	8522    	STA $22        (Save as desired brightness)
EE/1592:	E220    	SEP #$20       (8-bit A)
EE/1594:	A524    	LDA $24        (NMI count)
EE/1596:	F0FC    	BEQ $1594      (Loop until an NMI occurs)
EE/1598:	6424    	STZ $24        (Reset NMI count)
EE/159A:	A523    	LDA $23        (Current brightness)
EE/159C:	C522    	CMP $22        (Compare to desired brightness)
EE/159E:	F006    	BEQ $15A6      (Branch if equal)
EE/15A0:	B003    	BCS $15A5      (Branch if greater)
EE/15A2:	1A      	INC A          (Increase brightness)
EE/15A3:	8001    	BRA $15A6      (Skip next instruction) (INC A...)
EE/15A5:	3A      	DEC A          (Decrease brightness)
EE/15A6:	C522    	CMP $22        (Compare to desired brightness)
EE/15A8:	F006    	BEQ $15B0      (Branch if equal)
EE/15AA:	B003    	BCS $15AF      (Branch if greater)
EE/15AC:	1A      	INC A          (Increase brightness)
EE/15AD:	8001    	BRA $15B0      (Skip next instruction) (INC A...)
EE/15AF:	3A      	DEC A          (Decrease brightness)
EE/15B0:	8523    	STA $23        (Save changes)
EE/15B2:	AF5AB67E	LDA $7EB65A
EE/15B6:	F003    	BEQ $15BB
EE/15B8:	4C9614  	JMP $1496      (Loop)
EE/15BB:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/15BD:	A980    	LDA #$80
EE/15BF:	8D0021  	STA $2100      (Disable screen)
EE/15C2:	9C0C42  	STZ $420C      (Disable HDMA)
EE/15C5:	78      	SEI            (Disable IRQ)
EE/15C6:	60      	RTS

Called from an unused function and the one that shows a part of the world getting blown up
EE/15C7:	08      	PHP
EE/15C8:	8B      	PHB
EE/15C9:	E220    	SEP #$20       (8-bit A)
EE/15CB:	A97E    	LDA #$7E
EE/15CD:	48      	PHA
EE/15CE:	AB      	PLB            (Set data bank to 7E)
EE/15CF:	C220    	REP #$20       (16-bit A)
EE/15D1:	A20000  	LDX #$0000     (Zero X) (LDX $00, TXY...)
EE/15D4:	A00000  	LDY #$0000     (Zero Y)
EE/15D7:	E220    	SEP #$20       (8-bit A)
EE/15D9:	BD00E0  	LDA $E000,X
EE/15DC:	291F    	AND #$1F
EE/15DE:	9962BE  	STA $BE62,Y
EE/15E1:	C220    	REP #$20       (16-bit A)
EE/15E3:	BD00E0  	LDA $E000,X
EE/15E6:	4A      	LSR A          (Divide by 2)
EE/15E7:	4A      	LSR A          (Divide by 4)
EE/15E8:	4A      	LSR A          (Divide by 8)
EE/15E9:	4A      	LSR A          (Divide by 16)
EE/15EA:	4A      	LSR A          (Divide by 32)
EE/15EB:	291F00  	AND #$001F
EE/15EE:	E220    	SEP #$20       (8-bit A)
EE/15F0:	99E2BE  	STA $BEE2,Y
EE/15F3:	BD01E0  	LDA $E001,X
EE/15F6:	4A      	LSR A          (Divide by 2)
EE/15F7:	4A      	LSR A          (Divide by 4)
EE/15F8:	291F    	AND #$1F
EE/15FA:	9962BF  	STA $BF62,Y
EE/15FD:	E8      	INX
EE/15FE:	E8      	INX
EE/15FF:	C8      	INY
EE/1600:	C08000  	CPY #$0080
EE/1603:	D0D2    	BNE $15D7      (Loop if not)
EE/1605:	AB      	PLB
EE/1606:	28      	PLP
EE/1607:	60      	RTS

Called from the function that shows a part of the world getting blown up
EE/1608:	08      	PHP
EE/1609:	8B      	PHB
EE/160A:	E230    	SEP #$30       (8-bit A and indexes)
EE/160C:	A97E    	LDA #$7E
EE/160E:	48      	PHA
EE/160F:	AB      	PLB            (Set data bank to 7E)
EE/1610:	A2FE    	LDX #$FE
EE/1612:	A000    	LDY #$00       (Zero Y)
EE/1614:	E220    	SEP #$20       (8-bit A)
EE/1616:	A558    	LDA $58
EE/1618:	8F024200	STA $004202    (Save as multiplicand)
EE/161C:	B962BE  	LDA $BE62,Y
EE/161F:	8F034200	STA $004203    (Save as multiplier)
EE/1623:	EA      	NOP
EE/1624:	EA      	NOP
EE/1625:	EA      	NOP
EE/1626:	AF174200	LDA $004217    (High byte of product)
EE/162A:	855A    	STA $5A        (Save it temporarily)
EE/162C:	B962BF  	LDA $BF62,Y
EE/162F:	8F034200	STA $004203    (Save as multiplier)
EE/1633:	E8      	INX
EE/1634:	E8      	INX
EE/1635:	EA      	NOP            (Superfluous? A verification is in order...)
EE/1636:	AF174200	LDA $004217    (High byte of product)
EE/163A:	0A      	ASL A          (Multiply by 2)
EE/163B:	0A      	ASL A          (Multiply by 4)
EE/163C:	855B    	STA $5B
EE/163E:	B9E2BE  	LDA $BEE2,Y
EE/1641:	8F034200	STA $004203    (Save as multiplier)
EE/1645:	C8      	INY
EE/1646:	EA      	NOP
EE/1647:	C220    	REP #$20       (16-bit A)
EE/1649:	AF164200	LDA $004216    (Product)
EE/164D:	29001F  	AND #$1F00     (Isolate red component) [???]
EE/1650:	4A      	LSR A          (Divide by 2)
EE/1651:	4A      	LSR A          (Divide by 4)
EE/1652:	4A      	LSR A          (Divide by 8)
EE/1653:	055A    	ORA $5A
EE/1655:	9D00E0  	STA $E000,X    (Palette) [???]
EE/1658:	C080    	CPY #$80
EE/165A:	D0B8    	BNE $1614      (Loop if not)
EE/165C:	AB      	PLB
EE/165D:	28      	PLP
EE/165E:	60      	RTS

This appears to generate light-like effects, such as explosions, for certain scenes
EE/165F:	E220    	SEP #$20       (8-bit A) (SEP #$21...)
EE/1661:	A9FF    	LDA #$FF
EE/1663:	855C    	STA $5C
EE/1665:	A558    	LDA $58
EE/1667:	38      	SEC            (Set Carry for subtraction)
EE/1668:	E55A    	SBC $5A
EE/166A:	B007    	BCS $1673
EE/166C:	E65C    	INC $5C
EE/166E:	E65C    	INC $5C
EE/1670:	49FF    	EOR #$FF       (Toggle all bits)
EE/1672:	1A      	INC A          (Add one)
EE/1673:	855E    	STA $5E
EE/1675:	A9FF    	LDA #$FF
EE/1677:	855D    	STA $5D
EE/1679:	A559    	LDA $59
EE/167B:	38      	SEC            (Set Carry for subtraction)
EE/167C:	E55B    	SBC $5B
EE/167E:	B007    	BCS $1687
EE/1680:	E65D    	INC $5D
EE/1682:	E65D    	INC $5D
EE/1684:	49FF    	EOR #$FF       (Toggle all bits)
EE/1686:	1A      	INC A          (Add one)
EE/1687:	855F    	STA $5F
EE/1689:	C55E    	CMP $5E
EE/168B:	B036    	BCS $16C3      (Branch if equal or greater)
EE/168D:	C220    	REP #$20       (16-bit A)
EE/168F:	A55E    	LDA $5E
EE/1691:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/1694:	A8      	TAY            (Transfer A to Y)
EE/1695:	A559    	LDA $59
EE/1697:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/169A:	0A      	ASL A          (Multiply by 2)
EE/169B:	0A      	ASL A          (Multiply by 4)
EE/169C:	18      	CLC            (Clear Carry for addition)
EE/169D:	6560    	ADC $60
EE/169F:	AA      	TAX            (Transfer A to X)
EE/16A0:	E220    	SEP #$20       (8-bit A)
EE/16A2:	A558    	LDA $58
EE/16A4:	EB      	XBA            (Exchange B and A)
EE/16A5:	A55E    	LDA $5E
EE/16A7:	4A      	LSR A          (Divide by 2)
EE/16A8:	38      	SEC            (Set Carry for subtraction)
EE/16A9:	E55F    	SBC $5F
EE/16AB:	B00C    	BCS $16B9
EE/16AD:	655E    	ADC $5E
EE/16AF:	EB      	XBA            (Exchange B and A)
EE/16B0:	9F0E627E	STA $7E620E,X
EE/16B4:	EB      	XBA            (Exchange B and A)
EE/16B5:	E8      	INX
EE/16B6:	E8      	INX
EE/16B7:	E8      	INX
EE/16B8:	E8      	INX
EE/16B9:	EB      	XBA            (Exchange B and A)
EE/16BA:	18      	CLC            (Clear Carry for addition)
EE/16BB:	655C    	ADC $5C
EE/16BD:	EB      	XBA            (Exchange B and A)
EE/16BE:	88      	DEY
EE/16BF:	D0E7    	BNE $16A8
EE/16C1:	8032    	BRA $16F5
EE/16C3:	C220    	REP #$20       (16-bit A)
EE/16C5:	29FF00  	AND #$00FF
EE/16C8:	A8      	TAY            (Transfer A to Y)
EE/16C9:	A559    	LDA $59
EE/16CB:	29FF00  	AND #$00FF
EE/16CE:	0A      	ASL A          (Multiply by 2)
EE/16CF:	0A      	ASL A          (Multiply by 4)
EE/16D0:	18      	CLC            (Clear Carry for addition)
EE/16D1:	6560    	ADC $60
EE/16D3:	AA      	TAX            (Transfer A to X)
EE/16D4:	E220    	SEP #$20       (8-bit A)
EE/16D6:	A558    	LDA $58
EE/16D8:	EB      	XBA            (Exchange B and A)
EE/16D9:	A55F    	LDA $5F
EE/16DB:	4A      	LSR A          (Divide by 2)
EE/16DC:	38      	SEC            (Set Carry for subtraction)
EE/16DD:	E55E    	SBC $5E
EE/16DF:	B007    	BCS $16E8
EE/16E1:	655F    	ADC $5F
EE/16E3:	EB      	XBA            (Exchange B and A)
EE/16E4:	18      	CLC            (Clear Carry for addition)
EE/16E5:	655C    	ADC $5C
EE/16E7:	EB      	XBA            (Exchange B and A)
EE/16E8:	EB      	XBA            (Exchange B and A)
EE/16E9:	9F0E627E	STA $7E620E,X
EE/16ED:	EB      	XBA            (Exchange B and A)
EE/16EE:	E8      	INX
EE/16EF:	E8      	INX
EE/16F0:	E8      	INX
EE/16F1:	E8      	INX
EE/16F2:	88      	DEY
EE/16F3:	D0E7    	BNE $16DC
EE/16F5:	C220    	REP #$20       (16-bit A)
EE/16F7:	A559    	LDA $59
EE/16F9:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/16FC:	0A      	ASL A          (Multiply by 2)
EE/16FD:	0A      	ASL A          (Multiply by 4)
EE/16FE:	18      	CLC            (Clear Carry for addition)
EE/16FF:	6560    	ADC $60
EE/1701:	8562    	STA $62
EE/1703:	A660    	LDX $60
EE/1705:	E220    	SEP #$20       (8-bit A)
EE/1707:	A560    	LDA $60
EE/1709:	8901    	BIT #$01
EE/170B:	D004    	BNE $1711      (LSR A, BCS...)
EE/170D:	A9FF    	LDA #$FF
EE/170F:	8001    	BRA $1712      (Skip next instruction)
EE/1711:	7B      	TDC            (Zero A)
EE/1712:	E462    	CPX $62
EE/1714:	F00A    	BEQ $1720
EE/1716:	9F0E627E	STA $7E620E,X
EE/171A:	E8      	INX
EE/171B:	E8      	INX
EE/171C:	E8      	INX
EE/171D:	E8      	INX
EE/171E:	80F2    	BRA $1712
EE/1720:	C220    	REP #$20       (16-bit A)
EE/1722:	A55B    	LDA $5B
EE/1724:	1A      	INC A
EE/1725:	29FF00  	AND #$00FF
EE/1728:	0A      	ASL A          (Multiply by 2)
EE/1729:	0A      	ASL A          (Multiply by 4)
EE/172A:	18      	CLC            (Clear Carry for addition)
EE/172B:	6560    	ADC $60
EE/172D:	AA      	TAX            (Transfer A to X)
EE/172E:	18      	CLC            (Clear Carry for addition)
EE/172F:	697F03  	ADC #$037F     (Add 895)
EE/1732:	8562    	STA $62
EE/1734:	E220    	SEP #$20       (8-bit A)
EE/1736:	A560    	LDA $60
EE/1738:	8901    	BIT #$01
EE/173A:	D004    	BNE $1740      (LSR A, BCS...)
EE/173C:	A9FF    	LDA #$FF
EE/173E:	8001    	BRA $1741      (Skip next instruction)
EE/1740:	7B      	TDC            (Zero A)
EE/1741:	9F0E627E	STA $7E620E,X
EE/1745:	E8      	INX
EE/1746:	E8      	INX
EE/1747:	E8      	INX
EE/1748:	E8      	INX
EE/1749:	E462    	CPX $62
EE/174B:	90F4    	BCC $1741
EE/174D:	60      	RTS

Function pertaining to vehicle movement
EE/174E:	08      	PHP
EE/174F:	8B      	PHB
EE/1750:	E220    	SEP #$20       (8-bit A) (SEP #$30...)
EE/1752:	7B      	TDC            (Zero A)
EE/1753:	48      	PHA
EE/1754:	AB      	PLB            (Set data bank to 00)
EE/1755:	C220    	REP #$20       (16-bit A)
EE/1757:	E210    	SEP #$10       (8-bit indexes)
EE/1759:	A51E    	LDA $1E        (Vehicle behavior)
EE/175B:	892000  	BIT #$0020
EE/175E:	F004    	BEQ $1764
EE/1760:	A575    	LDA $75
EE/1762:	8002    	BRA $1766      (Skip next instruction)
EE/1764:	A573    	LDA $73        (Vehicle direction)
EE/1766:	C9B400  	CMP #$00B4     (Compare to 180, the south direction)
EE/1769:	9003    	BCC $176E      (Branch if smaller, meaning we're facing the western hemisphere)
EE/176B:	E9B400  	SBC #$00B4     (Subtract 180)
EE/176E:	AA      	TAX            (Transfer A to X)
EE/176F:	BFF1FEEF	LDA $EFFEF1,X
EE/1773:	859B    	STA $9B
EE/1775:	BF4BFFEF	LDA $EFFF4B,X
EE/1779:	859D    	STA $9D
EE/177B:	A51E    	LDA $1E        (Vehicle behavior)
EE/177D:	892000  	BIT #$0020
EE/1780:	F004    	BEQ $1786
EE/1782:	A575    	LDA $75
EE/1784:	8002    	BRA $1788      (Skip next instruction)
EE/1786:	A573    	LDA $73        (Vehicle direction)
EE/1788:	C9B400  	CMP #$00B4     (Compare to 180, the south direction)
EE/178B:	9015    	BCC $17A2      (Branch if smaller, meaning we're facing the western hemisphere)
EE/178D:	A200    	LDX #$00
EE/178F:	865B    	STX $5B
EE/1791:	C90E01  	CMP #$010E     (Compare to 270, the east direction)
EE/1794:	9006    	BCC $179C      (Branch if smaller, meaning we're facing southeast)
EE/1796:	A201    	LDX #$01
EE/1798:	865A    	STX $5A
EE/179A:	8011    	BRA $17AD
EE/179C:	A200    	LDX #$00
EE/179E:	865A    	STX $5A
EE/17A0:	800B    	BRA $17AD
EE/17A2:	A201    	LDX #$01
EE/17A4:	865B    	STX $5B
EE/17A6:	C95A00  	CMP #$005A     (Compare to 90, the west direction)
EE/17A9:	90EB    	BCC $1796      (Branch if smaller, meaning we're facing northwest)
EE/17AB:	80EF    	BRA $179C      (You're here if you're facing southwest)
EE/17AD:	646B    	STZ $6B
EE/17AF:	A69D    	LDX $9D
EE/17B1:	8E0242  	STX $4202      (Save as multiplicand)
EE/17B4:	A626    	LDX $26        (Vehicle speed, low byte)
EE/17B6:	8E0342  	STX $4203      (Save as multiplier)
EE/17B9:	EA      	NOP
EE/17BA:	EA      	NOP
EE/17BB:	EA      	NOP
EE/17BC:	AD1642  	LDA $4216      (Product)
EE/17BF:	856A    	STA $6A        (Save it temporarily)
EE/17C1:	A627    	LDX $27        (Vehicle speed, high byte)
EE/17C3:	8E0342  	STX $4203      (Save as multiplier)
EE/17C6:	EA      	NOP
EE/17C7:	EA      	NOP
EE/17C8:	EA      	NOP
EE/17C9:	AD1642  	LDA $4216      (Product)
EE/17CC:	18      	CLC            (Clear Carry for addition)
EE/17CD:	656B    	ADC $6B
EE/17CF:	856A    	STA $6A        (Save it temporarily)
EE/17D1:	A65A    	LDX $5A
EE/17D3:	D015    	BNE $17EA
EE/17D5:	18      	CLC            (Clear Carry for addition)
EE/17D6:	6537    	ADC $37
EE/17D8:	8537    	STA $37
EE/17DA:	A539    	LDA $39        (Current Y position in pixels, high byte)
EE/17DC:	690000  	ADC #$0000     (Add one if Carry set) (ADC $00...)
EE/17DF:	8539    	STA $39        (Save changes)
EE/17E1:	18      	CLC            (Clear Carry for addition)
EE/17E2:	A540    	LDA $40
EE/17E4:	656A    	ADC $6A
EE/17E6:	8540    	STA $40        (Save changes)
EE/17E8:	8017    	BRA $1801
EE/17EA:	856A    	STA $6A
EE/17EC:	A537    	LDA $37        (Current Y position in 1/256 pixels)
EE/17EE:	38      	SEC            (Set Carry for subtraction)
EE/17EF:	E56A    	SBC $6A
EE/17F1:	8537    	STA $37
EE/17F3:	A539    	LDA $39        (Current Y position in pixels, high byte)
EE/17F5:	E90000  	SBC #$0000     (Subtract one if Carry clear) (SBC $00...)
EE/17F8:	8539    	STA $39        (Save changes)
EE/17FA:	38      	SEC            (Set Carry for subtraction)
EE/17FB:	A540    	LDA $40
EE/17FD:	E56A    	SBC $6A
EE/17FF:	8540    	STA $40        (Save changes)
EE/1801:	A69B    	LDX $9B
EE/1803:	8E0242  	STX $4202      (Save as multiplicand)
EE/1806:	A626    	LDX $26        (Vehicle speed, low byte)
EE/1808:	8E0342  	STX $4203      (Save as multiplier)
EE/180B:	EA      	NOP
EE/180C:	EA      	NOP
EE/180D:	EA      	NOP
EE/180E:	AD1642  	LDA $4216      (Product)
EE/1811:	856A    	STA $6A        (Save it temporarily)
EE/1813:	A627    	LDX $27        (Vehicle speed, high byte)
EE/1815:	8E0342  	STX $4203      (Save as multiplier)
EE/1818:	EA      	NOP
EE/1819:	EA      	NOP
EE/181A:	EA      	NOP
EE/181B:	AD1642  	LDA $4216      (Product)
EE/181E:	18      	CLC            (Clear Carry for addition)
EE/181F:	656B    	ADC $6B
EE/1821:	856A    	STA $6A        (Save it temporarily)
EE/1823:	A65B    	LDX $5B
EE/1825:	D015    	BNE $183C
EE/1827:	18      	CLC            (Clear Carry for addition)
EE/1828:	6533    	ADC $33        (Add to current X position in 1/256 pixels)
EE/182A:	8533    	STA $33        (Save as current X position in 1/256 pixels)
EE/182C:	A535    	LDA $35        (Current X position in pixels, high byte)
EE/182E:	690000  	ADC #$0000     (Add one if Carry set) (ADC $00...)
EE/1831:	8535    	STA $35        (Save changes)
EE/1833:	18      	CLC            (Clear Carry for addition)
EE/1834:	A53C    	LDA $3C
EE/1836:	656A    	ADC $6A
EE/1838:	853C    	STA $3C        (Save changes)
EE/183A:	8017    	BRA $1853
EE/183C:	856A    	STA $6A
EE/183E:	A533    	LDA $33        (Current X position in 1/256 pixels)
EE/1840:	38      	SEC            (Set Carry for subtraction)
EE/1841:	E56A    	SBC $6A
EE/1843:	8533    	STA $33        (Save changes)
EE/1845:	A535    	LDA $35        (Current X position in pixels, high byte)
EE/1847:	E90000  	SBC #$0000     (Subtract one if Carry clear) (SBC $00...)
EE/184A:	8535    	STA $35        (Save changes)
EE/184C:	38      	SEC            (Set Carry for subtraction)
EE/184D:	A53C    	LDA $3C
EE/184F:	E56A    	SBC $6A
EE/1851:	853C    	STA $3C        (Save changes)
EE/1853:	A534    	LDA $34        (Current X position in pixels)
EE/1855:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/1858:	8534    	STA $34        (Save changes)
EE/185A:	A538    	LDA $38        (Current Y position in pixels)
EE/185C:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/185F:	8538    	STA $38        (Save changes) (LDA #$F000, TRB $34, TRB $38...)
EE/1861:	AB      	PLB
EE/1862:	28      	PLP
EE/1863:	60      	RTS

Mosaic effect configuration for Poison status
EE/1864:	A5FF    	LDA $FF        (Mosaic intensity)
EE/1866:	F005    	BEQ $186D      (Branch if zero)
EE/1868:	38      	SEC            (Set Carry for subtraction)
EE/1869:	E908    	SBC #$08       (Subtract 8)
EE/186B:	85FF    	STA $FF        (Save changes)
EE/186D:	29F0    	AND #$F0       (Set all BGs to be unaffected)
EE/186F:	0901    	ORA #$01       (Extend effect to BG1) (INC A...)
EE/1871:	8D0621  	STA $2106      (Store to mosaic register)
EE/1874:	60      	RTS

Effects preceding a battle in vehicle mode (Serpent Trench, Doom Gaze)
EE/1875:	08      	PHP
EE/1876:	E220    	SEP #$20       (8-bit A)
EE/1878:	A980    	LDA #$80
EE/187A:	8D4221  	STA $2142      (Set normal speaker balance)
EE/187D:	A9C1    	LDA #$C1
EE/187F:	8D4121  	STA $2141      (Sound effect: "swoosh")
EE/1882:	A918    	LDA #$18
EE/1884:	8D4021  	STA $2140      (APU I/O register 0)
EE/1887:	A524    	LDA $24        (NMI count)
EE/1889:	F0FC    	BEQ $1887      (Loop until an NMI occurs)
EE/188B:	6424    	STZ $24        (Reset NMI count)
EE/188D:	A928    	LDA #$28       (Value for loop counter)
EE/188F:	8566    	STA $66        (Store in general variable)
EE/1891:	E220    	SEP #$20       (8-bit A)
EE/1893:	A902    	LDA #$02
EE/1895:	8D0521  	STA $2105      (BG mode 2, 8x8 tiles)
EE/1898:	AD641F  	LDA $1F64      (Map number from SRAM, low byte)
EE/189B:	C902    	CMP #$02       (Serpent Trench?)
EE/189D:	F004    	BEQ $18A3      (Branch if so)
EE/189F:	A903    	LDA #$03
EE/18A1:	8002    	BRA $18A5      (Skip next instruction)
EE/18A3:	A983    	LDA #$83
EE/18A5:	8D3121  	STA $2131      (Enable color math for BG1 and BG2; subtract colors)
EE/18A8:	C220    	REP #$20       (16-bit A)
EE/18AA:	A9E000  	LDA #$00E0
EE/18AD:	38      	SEC            (Set Carry for subtraction)
EE/18AE:	E587    	SBC $87
EE/18B0:	8D0942  	STA $4209      (V-Count timer)
EE/18B3:	E220    	SEP #$20       (8-bit A)
EE/18B5:	A523    	LDA $23        (Current brightness)
EE/18B7:	F001    	BEQ $18BA      (Branch if the screen is blank)
EE/18B9:	3A      	DEC A          (Decrease brightness)
EE/18BA:	8523    	STA $23        (Save changes)
EE/18BC:	A524    	LDA $24        (NMI count)
EE/18BE:	F0FC    	BEQ $18BC      (Loop until an NMI occurs)
EE/18C0:	6424    	STZ $24        (Reset NMI count)
EE/18C2:	C666    	DEC $66        (Decrease loop counter)
EE/18C4:	D0CB    	BNE $1891      (Loop unless null)
EE/18C6:	A5E8    	LDA $E8
EE/18C8:	297F    	AND #$7F
EE/18CA:	85E8    	STA $E8        (Save changes) (LDA #$80, TRB $E8...)
EE/18CC:	28      	PLP
EE/18CD:	60      	RTS

Effects preceding a mine-cart battle
EE/18CE:	08      	PHP
EE/18CF:	E220    	SEP #$20       (8-bit A)
EE/18D1:	C210    	REP #$10       (16-bit indexes)
EE/18D3:	A980    	LDA #$80
EE/18D5:	8D4221  	STA $2142      (Set normal speaker balance)
EE/18D8:	A9C1    	LDA #$C1
EE/18DA:	8D4121  	STA $2141      (Sound effect: "swoosh")
EE/18DD:	A918    	LDA #$18
EE/18DF:	8D4021  	STA $2140      (APU I/O register 0)
EE/18E2:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/18E5:	A901    	LDA #$01
EE/18E7:	8566    	STA $66
EE/18E9:	C666    	DEC $66
EE/18EB:	D00C    	BNE $18F9
EE/18ED:	A901    	LDA #$01       (...)
EE/18EF:	8566    	STA $66        (INC $66...)
EE/18F1:	BF0719EE	LDA $EE1907,X  (Table of mosaic parameters)
EE/18F5:	E8      	INX            (Point to next table entry)
EE/18F6:	8D0621  	STA $2106      (Save to mosaic register)
EE/18F9:	C9FF    	CMP #$FF       (Reached bottom of table?) (INC A...)
EE/18FB:	F008    	BEQ $1905      (Exit if so)
EE/18FD:	A5FA    	LDA $FA        (NMI count)
EE/18FF:	F0FC    	BEQ $18FD      (Loop until an NMI occurs)
EE/1901:	64FA    	STZ $FA        (Reset NMI count)
EE/1903:	80E4    	BRA $18E9      (Loop)
EE/1905:	28      	PLP
EE/1906:	60      	RTS

Parameters for mosaic effect
EE/1907:	0F      	(Intensity 0 for all BGs)
EE/1908:	1F      	(Intensity 1 for all BGs)
EE/1909:	2F      	(Intensity 2 for all BGs)
EE/190A:	3F      	(Intensity 3 for all BGs)
EE/190B:	4F      	(Intensity 4 for all BGs)
EE/190C:	5F      	(Intensity 5 for all BGs)
EE/190D:	6F      	(Intensity 6 for all BGs)
EE/190E:	7F      	(Intensity 7 for all BGs)
EE/190F:	8F      	(Intensity 8 for all BGs)
EE/1910:	9F      	(Intensity 9 for all BGs)
EE/1911:	AF      	(Intensity 10 for all BGs)
EE/1912:	BF      	(Intensity 11 for all BGs)
EE/1913:	CF      	(Intensity 12 for all BGs)
EE/1914:	CF      	(Intensity 12 for all BGs)
EE/1915:	BF      	(Intensity 11 for all BGs)
EE/1916:	AF      	(Intensity 10 for all BGs)
EE/1917:	9F      	(Intensity 9 for all BGs)
EE/1918:	8F      	(Intensity 8 for all BGs)
EE/1919:	7F      	(Intensity 7 for all BGs)
EE/191A:	6F      	(Intensity 6 for all BGs)
EE/191B:	5F      	(Intensity 5 for all BGs)
EE/191C:	4F      	(Intensity 4 for all BGs)
EE/191D:	3F      	(Intensity 3 for all BGs)
EE/191E:	2F      	(Intensity 2 for all BGs)
EE/191F:	1F      	(Intensity 1 for all BGs)
EE/1920:	0F      	(Intensity 0 for all BGs)
EE/1921:	1F      	(Intensity 1 for all BGs)
EE/1922:	2F      	(Intensity 2 for all BGs)
EE/1923:	3F      	(Intensity 3 for all BGs)
EE/1924:	4F      	(Intensity 4 for all BGs)
EE/1925:	5F      	(Intensity 5 for all BGs)
EE/1926:	6F      	(Intensity 6 for all BGs)
EE/1927:	7F      	(Intensity 7 for all BGs)
EE/1928:	8F      	(Intensity 8 for all BGs)
EE/1929:	9F      	(Intensity 9 for all BGs)
EE/192A:	AF      	(Intensity 10 for all BGs)
EE/192B:	BF      	(Intensity 11 for all BGs)
EE/192C:	CF      	(Intensity 12 for all BGs)
EE/192D:	DF      	(Intensity 13 for all BGs)
EE/192E:	EF      	(Intensity 14 for all BGs)
EE/192F:	FF      	(Intensity 15 for all BGs)

Apply a gradient effect to the screen
EE/1930:	08      	PHP
EE/1931:	C230    	REP #$30       (16-bit A and indexes)
EE/1933:	A90012    	LDA #$1200
EE/1936:	8558    	STA $58
EE/1938:	A90009  	LDA #$0900
EE/193B:	855A    	STA $5A
EE/193D:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/1940:	E220    	SEP #$20       (8-bit A)
EE/1942:	A559    	LDA $59
EE/1944:	0980    	ORA #$80
EE/1946:	9F07607E	STA $7E6007,X
EE/194A:	A55B  		LDA $5B
EE/194C:	0960    	ORA #$60
EE/194E:	9F08607E	STA $7E6008,X
EE/1952:	E8      	INX
EE/1953:	E8      	INX
EE/1953:	C220    	REP #$20       (16-bit A)
EE/1956:	A558    	LDA $58
EE/1958:	38      	SEC            (Set Carry for subtraction)
EE/1959:	E92000  	SBC #$0020     (Subtract 32)
EE/195C:	8558    	STA $58        (Save changes)
EE/195E:	A55A    	LDA $5A
EE/1960:	38      	SEC            (Set Carry for subtraction)
EE/1961:	E91000  	SBC #$0010     (Subtract 32)
EE/1964:	855A    	STA $5A        (Save changes)
EE/1966:	D0D8    	BNE $1940
EE/1968:	7B      	TDC            (Zero A)
EE/1969:	E00002  	CPX #$0200
EE/196C:	F008    	BEQ $1976      (Exit if so)
EE/196E:	9F07607E	STA $7E6007,X
EE/1972:	E8      	INX
EE/1973:	E8      	INX
EE/1974:	80F3    	BRA $1969      (Loop)
EE/1976:	28      	PLP
EE/1977:	60      	RTS

From the opening credits
EE/1978:	20513E  	JSR $3E51      (Mode 7 rendering for character mode)
EE/197B:	E220    	SEP #$20       (8-bit A)
EE/197D:	C210    	REP #$10       (16-bit indexes)
EE/197F:	6B      	RTL

Unused function (from EE/0006)
EE/1980:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/1983:	E220    	SEP #$20       (8-bit A) (BRA $197B...)
EE/1985:	C210    	REP #$10       (16-bit indexes)
EE/1987:	6B      	RTL

Unused function (from EE/000F)
EE/1988:	2018AC  	JSR $AC18
EE/198B:	E220    	SEP #$20       (8-bit A) (BRA $197B...)
EE/198D:	C210    	REP #$10       (16-bit indexes)
EE/198F:	6B      	RTL

From the opening credits
EE/1990:	208C90  	JSR $908C      (Move #$06E0 bytes from 7E/0520 to 00/F120)
EE/1993:	6B      	RTL

From the opening credits
EE/1994:	209F90  	JSR $909F      (Move #$06E0 bytes from 7E/F120 to 00/0520)
EE/1997:	6B      	RTL

Vehicle-related function
EE/1998:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/199A:	C210    	REP #$10       (16-bit indexes)
EE/199C:	AD641F  	LDA $1F64      (Map number and flags in SRAM variables)
EE/199F:	29FF01  	AND #$01FF     (Isolate map number) (See EE/21D7 for optimizations...)
EE/19A2:	C90100  	CMP #$0001     (World of Ruin?)
EE/19A5:	F004    	BEQ $19AB      (Branch if so)
EE/19A7:	6464    	STZ $64        (Prepare to load World of Balance tile properties)
EE/19A9:	8005    	BRA $19B0      (Skip next two instructions)
EE/19AB:	A90002  	LDA #$0200
EE/19AE:	8564    	STA $64        (Prepare to load World of Ruin tile properties)
EE/19B0:	A538    	LDA $38        (Current Y position in pixels)
EE/19B2:	0A      	ASL A          (Multiply by 2)
EE/19B3:	0A      	ASL A          (Multiply by 4)
EE/19B4:	0A      	ASL A          (Multiply by 8)
EE/19B5:	0A      	ASL A          (Multiply by 16)
EE/19B6:	2900FF  	AND #$FF00     (Finalize conversion into tiles)
EE/19B9:	8558    	STA $58        (Save it temporarily)
EE/19BB:	A534    	LDA $34        (Current X position in pixels)
EE/19BD:	4A      	LSR A          (Divide by 2)
EE/19BE:	4A      	LSR A          (Divide by 4)
EE/19BF:	4A      	LSR A          (Divide by 8)
EE/19C0:	4A      	LSR A          (Divide by 16)
EE/19C1:	18      	CLC            (Clear Carry for addition)
EE/19C2:	6558    	ADC $58        (Combine with Y position)
EE/19C4:	AA      	TAX            (Transfer A to X)
EE/19C5:	BF00007F	LDA $7F0000,X  (Tile number)
EE/19C9:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/19CC:	85C4    	STA $C4        (Set occupied tile) (Useless?)
EE/19CE:	0A      	ASL A          (Multiply by 2)
EE/19CF:	18      	CLC            (Clear Carry for addition)
EE/19D0:	6564    	ADC $64        (Add #$0200 if World of Ruin)
EE/19D2:	AA      	TAX            (Transfer A to X)
EE/19D3:	BF149BEE	LDA $EE9B14,X  (Tile properties)
EE/19D7:	85C2    	STA $C2        (Set properties of occupied tile)
EE/19D9:	A534    	LDA $34        (Current X position in pixels)
EE/19DB:	85C6    	STA $C6        (Make a useless copy...)
EE/19DD:	A538    	LDA $38        (Current Y position in pixels)
EE/19DF:	85C8    	STA $C8        (Make a useless copy...)
EE/19E1:	A5E7    	LDA $E7
EE/19E3:	890100  	BIT #$0001
EE/19E6:	F00A    	BEQ $19F2      (LSR A, BCC...)
EE/19E8:	6460    	STZ $60
EE/19EA:	208470  	JSR $7084      (Vehicle script routine)
EE/19ED:	20D375  	JSR $75D3      (Perform scripted vehicle movement)
EE/19F0:	8011    	BRA $1A03
EE/19F2:	A5E7    	LDA $E7        (EE/19E6 makes the following useless...)
EE/19F4:	890100  	BIT #$0001     (...)
EE/19F7:	D00A    	BNE $1A03      (...)
EE/19F9:	A51E    	LDA $1E        (Vehicle behavior)
EE/19FB:	890100  	BIT #$0001     (Repeat current actions indefinitely?)
EE/19FE:	D003    	BNE $1A03      (Branch if so) (LSR A, BCS...)
EE/1A00:	20EC6B  	JSR $6BEC      (Joypad interpretation for vehicle mode)
EE/1A03:	E220    	SEP #$20       (8-bit A)
EE/1A05:	A5E8    	LDA $E8
EE/1A07:	8904    	BIT #$04       (Serpent Trench arrows are locked in?)
EE/1A09:	F01C    	BEQ $1A27      (Branch if so)
EE/1A0B:	A505    	LDA $05        (Shared controller bits)
EE/1A0D:	8901    	BIT #$01       (Is anyone pressing right?)
EE/1A0F:	F00A    	BEQ $1A1B      (Branch if not) (LSR A, BCC...)
EE/1A11:	ADB61E  	LDA $1EB6      (Event bits)
EE/1A14:	297F    	AND #$7F       (Set to bear right at fork in Serpent Trench)
EE/1A16:	8DB61E  	STA $1EB6      (Save changes) (BRA $1A24...)
EE/1A19:	800C    	BRA $1A27
EE/1A1B:	8902    	BIT #$02       (Is anyone pressing left?)
EE/1A1D:	F008    	BEQ $1A27      (Branch if not)
EE/1A1F:	ADB61E  	LDA $1EB6      (Event bits)
EE/1A22:	0980    	ORA #$80       (Set to bear left at fork in Serpent Trench)
EE/1A24:	8DB61E  	STA $1EB6      (Save changes)
EE/1A27:	C220    	REP #$20       (16-bit A)
EE/1A29:	A51E    	LDA $1E        (Vehicle behavior)
EE/1A2B:	890200  	BIT #$0002     (LSR A, LSR A...)
EE/1A2E:	D022    	BNE $1A52
EE/1A30:	E220    	SEP #$20       (8-bit A)
EE/1A32:	A572    	LDA $72
EE/1A34:	18      	CLC            (Clear Carry for addition)
EE/1A35:	6529    	ADC $29        (Add to rotation speed)
EE/1A37:	8572    	STA $72        (Save changes)
EE/1A39:	C220    	REP #$20       (16-bit A)
EE/1A3B:	A573    	LDA $73        (Vehicle direction)
EE/1A3D:	652A    	ADC $2A
EE/1A3F:	1006    	BPL $1A47
EE/1A41:	18      	CLC            (Clear Carry for addition)
EE/1A42:	696801  	ADC #$0168     (Add 360)
EE/1A45:	8009    	BRA $1A50
EE/1A47:	C96801  	CMP #$0168     (Compare to 360)
EE/1A4A:	9004    	BCC $1A50      (Branch if smaller)
EE/1A4C:	38      	SEC            (Carry is already set...)
EE/1A4D:	E96801  	SBC #$0168     (Subtract 360)
EE/1A50:	8573    	STA $73        (Save changes)
EE/1A52:	C220    	REP #$20       (16-bit A)
EE/1A54:	A51E    	LDA $1E        (Vehicle behavior)
EE/1A56:	890400  	BIT #$0004
EE/1A59:	D038    	BNE $1A93
EE/1A5B:	E220    	SEP #$20       (8-bit A)
EE/1A5D:	A96C    	LDA #$6C
EE/1A5F:	8D0242  	STA $4202      (Set multiplicand to 108)
EE/1A62:	A573    	LDA $73        (Vehicle's direction, low byte)
EE/1A64:	8D0342  	STA $4203      (Save as multiplier)
EE/1A67:	EA      	NOP
EE/1A68:	EA      	NOP
EE/1A69:	EA      	NOP
EE/1A6A:	EA      	NOP            (Superfluous...)
EE/1A6B:	AD1742  	LDA $4217      (Load high byte of product)
EE/1A6E:	856A    	STA $6A        (Save it temporarily)
EE/1A70:	646B    	STZ $6B        (Zero the next variable)
EE/1A72:	A574    	LDA $74        (Vehicle's direction, high byte)
EE/1A74:	8D0342  	STA $4203      (Save as multiplier)
EE/1A77:	EA      	NOP
EE/1A78:	EA      	NOP
EE/1A79:	EA      	NOP
EE/1A7A:	EA      	NOP            (Superfluous...)
EE/1A7B:	C220    	REP #$20       (16-bit A)
EE/1A7D:	AD1642  	LDA $4216      (Product)
EE/1A80:	18      	CLC            (Clear Carry for addition)
EE/1A81:	656A    	ADC $6A
EE/1A83:	6573    	ADC $73
EE/1A85:	0A      	ASL A          (Multiply by 2)
EE/1A86:	29FF01  	AND #$01FF
EE/1A89:	8558    	STA $58        (Save it temporarily)
EE/1A8B:	A9FF01  	LDA #$01FF
EE/1A8E:	38      	SEC            (Set Carry for subtraction)
EE/1A8F:	E558    	SBC $58
EE/1A91:	8570    	STA $70
EE/1A93:	C220    	REP #$20       (16-bit A)
EE/1A95:	A51E    	LDA $1E        (Vehicle behavior)
EE/1A97:	890800  	BIT #$0008
EE/1A9A:	D03E    	BNE $1ADA
EE/1A9C:	E210    	SEP #$10       (8-bit indexes)
EE/1A9E:	A529    	LDA $29        (Rotation speed)
EE/1AA0:	1003    	BPL $1AA5      (Branch if rotating left)
EE/1AA2:	49FFFF  	EOR #$FFFF     (Make value positive)
EE/1AA5:	4A      	LSR A          (Divide by 2)
EE/1AA6:	4A      	LSR A          (Divide by 4)
EE/1AA7:	4A      	LSR A          (Divide by 8)
EE/1AA8:	AA      	TAX            (Superfluous...)
EE/1AA9:	8E0242  	STX $4202      (Set multiplicand)
EE/1AAC:	A526    	LDA $26        (Vehicle speed)
EE/1AAE:	4A      	LSR A          (Divide by 2)
EE/1AAF:	4A      	LSR A          (Divide by 4)
EE/1AB0:	4A      	LSR A          (Divide by 8)
EE/1AB1:	4A      	LSR A          (Divide by 16)
EE/1AB2:	AA      	TAX            (...)
EE/1AB3:	8D0342  	STA $4203      (Set multiplier)
EE/1AB6:	EA      	NOP
EE/1AB7:	EA      	NOP
EE/1AB8:	EA      	NOP
EE/1AB9:	AE1742  	LDX $4217      (Product / 256)
EE/1ABC:	8E0242  	STX $4202      (Set multiplicand)
EE/1ABF:	A2F0    	LDX #$F0
EE/1AC1:	8E0342  	STX $4203      (Set multiplier to 240)
EE/1AC4:	A529    	LDA $29        (Rotation speed)
EE/1AC6:	1006    	BPL $1ACE      (Branch if turning left)
EE/1AC8:	AE1742  	LDX $4217      (Product / 256)
EE/1ACB:	8A      	TXA            (Transfer X to A)
EE/1ACC:	800A    	BRA $1AD8      (Skip code for left turns)
EE/1ACE:	AE1742  	LDX $4217      (Product / 256)
EE/1AD1:	8A      	TXA            (Transfer X to A)
EE/1AD2:	8558    	STA $58        (Save it temporarily)
EE/1AD4:	7B      	TDC            (Zero A)
EE/1AD5:	38      	SEC            (Set Carry for subtraction)
EE/1AD6:	E558    	SBC $58
EE/1AD8:	8583    	STA $83        (Save as sky rotation variable)
EE/1ADA:	C220    	REP #$20       (16-bit A)
EE/1ADC:	E210    	SEP #$10       (8-bit indexes)
EE/1ADE:	A51E    	LDA $1E        (Vehicle behavior)
EE/1AE0:	891000  	BIT #$0010
EE/1AE3:	D03E    	BNE $1B23      (Branch if so)
EE/1AE5:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/1AE7:	1003    	BPL $1AEC      (Branch if ascending)
EE/1AE9:	49FFFF  	EOR #$FFFF     (Make value positive)
EE/1AEC:	4A      	LSR A          (Divide by 2)
EE/1AED:	4A      	LSR A          (Divide by 4)
EE/1AEE:	4A      	LSR A          (Divide by 8)
EE/1AEF:	8558    	STA $58        (Save it temporarily)
EE/1AF1:	A526    	LDA $26        (Vehicle speed)
EE/1AF3:	4A      	LSR A          (Divide by 2)
EE/1AF4:	4A      	LSR A          (Divide by 4)
EE/1AF5:	4A      	LSR A          (Divide by 8)
EE/1AF6:	4A      	LSR A          (Divide by 16)
EE/1AF7:	E220    	SEP #$20       (8-bit A)
EE/1AF9:	8D0242  	STA $4202      (Set multiplicand)
EE/1AFC:	A558    	LDA $58        (Descent speed / 8)
EE/1AFE:	8D0342  	STA $4203      (Set multiplier)
EE/1B01:	EA      	NOP
EE/1B02:	EA      	NOP
EE/1B03:	EA      	NOP
EE/1B04:	AD1742  	LDA $4217      (Product / 256)
EE/1B07:	8D0242  	STA $4202      (Set multiplicand)
EE/1B0A:	A9F0    	LDA #$F0
EE/1B0C:	8D0342  	STA $4203      (Set multiplier to 240)
EE/1B0F:	A52E    	LDA $2E
EE/1B11:	1008    	BPL $1B1B      (Branch if the high bit is clear)
EE/1B13:	A992    	LDA #$92       (146)
EE/1B15:	18      	CLC            (Clear Carry for addition)
EE/1B16:	6D1742  	ADC $4217      (Add to high byte of product)
EE/1B19:	8006    	BRA $1B21      (Skip next three instructions)
EE/1B1B:	A992    	LDA #$92       (146)
EE/1B1D:	38      	SEC            (Set Carry for subtraction)
EE/1B1E:	ED1742  	SBC $4217      (Subtract high byte of product)
EE/1B21:	8585    	STA $85
EE/1B23:	C220    	REP #$20       (16-bit A)
EE/1B25:	A533    	LDA $33        (Current X position in 1/256 pixels)
EE/1B27:	8548    	STA $48        (Make a backup copy)
EE/1B29:	A535    	LDA $35        (Current X position in pixels, high byte) ($36 is unknown)
EE/1B2B:	854A    	STA $4A        (Make a backup copy)
EE/1B2D:	A537    	LDA $37        (Current Y position in 1/256 pixels)
EE/1B2F:	854C    	STA $4C        (Make a backup copy)
EE/1B31:	A539    	LDA $39        (Current Y position in pixels, high byte) ($3A is unknown)
EE/1B33:	854E    	STA $4E        (Make a backup copy)
EE/1B35:	A53C    	LDA $3C
EE/1B37:	8550    	STA $50        (Make a backup copy)
EE/1B39:	A53E    	LDA $3E
EE/1B3B:	8552    	STA $52        (Make a backup copy)
EE/1B3D:	A540    	LDA $40
EE/1B3F:	8554    	STA $54        (Make a backup copy)
EE/1B41:	A542    	LDA $42
EE/1B43:	8556    	STA $56        (Make a useless copy...)
EE/1B45:	204E17  	JSR $174E
EE/1B48:	C220    	REP #$20       (...)
EE/1B4A:	A520    	LDA $20        (Map mode)
EE/1B4C:	C90200  	CMP #$0002     (Chocobo mode?)
EE/1B4F:	D010    	BNE $1B61      (Branch if not)
EE/1B51:	C210    	REP #$10       (16-bit indexes)
EE/1B53:	20B51C  	JSR $1CB5      (Tile properties)
EE/1B56:	890100  	BIT #$0001     (Impassable for chocobos?)
EE/1B59:	F006    	BEQ $1B61      (Branch if not) (LSR A, BCC...)
EE/1B5B:	20EF1C  	JSR $1CEF      (Prevent the chocobo from advancing)
EE/1B5E:	209A1B  	JSR $1B9A      (Chocobo movement along the edge of an impassable tile)
EE/1B61:	E210    	SEP #$10       (8-bit indexes)
EE/1B63:	A51E    	LDA $1E        (Vehicle behavior)
EE/1B65:	894000  	BIT #$0040     (Is the height locked in?)
EE/1B68:	D02F    	BNE $1B99      (Exit if so)
EE/1B6A:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/1B6C:	18      	CLC            (Clear Carry for addition)
EE/1B6D:	652F    	ADC $2F        (Add to vehicle height)
EE/1B6F:	C90000  	CMP #$0000     (Below the minimum height?) (CMP $00...)
EE/1B72:	3007    	BMI $1B7B      (Branch if so)
EE/1B74:	C9017E  	CMP #$7E01     (Beyond the maximum height?)
EE/1B77:	1002    	BPL $1B7B      (Branch if so)
EE/1B79:	852F    	STA $2F        (Set vehicle height)
EE/1B7B:	A52F    	LDA $2F        (Vehicle height)
EE/1B7D:	18      	CLC            (Clear Carry for addition)
EE/1B7E:	690030  	ADC #$3000     (Add #$3000)
EE/1B81:	858B    	STA $8B        (Set zoom variable)
EE/1B83:	A630    	LDX $30        (Vehicle height, high byte)
EE/1B85:	8E0242  	STX $4202      (Set multiplicand)
EE/1B88:	A24F    	LDX #$4F
EE/1B8A:	8E0342  	STX $4203      (Set multiplier to 79)
EE/1B8D:	EA      	NOP
EE/1B8E:	EA      	NOP
EE/1B8F:	EA      	NOP
EE/1B90:	AD1642  	LDA $4216      (Product)
EE/1B93:	18      	CLC            (Clear Carry for addition)
EE/1B94:	690018  	ADC #$1800     (Add #$1800)
EE/1B97:	858D    	STA $8D
EE/1B99:	60      	RTS

Chocobo movement along the edge of an impassable tile
EE/1B9A:	08      	PHP
EE/1B9B:	C230    	REP #$30       (16-bit A and indexes)
EE/1B9D:	A573    	LDA $73        (Vehicle direction)
EE/1B9F:	48      	PHA            (Save A)
EE/1BA0:	F00F    	BEQ $1BB1      (Branch if facing exactly north)
EE/1BA2:	C95A00  	CMP #$005A     (Facing exactly west?)
EE/1BA5:	F00A    	BEQ $1BB1      (Branch if so)
EE/1BA7:	C9B400  	CMP #$00B4     (Facing exactly south?)
EE/1BAA:	F005    	BEQ $1BB1      (Branch if so)
EE/1BAC:	C90E01  	CMP #$010E     (Facing exactly east?)
EE/1BAF:	D003    	BNE $1BB4      (Branch if not)
EE/1BB1:	4C4F1C  	JMP $1C4F      (Restore direction and exit)
EE/1BB4:	C93B01  	CMP #$013B     (Compare to 315, the northeast direction)
EE/1BB7:	B05B    	BCS $1C14      (Branch if equal or greater, meaning we're facing N/NE)
EE/1BB9:	C90E01  	CMP #$010E     (Compare to 270, the east direction)
EE/1BBC:	B019    	BCS $1BD7      (Branch if equal or greater, meaning we're facing E/NE)
EE/1BBE:	C9E100  	CMP #$00E1     (Compare to 225, the southeast direction)
EE/1BC1:	B051    	BCS $1C14      (Branch if equal or greater, meaning we're facing E/SE)
EE/1BC3:	C9B400  	CMP #$00B4     (Compare to 180, the south direction)
EE/1BC6:	B00F    	BCS $1BD7      (Branch if equal or greater, meaning we're facing S/SE)
EE/1BC8:	C98700  	CMP #$0087     (Compare to 135, the southwest direction)
EE/1BCB:	B047    	BCS $1C14      (Branch if equal or greater, meaning we're facing S/SW)
EE/1BCD:	C95A00  	CMP #$005A     (Compare to 90, the west direction)
EE/1BD0:	B005    	BCS $1BD7      (Branch if equal or greater, meaning we're facing W/SW)
EE/1BD2:	C92D00  	CMP #$002D     (Compare to 45, the northwest direction)
EE/1BD5:	B03D    	BCS $1C14      (Branch if equal or greater, meaning we're facing W/NW)
EE/1BD7:	A573    	LDA $73        (Vehicle direction)
EE/1BD9:	18      	CLC            (Clear Carry for addition)
EE/1BDA:	695A00  	ADC #$005A     (Add 90)
EE/1BDD:	C96801  	CMP #$0168     (Compare to 360)
EE/1BE0:	9004    	BCC $1BE6      (Branch if smaller)
EE/1BE2:	38      	SEC            (Carry is already set...)
EE/1BE3:	E96801  	SBC #$0168     (Subtract 360)
EE/1BE6:	8573    	STA $73        (Save changes)
EE/1BE8:	204E17  	JSR $174E
EE/1BEB:	20B51C  	JSR $1CB5      (Tile properties)
EE/1BEE:	890100  	BIT #$0001     (Is the tile impassable for chocobos?)
EE/1BF1:	F05C    	BEQ $1C4F      (Branch if not) (LSR A, BCC...)
EE/1BF3:	20EF1C  	JSR $1CEF      (Prevent the chocobo from advancing)
EE/1BF6:	68      	PLA            (Superfluous...)
EE/1BF7:	48      	PHA            (Superfluous...)
EE/1BF8:	38      	SEC            (Set Carry for subtraction)
EE/1BF9:	E95A00  	SBC #$005A     (Subtract 90)
EE/1BFC:	B004    	BCS $1C02      (Branch if no underflow)
EE/1BFE:	18      	CLC            (Superfluous...)
EE/1BFF:	696801  	ADC #$0168     (Add 360)
EE/1C02:	8573    	STA $73        (Set vehicle direction)
EE/1C04:	204E17  	JSR $174E
EE/1C07:	20B51C  	JSR $1CB5      (Tile properties)
EE/1C0A:	890100  	BIT #$0001     (Is the tile impassable for chocobos?)
EE/1C0D:	F040    	BEQ $1C4F      (Branch if not) (LSR A, BCC...)
EE/1C0F:	20EF1C  	JSR $1CEF      (Prevent the chocobo from advancing)
EE/1C12:	803B    	BRA $1C4F
EE/1C14:	A573    	LDA $73        (Vehicle direction)
EE/1C16:	38      	SEC            (Set Carry for subtraction)
EE/1C17:	E95A00  	SBC #$005A     (Subtract 90)
EE/1C1A:	B004    	BCS $1C20
EE/1C1C:	18      	CLC            (Carry is already clear...)
EE/1C1D:	696801  	ADC #$0168     (Add 360)
EE/1C20:	8573    	STA $73        (Save as vehicle's direction)
EE/1C22:	204E17  	JSR $174E
EE/1C25:	20B51C  	JSR $1CB5      (Tile properties)
EE/1C28:	890100  	BIT #$0001     (Is the tile impassable for chocobos?)
EE/1C2B:	F022    	BEQ $1C4F      (Branch if not) (LSR A, BCC...)
EE/1C2D:	20EF1C  	JSR $1CEF      (Prevent the chocobo from advancing)
EE/1C30:	68      	PLA
EE/1C31:	48      	PHA
EE/1C32:	18      	CLC            (Clear Carry for addition)
EE/1C33:	695A00  	ADC #$005A     (Add 90)
EE/1C36:	C96801  	CMP #$0168     (Compare to 360)
EE/1C39:	9004    	BCC $1C3F      (Branch if smaller)
EE/1C3B:	38      	SEC            (Carry is already set...)
EE/1C3C:	E96801  	SBC #$0168     (Subtract 360)
EE/1C3F:	8573    	STA $73        (Save as vehicle's direction)
EE/1C41:	204E17  	JSR $174E
EE/1C44:	20B51C  	JSR $1CB5      (Tile properties)
EE/1C47:	890100  	BIT #$0001     (Is the tile impassable for chocobos?)
EE/1C4A:	F003    	BEQ $1C4F      (Branch if not) (LSR A, BCC...)
EE/1C4C:	20EF1C  	JSR $1CEF      (Prevent chocobo from advancing)
EE/1C4F:	C220    	REP #$20       (16-bit A)
EE/1C51:	68      	PLA
EE/1C52:	8573    	STA $73        (Set vehicle direction)
EE/1C54:	28      	PLP
EE/1C55:	60      	RTS

Lower altitude until ready to land
EE/1C56:	08      	PHP
EE/1C57:	C220    	REP #$20       (16-bit A)
EE/1C59:	A52F    	LDA $2F        (Vehicle height)
EE/1C5B:	18      	CLC            (Clear Carry for addition)
EE/1C5C:	652D    	ADC $2D        (Add to descent speed)
EE/1C5E:	C90000  	CMP #$0000     (Below the minimum height?) (Superfluous...)
EE/1C61:	300F    	BMI $1C72      (Branch if so)
EE/1C63:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/1C65:	38      	SEC            (Set Carry for subtraction)
EE/1C66:	E92000  	SBC #$0020     (Increase descent speed by 32)
EE/1C69:	C900FE  	CMP #$FE00     (Compare to maximum descent speed)
EE/1C6C:	3010    	BMI $1C7E      (Exit if smaller)
EE/1C6E:	852D    	STA $2D        (Save changes)
EE/1C70:	800C    	BRA $1C7E      (Exit)
EE/1C72:	642D    	STZ $2D        (Zero speed of ascent or descent)
EE/1C74:	A519    	LDA $19
EE/1C76:	29FE00  	AND #$00FE
EE/1C79:	090400  	ORA #$0004     (Set the "ready to land the airship" bit)
EE/1C7C:	8519    	STA $19        (Save changes)
EE/1C7E:	28      	PLP
EE/1C7F:	60      	RTS

Unused function
EE/1C80:	08      	PHP
EE/1C81:	C220    	REP #$20       (16-bit A)
EE/1C83:	A573    	LDA $73        (Vehicle direction)
EE/1C85:	C90000  	CMP #$0000     (Compare to 0, the north direction) (Superfluous...)
EE/1C88:	F01F    	BEQ $1CA9      (Branch if equal)
EE/1C8A:	C9B400  	CMP #$00B4     (Compare to 180, the south direction)
EE/1C8D:	B009    	BCS $1C98      (Branch if equal or greater, meaning we're facing the eastern hemisphere)
EE/1C8F:	3A      	DEC A
EE/1C90:	3A      	DEC A          (Subtract two)
EE/1C91:	29FE0F  	AND #$0FFE
EE/1C94:	8573    	STA $73        (Save as vehicle's direction) (BRA $1CA5...)
EE/1C96:	801B    	BRA $1CB3      (Exit)
EE/1C98:	1A      	INC A
EE/1C99:	1A      	INC A          (Add two)
EE/1C9A:	29FE0F  	AND #$0FFE
EE/1C9D:	C96801  	CMP #$0168     (Compare to 360)
EE/1CA0:	D003    	BNE $1CA5      (Branch if not equal)
EE/1CA2:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/1CA5:	8573    	STA $73        (Set vehicle's direction to 0 degrees, the north direction)
EE/1CA7:	800A    	BRA $1CB3      (Exit)
EE/1CA9:	A519    	LDA $19
EE/1CAB:	29FD00  	AND #$00FD
EE/1CAE:	090800  	ORA #$0008
EE/1CB1:	8519    	STA $19        (Save changes)
EE/1CB3:	28      	PLP
EE/1CB4:	60      	RTS

Load properties of tile occupied or claimed by chocobo
EE/1CB5:	AD641F  	LDA $1F64      (Map number and flags in SRAM variables)
EE/1CB8:	29FF01  	AND #$01FF     (Isolate map number) (See EE/21D7 for optimizations...)
EE/1CBB:	F007    	BEQ $1CC4      (Branch if World of Balance)
EE/1CBD:	A90002  	LDA #$0200
EE/1CC0:	8564    	STA $64        (Prepare to load World of Ruin tile properties)
EE/1CC2:	8002    	BRA $1CC6      (Skip next instruction)
EE/1CC4:	6464    	STZ $64        (Prepare to load World of Balance tile properties)
EE/1CC6:	A538    	LDA $38        (Current Y position in pixels)
EE/1CC8:	0A      	ASL A          (Multiply by 2)
EE/1CC9:	0A      	ASL A          (Multiply by 4)
EE/1CCA:	0A      	ASL A          (Multiply by 8)
EE/1CCB:	0A      	ASL A          (Multiply by 16)
EE/1CCC:	2900FF  	AND #$FF00     (Finalize conversion into tiles)
EE/1CCF:	8558    	STA $58        (Save it temporarily)
EE/1CD1:	A534    	LDA $34        (Current X position in pixels)
EE/1CD3:	4A      	LSR A          (Divide by 2)
EE/1CD4:	4A      	LSR A          (Divide by 4)
EE/1CD5:	4A      	LSR A          (Divide by 8)
EE/1CD6:	4A      	LSR A          (Divide by 16)
EE/1CD7:	29FF00  	AND #$00FF     (Finalize conversion into tiles) (Seems pointless...)
EE/1CDA:	18      	CLC            (Clear Carry for addition)
EE/1CDB:	6558    	ADC $58        (Combine with Y position)
EE/1CDD:	AA      	TAX            (Transfer A to X)
EE/1CDE:	BF00007F	LDA $7F0000,X  (Get tile number based on current position)
EE/1CE2:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/1CE5:	0A      	ASL A          (Multiply by 2)
EE/1CE6:	18      	CLC            (Clear Carry for addition)
EE/1CE7:	6564    	ADC $64        (Add #$0200 if it is the World of Ruin map)
EE/1CE9:	AA      	TAX            (Transfer A to X)
EE/1CEA:	BF149BEE	LDA $EE9B14,X  (Load tile properties)
EE/1CEE:	60      	RTS

Prevent chocobo from travelling over impassable tiles
EE/1CEF:	A548    	LDA $48        (Backup copy of $33 and $34)
EE/1CF1:	8533    	STA $33        (Save as current X position in pixels, bottom two bytes)
EE/1CF3:	A54A    	LDA $4A        (Backup copy of $35 and $36)
EE/1CF5:	8535    	STA $35        (Save as current X position in pixels, high byte; $36 is unknown)
EE/1CF7:	A54C    	LDA $4C        (Backup copy of $37 and $38)
EE/1CF9:	8537    	STA $37        (Save as current Y position in pixels, bottom two bytes)
EE/1CFB:	A54E    	LDA $4E        (Backup copy of $39 and $3A)
EE/1CFD:	8539    	STA $39        (Save as current Y position in pixels, high byte; $3A is unknown)
EE/1CFF:	A550    	LDA $50        (Backup copy of $3C and $3D)
EE/1D01:	853C    	STA $3C
EE/1D03:	A552    	LDA $52        (Backup copy of $3E and $3F)
EE/1D05:	853E    	STA $3E
EE/1D07:	A554    	LDA $54        (Backup copy of $40 and $41)
EE/1D09:	8540    	STA $40
EE/1D0B:	A556    	LDA $56        (Backup copy of $42 and $43...)
EE/1D0D:	60      	RTS

Walking-related function
EE/1D0E:	08      	PHP
EE/1D0F:	8B      	PHB
EE/1D10:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/1D12:	C210    	REP #$10       (16-bit indexes)
EE/1D14:	A538    	LDA $38        (Current Y position in pixels)
EE/1D16:	0A      	ASL A          (Multiply by 2)
EE/1D17:	0A      	ASL A          (Multiply by 4)
EE/1D18:	0A      	ASL A          (Multiply by 8)
EE/1D19:	0A      	ASL A          (Multiply by 16)
EE/1D1A:	2900FF  	AND #$FF00     (Finalize conversion into tiles)
EE/1D1D:	8558    	STA $58        (Save it temporarily)
EE/1D1F:	A534    	LDA $34        (Current X position in pixels)
EE/1D21:	4A      	LSR A          (Divide by 2)
EE/1D22:	4A      	LSR A          (Divide by 4)
EE/1D23:	4A      	LSR A          (Divide by 8)
EE/1D24:	4A      	LSR A          (Divide by 16)
EE/1D25:	18      	CLC            (Clear Carry for addition)
EE/1D26:	6558    	ADC $58        (Combine with Y position)
EE/1D28:	AA      	TAX            (Transfer A to X)
EE/1D29:	BF00007F	LDA $7F0000,X  (Get the tile number)
EE/1D2D:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/1D30:	85C4    	STA $C4        (Save as number of tile currently occupied) (Useless?)
EE/1D32:	0A      	ASL A          (Multiply by 2)
EE/1D33:	AA      	TAX            (Transfer A to X)
EE/1D34:	BF149BEE	LDA $EE9B14,X  (Load tile properties from table)
EE/1D38:	85C2    	STA $C2        (Save as properties of tile currently occupied)
EE/1D3A:	A534    	LDA $34        (Current X position in pixels)
EE/1D3C:	85C6    	STA $C6        (Make a useless copy...)
EE/1D3E:	A538    	LDA $38        (Current Y position in pixels)
EE/1D40:	85C8    	STA $C8        (Make a useless copy...)
EE/1D42:	E220    	SEP #$20       (8-bit A)
EE/1D44:	A5DF    	LDA $DF        (Current X position as a fraction of a tile)
EE/1D46:	D006    	BNE $1D4E      (Branch if not zero)
EE/1D48:	A5E1    	LDA $E1        (Current Y position as a fraction of a tile)
EE/1D4A:	D002    	BNE $1D4E      (Branch if not zero) (BEQ $1D54...)
EE/1D4C:	8006    	BRA $1D54      (Skip next two instructions)
EE/1D4E:	206418  	JSR $1864      (Configure the mosaic effect)
EE/1D51:	4C561E  	JMP $1E56
EE/1D54:	C220    	REP #$20       (16-bit A)
EE/1D56:	A20000  	LDX #$0000     (X position unchanged) (LDX $00, TXY...)
EE/1D59:	A00000  	LDY #$0000     (Y position unchanged)
EE/1D5C:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/1D5F:	892000  	BIT #$0020     (Forest tile?)
EE/1D62:	F007    	BEQ $1D6B      (Branch if not)
EE/1D64:	A5E7    	LDA $E7
EE/1D66:	091000  	ORA #$0010     (Make bottom half of map character transparent)
EE/1D69:	85E7    	STA $E7        (Save changes) (LDA #$0010, TSB $E7...)
EE/1D6B:	E220    	SEP #$20       (8-bit A)
EE/1D6D:	A5E7    	LDA $E7
EE/1D6F:	8902    	BIT #$02
EE/1D71:	D003    	BNE $1D76      (BEQ $1D98...)
EE/1D73:	4C1F1E  	JMP $1E1F
EE/1D76:	A5E7    	LDA $E7
EE/1D78:	29FD    	AND #$FD
EE/1D7A:	85E7    	STA $E7        (Save changes) (LDA #$02, TRB $E7...)
EE/1D7C:	A5E7    	LDA $E7        (...)
EE/1D7E:	8901    	BIT #$01
EE/1D80:	F003    	BEQ $1D85      (LSR A, BCS $1D98...)
EE/1D82:	4C1F1E  	JMP $1E1F
EE/1D85:	206C21  	JSR $216C      (Event trigger loading)
EE/1D88:	20DF20  	JSR $20DF      (Entrance trigger loading)
EE/1D8B:	F003    	BEQ $1D90      (Branch if neither trigger happened)
EE/1D8D:	4C1F1E  	JMP $1E1F
EE/1D90:	E220    	SEP #$20       (8-bit A)
EE/1D92:	A5E8    	LDA $E8
EE/1D94:	8908    	BIT #$08
EE/1D96:	F003    	BEQ $1D9B
EE/1D98:	4C1F1E  	JMP $1E1F
EE/1D9B:	0908    	ORA #$08
EE/1D9D:	85E8    	STA $E8        (Save changes)
EE/1D9F:	ADB91E  	LDA $1EB9      (Event bits)
EE/1DA2:	8920    	BIT #$20       (Encounters disabled?)
EE/1DA4:	D079    	BNE $1E1F      (Branch if so)
EE/1DA6:	C220    	REP #$20       (16-bit A)
EE/1DA8:	7B      	TDC            (Zero A)
EE/1DA9:	AA      	TAX            (X position unchanged)
EE/1DAA:	9B      	TXY            (Y position unchanged)
EE/1DAB:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/1DAE:	E220    	SEP #$20       (8-bit A)
EE/1DB0:	8940    	BIT #$40       (Are encounters enabled for this tile?)
EE/1DB2:	F06B    	BEQ $1E1F      (Branch if not)
EE/1DB4:	EB      	XBA            (Exchange B and A)
EE/1DB5:	8DF911  	STA $11F9      (Set battle background)
EE/1DB8:	20B290  	JSR $90B2      (Copy 256 bytes of RAM from $0000 to $0A00)
EE/1DBB:	220800C0	JSL $C00008    (Determine whether a random encounter should occur)
EE/1DBF:	C900    	CMP #$00       (Is a battle set to occur?) (Superfluous...)
EE/1DC1:	F059    	BEQ $1E1C      (Branch if not)
EE/1DC3:	20FC90  	JSR $90FC      (Copy 256 bytes from $0A00 to $0000)
EE/1DC6:	9CFD11  	STZ $11FD      (Zero backup of event address, low byte)
EE/1DC9:	9CFE11  	STZ $11FE      (Zero backup of event address, middle byte)
EE/1DCC:	9CFF11  	STZ $11FF      (Zero backup of event address, high byte)
EE/1DCF:	AFE00A00	LDA $000AE0    (Copy of X position)
EE/1DD3:	8D601F  	STA $1F60      (Save in SRAM)
EE/1DD6:	AFE20A00	LDA $000AE2    (Copy of Y position)
EE/1DDA:	8D611F  	STA $1F61      (Save in SRAM)
EE/1DDD:	A5E8    	LDA $E8
EE/1DDF:	0920    	ORA #$20       (Inform the NMI routine that a battle is about to occur)
EE/1DE1:	85E8    	STA $E8        (Save changes) (LDA #$20, TSB $E8...)
EE/1DE3:	200822  	JSR $2208      (Effects preceding a battle in character mode)
EE/1DE6:	209F90  	JSR $909F      (Move #$06E0 bytes from 7E/F120 to 00/0520)
EE/1DE9:	A980    	LDA #$80
EE/1DEB:	8D0021  	STA $2100      (Disable screen)
EE/1DEE:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/1DF1:	9C0C42  	STZ $420C      (Disable HDMA)
EE/1DF4:	78      	SEI            (Disable IRQ)
EE/1DF5:	A5F6    	LDA $F6        (Current direction)
EE/1DF7:	8D681F  	STA $1F68      (Save in SRAM)
EE/1DFA:	08      	PHP            (Bank C2 handles that...)
EE/1DFB:	8B      	PHB            (Save data bank)
EE/1DFC:	220000C2	JSL $C20000    (Execute battle code)
EE/1E00:	AB      	PLB            (Restore data bank)
EE/1E01:	28      	PLP            (...)
EE/1E02:	A980    	LDA #$80
EE/1E04:	8D0021  	STA $2100      (Disable screen)
EE/1E07:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/1E0A:	9C0C42  	STZ $420C      (Disable HDMA)
EE/1E0D:	78      	SEI            (Disable IRQ again...)
EE/1E0E:	A5E8    	LDA $E8
EE/1E10:	29BE    	AND #$BE
EE/1E12:	0910    	ORA #$10
EE/1E14:	85E8    	STA $E8        (Save changes)
EE/1E16:	9CFA11  	STZ $11FA      (Clear the chocobo and airship flags, among other things)
EE/1E19:	4CAA1E  	JMP $1EAA      (Exit)
EE/1E1C:	20FC90  	JSR $90FC      (Copy 256 bytes from $0A00 to $0000)
EE/1E1F:	A5E7    	LDA $E7
EE/1E21:	8901    	BIT #$01
EE/1E23:	F003    	BEQ $1E28      (LSR A, BCC...)
EE/1E25:	20FB78  	JSR $78FB      (Map script routine)
EE/1E28:	A5E7    	LDA $E7
EE/1E2A:	8901    	BIT #$01
EE/1E2C:	D028    	BNE $1E56      (LSR A, BCS...)
EE/1E2E:	20AD1E  	JSR $1EAD      (Joypad interpretation for character mode)
EE/1E31:	A5E7    	LDA $E7
EE/1E33:	8902    	BIT #$02
EE/1E35:	F01F    	BEQ $1E56
EE/1E37:	9CF011  	STZ $11F0      (Zero $11F0 in anticipation of what follows)
EE/1E3A:	220B00C0	JSL $C0000B    (Adjust HP depending on Poison status and Tintinabar)
EE/1E3E:	ADF011  	LDA $11F0      (Is a party member afflicted with Poison status?)
EE/1E41:	F013    	BEQ $1E56      (Branch if not)
EE/1E43:	A978    	LDA #$78
EE/1E45:	85FF    	STA $FF        (Intensity for mosaic effect)
EE/1E47:	A980    	LDA #$80
EE/1E49:	8D4221  	STA $2142      (Set normal speaker balance)
EE/1E4C:	A9EC    	LDA #$EC
EE/1E4E:	8D4121  	STA $2141      (Sound effect for Poison status)
EE/1E51:	A918    	LDA #$18
EE/1E53:	8D4021  	STA $2140      (APU I/O register 0)
EE/1E56:	C220    	REP #$20       (16-bit A)
EE/1E58:	A5DF    	LDA $DF        (Current X position in tiles and as a fraction of a tile)
EE/1E5A:	18      	CLC            (Clear Carry for addition)
EE/1E5B:	65E3    	ADC $E3
EE/1E5D:	85DF    	STA $DF        (Save changes)
EE/1E5F:	A5E1    	LDA $E1        (Current Y position in tiles and as a fraction of a tile)
EE/1E61:	18      	CLC            (Clear Carry for addition)
EE/1E62:	65E5    	ADC $E5
EE/1E64:	85E1    	STA $E1        (Save changes)
EE/1E66:	A5E3    	LDA $E3
EE/1E68:	D00D    	BNE $1E77
EE/1E6A:	A5E5    	LDA $E5
EE/1E6C:	D009    	BNE $1E77
EE/1E6E:	A5E7    	LDA $E7
EE/1E70:	29F7FF  	AND #$FFF7     (Clear the "animate map character" bit)
EE/1E73:	85E7    	STA $E7        (Save changes) (LDA #$0008, TRB $E7...)
EE/1E75:	8007    	BRA $1E7E      (Skip next three instructions)
EE/1E77:	A5E7    	LDA $E7
EE/1E79:	090800  	ORA #$0008     (Set the "animate map character" bit)
EE/1E7C:	85E7    	STA $E7        (Save changes) (LDA #$0008, TSB $E7...)
EE/1E7E:	A5E3    	LDA $E3
EE/1E80:	0A      	ASL A          (Multiply by 2)
EE/1E81:	0A      	ASL A          (Multiply by 4)
EE/1E82:	0A      	ASL A          (Multiply by 8)
EE/1E83:	0A      	ASL A          (Multiply by 16)
EE/1E84:	18      	CLC            (Clear Carry for addition)
EE/1E85:	653C    	ADC $3C
EE/1E87:	853C    	STA $3C
EE/1E89:	A5E5    	LDA $E5
EE/1E8B:	0A      	ASL A          (Multiply by 2)
EE/1E8C:	0A      	ASL A          (Multiply by 4)
EE/1E8D:	0A      	ASL A          (Multiply by 8)
EE/1E8E:	0A      	ASL A          (Multiply by 16)
EE/1E8F:	18      	CLC            (Clear Carry for addition)
EE/1E90:	6540    	ADC $40
EE/1E92:	8540    	STA $40
EE/1E94:	A5DF    	LDA $DF        (Current X position in tiles and as a fraction of a tile)
EE/1E96:	4A      	LSR A          (Divide by 2)
EE/1E97:	4A      	LSR A          (Divide by 4)
EE/1E98:	4A      	LSR A          (Divide by 8)
EE/1E99:	4A      	LSR A          (Divide by 16)
EE/1E9A:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/1E9D:	8534    	STA $34        (Save as current X position in pixels)
EE/1E9F:	A5E1    	LDA $E1        (Current Y position in tiles and as a fraction of a tile)
EE/1EA1:	4A      	LSR A          (Divide by 2)
EE/1EA2:	4A      	LSR A          (Divide by 4)
EE/1EA3:	4A      	LSR A          (Divide by 8)
EE/1EA4:	4A      	LSR A          (Divide by 16)
EE/1EA5:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/1EA8:	8538    	STA $38        (Save as current Y position in pixels)
EE/1EAA:	AB      	PLB
EE/1EAB:	28      	PLP
EE/1EAC:	60      	RTS

Joypad interpretation for character mode
EE/1EAD:	08      	PHP
EE/1EAE:	C220    	REP #$20       (16-bit A)
EE/1EB0:	64E3    	STZ $E3
EE/1EB2:	64E5    	STZ $E5
EE/1EB4:	A504    	LDA $04        (...)
EE/1EB6:	A5E7    	LDA $E7
EE/1EB8:	297FFF  	AND #$FF7F     (Clear the "ignore tile passability" bit, which is never set...)
EE/1EBB:	85E7    	STA $E7        (Save changes) (LDA #$0080, TRB $E7...)
EE/1EBD:	A504    	LDA $04        (Shared controller bits)
EE/1EBF:	890001  	BIT #$0100     (Is anyone pressing right?)
EE/1EC2:	F049    	BEQ $1F0D      (Branch if not)
EE/1EC4:	E230    	SEP #$30       (8-bit A and indexes)
EE/1EC6:	A901    	LDA #$01
EE/1EC8:	85F6    	STA $F6        (Face right)
EE/1ECA:	20E347  	JSR $47E3      (Map character sprite updating)
EE/1ECD:	C230    	REP #$30       (16-bit A and indexes)
EE/1ECF:	A5E7    	LDA $E7
EE/1ED1:	898000  	BIT #$0080     (Ignore tile passability?) (The bit is cleared at EE/1EB8...)
EE/1ED4:	D023    	BNE $1EF9      (Branch if so) (LDA $E6, BMI...)
EE/1ED6:	A20100  	LDX #$0001     (X position + 1, walking right one step)
EE/1ED9:	A00000  	LDY #$0000     (Y position unchanged) (LDY $00, TYX, INX...)
EE/1EDC:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/1EDF:	891000  	BIT #$0010     (Is this an impassable tile?)
EE/1EE2:	D026    	BNE $1F0A      (Branch if so)
EE/1EE4:	892000  	BIT #$0020     (Forest tile?)
EE/1EE7:	F002    	BEQ $1EEB      (Branch if not) (BNE $1EF2...)
EE/1EE9:	8007    	BRA $1EF2      (Skip next three instructions)
EE/1EEB:	A5E7    	LDA $E7
EE/1EED:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/1EF0:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/1EF2:	A5E7    	LDA $E7
EE/1EF4:	090200  	ORA #$0002
EE/1EF7:	85E7    	STA $E7        (Save changes) (LDA #$0002, TSB $E7...)
EE/1EF9:	A21000  	LDX #$0010
EE/1EFC:	86E3    	STX $E3
EE/1EFE:	A5E8    	LDA $E8
EE/1F00:	29F7FF  	AND #$FFF7
EE/1F03:	85E8    	STA $E8        (Save changes) (LDA #$0008, TRB $E8...)
EE/1F05:	20B320  	JSR $20B3      (Increase step count)
EE/1F08:	C220    	REP #$20       (16-bit A) (Jumps to SEP #$20...)
EE/1F0A:	4CF31F  	JMP $1FF3
EE/1F0D:	890002  	BIT #$0200     (Is anyone pressing left?)
EE/1F10:	F049    	BEQ $1F5B      (Branch if not)
EE/1F12:	E230    	SEP #$30       (8-bit A and indexes)
EE/1F14:	A903    	LDA #$03
EE/1F16:	85F6    	STA $F6        (Face left)
EE/1F18:	20E347  	JSR $47E3      (Map character sprite updating)
EE/1F1B:	C230    	REP #$30       (16-bit A and indexes)
EE/1F1D:	A5E7    	LDA $E7
EE/1F1F:	898000  	BIT #$0080
EE/1F22:	D023    	BNE $1F47      (LDA $E6, BMI...)
EE/1F24:	A2FFFF  	LDX #$FFFF     (X position - 1, walking left one step)
EE/1F27:	A00000  	LDY #$0000     (Y position unchanged) (LDY $00, TYX, DEX...)
EE/1F2A:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/1F2D:	891000  	BIT #$0010     (Is this an impassable tile?)
EE/1F30:	D026    	BNE $1F58      (Branch if so)
EE/1F32:	892000  	BIT #$0020     (Forest tile?)
EE/1F35:	F002    	BEQ $1F39      (Branch if not) (BNE $1F40...)
EE/1F37:	8007    	BRA $1F40      (Skip next three instructions)
EE/1F39:	A5E7    	LDA $E7
EE/1F3B:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/1F3E:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/1F40:	A5E7    	LDA $E7
EE/1F42:	090200  	ORA #$0002
EE/1F45:	85E7    	STA $E7        (Save changes) (LDA #$0002, TSB $E7...)
EE/1F47:	A2F0FF  	LDX #$FFF0
EE/1F4A:	86E3    	STX $E3
EE/1F4C:	A5E8    	LDA $E8
EE/1F4E:	29F7FF  	AND #$FFF7
EE/1F51:	85E8    	STA $E8        (Save changes) (LDA #$0008, TRB $E8...)
EE/1F53:	20B320  	JSR $20B3      (Increase step count)
EE/1F56:	C220    	REP #$20       (16-bit A) (Jumps to SEP #$20...)
EE/1F58:	4CF31F  	JMP $1FF3
EE/1F5B:	890004  	BIT #$0400     (Is anyone pressing down?)
EE/1F5E:	F048    	BEQ $1FA8      (Branch if not)
EE/1F60:	E230    	SEP #$30       (8-bit A and indexes)
EE/1F62:	A902    	LDA #$02
EE/1F64:	85F6    	STA $F6        (Face down)
EE/1F66:	20E347  	JSR $47E3      (Map character sprite updating)
EE/1F69:	C230    	REP #$30       (16-bit A and indexes)
EE/1F6B:	A5E7    	LDA $E7
EE/1F6D:	898000  	BIT #$0080
EE/1F70:	D023    	BNE $1F95      (LDA $E6, BMI...)
EE/1F72:	A20000  	LDX #$0000     (X position unchanged) (LDX $00, TXY, INY...)
EE/1F75:	A00100  	LDY #$0001     (Y position + 1, walking down one step)
EE/1F78:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/1F7B:	891000  	BIT #$0010     (Is this an impassable tile?)
EE/1F7E:	D026    	BNE $1FA6      (Branch if so)
EE/1F80:	892000  	BIT #$0020     (Forest tile?)
EE/1F83:	F002    	BEQ $1F87      (Branch if not) (BNE $1F8E...)
EE/1F85:	8007    	BRA $1F8E      (Skip next three instructions)
EE/1F87:	A5E7    	LDA $E7
EE/1F89:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/1F8C:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/1F8E:	A5E7    	LDA $E7
EE/1F90:	090200  	ORA #$0002
EE/1F93:	85E7    	STA $E7        (Save changes) (LDA #$0002, TSB $E7...)
EE/1F95:	A21000  	LDX #$0010
EE/1F98:	86E5    	STX $E5
EE/1F9A:	A5E8    	LDA $E8
EE/1F9C:	29F7FF  	AND #$FFF7
EE/1F9F:	85E8    	STA $E8        (Save changes)
EE/1FA1:	20B320  	JSR $20B3      (Increase step count)
EE/1FA4:	C220    	REP #$20       (16-bit A) (Branches to SEP #$20...)
EE/1FA6:	804B    	BRA $1FF3
EE/1FA8:	890008  	BIT #$0800     (Is anyone pressing up?)
EE/1FAB:	F046    	BEQ $1FF3      (Branch if not)
EE/1FAD:	E230    	SEP #$30       (8-bit A and indexes)
EE/1FAF:	A900    	LDA #$00
EE/1FB1:	85F6    	STA $F6        (Face up) (STZ...)
EE/1FB3:	20E347  	JSR $47E3      (Map character sprite updating)
EE/1FB6:	C230    	REP #$30       (16-bit A and indexes)
EE/1FB8:	A5E7    	LDA $E7
EE/1FBA:	898000  	BIT #$0080
EE/1FBD:	D023    	BNE $1FE2      (LDA $E6, BMI...)
EE/1FBF:	A20000  	LDX #$0000     (X position unchanged) (LDX $00, TXY, DEY...)
EE/1FC2:	A0FFFF  	LDY #$FFFF     (Y position - 1, walking up one step)
EE/1FC5:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/1FC8:	891000  	BIT #$0010     (Is this an impassable tile?)
EE/1FCB:	D026    	BNE $1FF3      (Branch if so)
EE/1FCD:	892000  	BIT #$0020     (Forest tile?)
EE/1FD0:	F002    	BEQ $1FD4      (Branch if not) (BNE $1FDB...)
EE/1FD2:	8007    	BRA $1FDB      (Skip next three instructions)
EE/1FD4:	A5E7    	LDA $E7
EE/1FD6:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/1FD9:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/1FDB:	A5E7    	LDA $E7
EE/1FDD:	090200  	ORA #$0002
EE/1FE0:	85E7    	STA $E7        (Save changes) (LDA #$0002, TSB $E7...)
EE/1FE2:	A2F0FF  	LDX #$FFF0
EE/1FE5:	86E5    	STX $E5
EE/1FE7:	A5E8    	LDA $E8
EE/1FE9:	29F7FF  	AND #$FFF7
EE/1FEC:	85E8    	STA $E8        (Save changes)
EE/1FEE:	20B320  	JSR $20B3      (Increase step count)
EE/1FF1:	C220    	REP #$20       (...)
EE/1FF3:	E220    	SEP #$20       (8-bit A)
EE/1FF5:	A910    	LDA #$10
EE/1FF7:	85F3    	STA $F3        (Set event speed of map character to normal)
EE/1FF9:	C220    	REP #$20       (16-bit A)
EE/1FFB:	A5E5    	LDA $E5
EE/1FFD:	D020    	BNE $201F
EE/1FFF:	A5E3    	LDA $E3
EE/2001:	D01C    	BNE $201F
EE/2003:	E220    	SEP #$20       (8-bit A)
EE/2005:	A5E9    	LDA $E9
EE/2007:	8910    	BIT #$10
EE/2009:	D014    	BNE $201F
EE/200B:	A508    	LDA $08        (Controller 1 buttons that just got pushed)
EE/200D:	8940    	BIT #$40       (Pressed X?)
EE/200F:	F00E    	BEQ $201F      (Branch if not) (ASL A, BPL...)
EE/2011:	A5E8    	LDA $E8
EE/2013:	0901    	ORA #$01       (Set the "open menu" bit)
EE/2015:	85E8    	STA $E8        (Save changes) (LDA #$01, TSB $E8...)
EE/2017:	ADF611  	LDA $11F6
EE/201A:	0904    	ORA #$04       (Set the "don't reload tilemap" bit)
EE/201C:	8DF611  	STA $11F6      (Save changes) (LDA #$04, TSB $11F6...)
EE/201F:	C220    	REP #$20       (16-bit A)
EE/2021:	A532    	LDA $32        (Load backup of shared controller bits created at EE/2050)
EE/2023:	891000  	BIT #$0010     (Was anyone pressing Start when this function last executed?)
EE/2026:	D026    	BNE $204E      (Branch if so)
EE/2028:	A505    	LDA $05        (Controller bits)
EE/202A:	891000  	BIT #$0010     (Is anyone pressing Start?)
EE/202D:	F01F    	BEQ $204E      (Branch if not)
EE/202F:	ADF611  	LDA $11F6
EE/2032:	890100  	BIT #$0001     (Minimap is disabled?)
EE/2035:	D00E    	BNE $2045      (Branch if so) (LSR A, BCS...)
EE/2037:	090100  	ORA #$0001     (Set the "hide minimap" bit)
EE/203A:	8DF611  	STA $11F6      (Save changes) (INC $11F6...)
EE/203D:	208F41  	JSR $418F      (Hide minimap)
EE/2040:	206C42  	JSR $426C      (Hide both minimap dots)
EE/2043:	8009    	BRA $204E      (Skip next three instructions)
EE/2045:	29FEFF  	AND #$FFFE     (Clear the "hide minimap" bit)
EE/2048:	8DF611  	STA $11F6      (Save changes) (DEC $11F6...)
EE/204B:	202D41  	JSR $412D      (Show minimap)
EE/204E:	A504    	LDA $04        (Shared controller bits)
EE/2050:	8531    	STA $31        (Make a copy for use at EE/2021)
EE/2052:	E220    	SEP #$20       (8-bit A)
EE/2054:	A5E8    	LDA $E8
EE/2056:	8901    	BIT #$01       (Is the "open menu" bit set?)
EE/2058:	D057    	BNE $20B1      (Exit if so) (LSR A, BCS...)
EE/205A:	A5E9    	LDA $E9
EE/205C:	8904    	BIT #$04       (Can the airship be boarded?)
EE/205E:	F051    	BEQ $20B1      (Exit if not)
EE/2060:	ADB71E  	LDA $1EB7      (Event bits)
EE/2063:	8902    	BIT #$02       (Is the airship visible?)
EE/2065:	F04A    	BEQ $20B1      (Exit if not)
EE/2067:	A508    	LDA $08        (Controller 1 buttons that just got pushed)
EE/2069:	8980    	BIT #$80       (Pressed A?) (BPL...)
EE/206B:	F044    	BEQ $20B1      (Exit if not)
EE/206D:	A5E0    	LDA $E0        (Current X position in tiles)
EE/206F:	CD621F  	CMP $1F62      (Same as airship's X position?)
EE/2072:	D03D    	BNE $20B1      (Exit if not)
EE/2074:	A5E2    	LDA $E2        (Current Y position in tiles)
EE/2076:	CD631F  	CMP $1F63      (Same as airship's Y position?)
EE/2079:	D036    	BNE $20B1      (Exit if not)
EE/207B:	ADB71E  	LDA $1EB7      (Event bits)
EE/207E:	8904    	BIT #$04       (Is the airship anchored?)
EE/2080:	D010    	BNE $2092      (Branch if so)
EE/2082:	A5E8    	LDA $E8
EE/2084:	0940    	ORA #$40       (Set the airship to take off)
EE/2086:	85E8    	STA $E8        (Save changes) (LDA #$40, TSB $E8...)
EE/2088:	ADF611  	LDA $11F6
EE/208B:	090C    	ORA #$0C       (Set bits so tilemap and tiles aren't reloaded)
EE/208D:	8DF611  	STA $11F6      (Save changes) (LDA #$0C, TSB $11F6...)
EE/2090:	801F    	BRA $20B1      (Exit)
EE/2092:	AF6FB2EE	LDA $EEB26F    (Pointer to event for boarding the airship, low byte)
EE/2096:	85EA    	STA $EA        (Set event address, low byte)
EE/2098:	AF70B2EE	LDA $EEB270    (Pointer to event for boarding the airship, middle byte)
EE/209C:	85EB    	STA $EB        (Set event address, middle byte)
EE/209E:	AF71B2EE	LDA $EEB271    (Pointer to event for boarding the airship, high byte)
EE/20A2:	18      	CLC            (Clear Carry for addition)
EE/20A3:	69CA    	ADC #$CA       (Add base bank)
EE/20A5:	85EC    	STA $EC        (Set event address, high byte)
EE/20A7:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/20A9:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/20AB:	A5E7    	LDA $E7
EE/20AD:	0941    	ORA #$41
EE/20AF:	85E7    	STA $E7        (Save changes) (LDA #$41, TSB $E7...)
EE/20B1:	28      	PLP
EE/20B2:	60      	RTS

Increase step count, enforce a maximum of 9999999
EE/20B3:	08      	PHP
EE/20B4:	C220    	REP #$20       (16-bit A)
EE/20B6:	AD6618  	LDA $1866      (Steps, low and middle bytes)
EE/20B9:	C97F96  	CMP #$967F     (Value for maximum?)
EE/20BC:	D00B    	BNE $20C9      (Branch if not)
EE/20BE:	AD6818  	LDA $1868      (Steps, high byte)
EE/20C1:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/20C4:	C99800  	CMP #$0098     (Value for maximum?)
EE/20C7:	F014    	BEQ $20DD      (Exit if so)
EE/20C9:	18      	CLC            (Clear Carry for addition)
EE/20CA:	AD6618  	LDA $1866      (Steps, low and middle bytes)
EE/20CD:	690100  	ADC #$0001     (Add one)
EE/20D0:	8D6618  	STA $1866      (Save changes) (INC $1866, BNE, SEP, INC $1868...)
EE/20D3:	E220    	SEP #$20       (8-bit A)
EE/20D5:	AD6818  	LDA $1868      (Steps, high byte)
EE/20D8:	6900    	ADC #$00       (Add one if an overflow occurred)
EE/20DA:	8D6818  	STA $1868      (Save changes)
EE/20DD:	28      	PLP
EE/20DE:	60      	RTS

Entrance trigger loading
EE/20DF:	08      	PHP
EE/20E0:	C220    	REP #$20       (16-bit A) (This could have waited...)
EE/20E2:	A5F4    	LDA $F4        (Map number and flags)
EE/20E4:	29FF00  	AND #$00FF     (Zero the high byte)
EE/20E7:	0A      	ASL A          (Multiply by 2)
EE/20E8:	AA      	TAX            (Transfer A to X)
EE/20E9:	BF00BBDF	LDA $DFBB00,X  (First trigger pointer)
EE/20ED:	8558    	STA $58        (Save it temporarily)
EE/20EF:	BF02BBDF	LDA $DFBB02,X  (Second trigger pointer)
EE/20F3:	855A    	STA $5A        (Save it temporarily)
EE/20F5:	38      	SEC            (Set Carry for subtraction)
EE/20F6:	E558    	SBC $58        (Subtract the two)
EE/20F8:	F070    	BEQ $216A      (Exit if they match, as this map has no such triggers)
EE/20FA:	A658    	LDX $58        (First trigger pointer)
EE/20FC:	E220    	SEP #$20       (8-bit A)
EE/20FE:	BF00BBDF	LDA $DFBB00,X  (X position of entrance trigger)
EE/2102:	C5E0    	CMP $E0        (Compare to party's current X position in tiles)
EE/2104:	D05A    	BNE $2160      (Branch if positions don't match)
EE/2106:	BF01BBDF	LDA $DFBB01,X  (Y position of entrance trigger)
EE/210A:	C5E2    	CMP $E2        (Compare to party's current Y position in tiles)
EE/210C:	D052    	BNE $2160      (Branch if positions don't match)
EE/210E:	C220    	REP #$20       (16-bit A)
EE/2110:	BF02BBDF	LDA $DFBB02,X  (Destination map and flags)
EE/2114:	85F4    	STA $F4        (Save as current map, including flags)
EE/2116:	890002  	BIT #$0200     (Update variables for parent map?)
EE/2119:	F021    	BEQ $213C      (Branch if not)
EE/211B:	AF641F00	LDA $001F64    (Map number and flags in SRAM variables)
EE/211F:	29FF01  	AND #$01FF     (Isolate map number)
EE/2122:	8F691F00	STA $001F69    (Save as parent map)
EE/2126:	E220    	SEP #$20       (8-bit A)
EE/2128:	A5E0    	LDA $E0        (Current X position in tiles)
EE/212A:	8F6B1F00	STA $001F6B    (Save as X position when loading parent map)
EE/212E:	A5E2    	LDA $E2        (Current Y position in tiles)
EE/2130:	8F6C1F00	STA $001F6C    (Save as Y position when loading parent map)
EE/2134:	A5F6    	LDA $F6        (Current direction)
EE/2136:	8FD21F00	STA $001FD2    (Save as direction when loading parent map)
EE/213A:	C220    	REP #$20       (16-bit A)
EE/213C:	BF04BBDF	LDA $DFBB04,X  (Destination coordinates)
EE/2140:	851C    	STA $1C        (Save as coordinates to be later saved in SRAM)
EE/2142:	A98000  	LDA #$0080
EE/2145:	85F1    	STA $F1
EE/2147:	64EA    	STZ $EA        (Zero low bytes of event address)
EE/2149:	A900CA  	LDA #$CA00
EE/214C:	85EB    	STA $EB        (Save as upper two bytes of event address; CA/0000, end map script)
EE/214E:	E619    	INC $19        (Let all functions know that a map was loaded via en entrance trigger)
EE/2150:	A5E9    	LDA $E9
EE/2152:	091000  	ORA #$0010
EE/2155:	85E9    	STA $E9        (Save changes) (LDA #$1008, TSB $E8...)
EE/2157:	A5E8    	LDA $E8
EE/2159:	090800  	ORA #$0008
EE/215C:	85E8    	STA $E8        (Save changes)
EE/215E:	800A    	BRA $216A      (Exit)
EE/2160:	E8      	INX
EE/2161:	E8      	INX
EE/2162:	E8      	INX
EE/2163:	E8      	INX
EE/2164:	E8      	INX
EE/2165:	E8      	INX            (Point to next trigger)
EE/2166:	E45A    	CPX $5A        (Processed all triggers for this map?)
EE/2168:	D094    	BNE $20FE      (Loop if not)
EE/216A:	28      	PLP
EE/216B:	60      	RTS

Event trigger loading
EE/216C:	08      	PHP
EE/216D:	C220    	REP #$20       (16-bit A) (This could have waited...)
EE/216F:	A5F4    	LDA $F4        (Map number and flags)
EE/2171:	29FF00  	AND #$00FF     (Zero the high byte)
EE/2174:	0A      	ASL A          (Multiply by 2)
EE/2175:	AA      	TAX            (Transfer A to X)
EE/2176:	BF0000C4	LDA $C40000,X  (First trigger pointer)
EE/217A:	8558    	STA $58        (Save it temporarily)
EE/217C:	BF0200C4	LDA $C40002,X  (Second trigger pointer)
EE/2180:	855A    	STA $5A        (Save it temporarily)
EE/2182:	38      	SEC            (Set Carry for subtraction)
EE/2183:	E558    	SBC $58        (Subtract the two)
EE/2185:	F04E    	BEQ $21D5      (Exit if they match, as this map has no such triggers)
EE/2187:	A658    	LDX $58        (First trigger pointer)
EE/2189:	E220    	SEP #$20       (8-bit A)
EE/218B:	BF0000C4	LDA $C40000,X  (X position of event trigger)
EE/218F:	C5E0    	CMP $E0        (Identical to that of party?)
EE/2191:	D039    	BNE $21CC      (Branch if not)
EE/2193:	BF0100C4	LDA $C40001,X  (Y position of event trigger)
EE/2197:	C5E2    	CMP $E2        (Identical to that of party?)
EE/2199:	D031    	BNE $21CC      (Branch if not)
EE/219B:	BF0200C4	LDA $C40002,X  (Pointer to event called, low byte) (Use REP #$20...)
EE/219F:	18      	CLC            (...)
EE/21A0:	6900    	ADC #$00       (...)
EE/21A2:	85EA    	STA $EA        (Set event address, low byte)
EE/21A4:	BF0300C4	LDA $C40003,X  (Pointer to event called, middle byte)
EE/21A8:	6900    	ADC #$00       (...)
EE/21AA:	85EB    	STA $EB        (Set event address, middle byte)
EE/21AC:	BF0400C4	LDA $C40004,X  (Pointer to event called, high byte)
EE/21B0:	69CA    	ADC #$CA       (Add base bank)
EE/21B2:	85EC    	STA $EC        (Set event address, high byte)
EE/21B4:	A5E7    	LDA $E7
EE/21B6:	0941    	ORA #$41
EE/21B8:	85E7    	STA $E7        (Save changes) (LDA #$41, TSB $E7...)
EE/21BA:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/21BC:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/21BE:	A5E9    	LDA $E9
EE/21C0:	0910    	ORA #$10
EE/21C2:	85E9    	STA $E9        (Save changes) (LDA #$10, TSB $E9...)
EE/21C4:	A5E8    	LDA $E8
EE/21C6:	0908    	ORA #$08
EE/21C8:	85E8    	STA $E8        (Save changes) (LDA #$08, TSB $E8...)
EE/21CA:	8009    	BRA $21D5      (Exit)
EE/21CC:	E8      	INX
EE/21CD:	E8      	INX
EE/21CE:	E8      	INX
EE/21CF:	E8      	INX
EE/21D0:	E8      	INX            (Point to next trigger)
EE/21D1:	E45A    	CPX $5A        (Processed all triggers for this map?)
EE/21D3:	D0B6    	BNE $218B      (Loop if not)
EE/21D5:	28      	PLP
EE/21D6:	60      	RTS

Load properties of tile occupied or claimed by character
EE/21D7:	AF641F00	LDA $001F64    (Map number and flags in SRAM variables)
EE/21DB:	29FF00    	AND #$00FF     (Zero the high byte)
EE/21DE:	EB      	XBA            (Move it to B for now)
EE/21DF:	0A      	ASL A          (Becomes #$0200 if it is the World of Ruin map)
EE/21E0:	8564    	STA $64        (Save it temporarily)
EE/21E2:	8A      	TXA            (Transfer the X position change)
EE/21E3:	18      	CLC            (Clear Carry for addition)
EE/21E4:	65E0    	ADC $E0        (Add it to the current X position in tiles)
EE/21E6:	29FF00  	AND #$00FF     (Remain between 0 and 255)
EE/21E9:	8558    	STA $58        (Save it temporarily)
EE/21EB:	98      	TYA            (Transfer the Y position change)
EE/21EC:	18      	CLC            (Clear Carry for addition)
EE/21ED:	65E2    	ADC $E2        (Add it to the current Y position in tiles)
EE/21EF:	29FF00  	AND #$00FF     (Remain between 0 and 255)
EE/21F2:	EB      	XBA            (Move it to B)
EE/21F3:	18      	CLC            (Clear Carry for addition)
EE/21F4:	6558    	ADC $58        (Combine the updated X and Y positions)
EE/21F6:	AA      	TAX            (Transfer A to X)
EE/21F7:	BF00007F	LDA $7F0000,X  (Get the tile number)
EE/21FB:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/21FE:	0A      	ASL A          (Multiply by 2)
EE/21FF:	18      	CLC            (Clear Carry for addition)
EE/2200:	6564    	ADC $64        (Add #$0200 if it is the World of Ruin map)
EE/2202:	AA      	TAX            (Transfer A to X)
EE/2203:	BF149BEE	LDA $EE9B14,X  (Load tile properties)
EE/2207:	60      	RTS

Effects preceding a battle in character mode
EE/2208:	8B      	PHB
EE/2209:	08      	PHP
EE/220A:	E220    	SEP #$20       (8-bit A)
EE/220C:	C210    	REP #$10       (16-bit indexes)
EE/220E:	A980    	LDA #$80
EE/2210:	8D4221  	STA $2142      (Set normal speaker balance)
EE/2213:	A9C1    	LDA #$C1
EE/2215:	8D4121  	STA $2141      (Sound effect: "swoosh")
EE/2218:	A918    	LDA #$18
EE/221A:	8D4021  	STA $2140      (APU I/O register 0)
EE/221D:	A903    	LDA #$03
EE/221F:	8D2C21  	STA $212C      (Enable BG1 and BG2 for main screen)
EE/2222:	9C2D21  	STZ $212D      (Disable all layers for subscreen)
EE/2225:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/2228:	BF4E22EE	LDA $EE224E,X  (Load a zoom parameter)
EE/222C:	858C    	STA $8C        (Save to zoom variable, high byte)
EE/222E:	BF4F22EE	LDA $EE224F,X  (Load a screen parameter) (First 24 entries are identical...)
EE/2232:	8D0021  	STA $2100      (Turn on the screen; set brightness)
EE/2235:	DA      	PHX            (Save X)
EE/2236:	20513E  	JSR $3E51      (Mode 7 rendering for character mode)
EE/2239:	C210    	REP #$10       (16-bit indexes)
EE/223B:	FA      	PLX            (Restore X)
EE/223C:	E220    	SEP #$20       (8-bit A)
EE/223E:	A524    	LDA $24        (NMI count)
EE/2240:	F0FC    	BEQ $223E      (Loop until an NMI occurs)
EE/2242:	6424    	STZ $24        (Reset NMI count)
EE/2244:	E8      	INX
EE/2245:	E8      	INX            (Point to next table entries)
EE/2246:	E04400  	CPX #$0044     (Reached the end of the table?)
EE/2249:	D0DD    	BNE $2228      (Loop if not)
EE/224B:	28      	PLP
EE/224C:	AB      	PLB
EE/224D:	60      	RTS

Data for the function above
EE/224E:	85
EE/224F:	0F      	(Full brightness)
EE/2250:	70
EE/2251:	0F      	(Full brightness)
EE/2252:	5C
EE/2253:	0F      	(Full brightness)
EE/2254:	3A
EE/2255:	0F      	(Full brightness)
EE/2256:	2D
EE/2257:	0F      	(Full brightness)
EE/2258:	23
EE/2259:	0F      	(Full brightness)
EE/225A:	19
EE/225B:	0F      	(Full brightness)
EE/225C:	18
EE/225D:	0F      	(Full brightness)
EE/225E:	1B
EE/225F:	0F      	(Full brightness)
EE/2260:	29
EE/2261:	0F      	(Full brightness)
EE/2262:	32
EE/2263:	0F      	(Full brightness)
EE/2264:	3D
EE/2265:	0F      	(Full brightness)
EE/2266:	53
EE/2267:	0F      	(Full brightness)
EE/2268:	5C
EE/2269:	0F      	(Full brightness)
EE/226A:	64
EE/226B:	0F      	(Full brightness)
EE/226C:	6D
EE/226D:	0F      	(Full brightness)
EE/226E:	6D
EE/226F:	0F      	(Full brightness)
EE/2270:	6C
EE/2271:	0F      	(Full brightness)
EE/2272:	69
EE/2273:	0F      	(Full brightness)
EE/2274:	68
EE/2275:	0F      	(Full brightness)
EE/2276:	65
EE/2277:	0F      	(Full brightness)
EE/2278:	5F
EE/2279:	0F      	(Full brightness)
EE/227A:	5C
EE/227B:	0F      	(Full brightness)
EE/227C:	58
EE/227D:	0F      	(Full brightness)
EE/227E:	4E
EE/227F:	0D      	(Brightness: 13)
EE/2280:	49
EE/2281:	0C      	(Brightness: 12)
EE/2282:	44
EE/2283:	0B      	(Brightness: 11)
EE/2284:	38
EE/2285:	09      	(Brightness: 9)
EE/2286:	31
EE/2287:	08      	(Brightness: 8)
EE/2288:	2B
EE/2289:	07      	(Brightness: 7)
EE/228A:	1D
EE/228B:	05      	(Brightness: 5)
EE/228C:	16
EE/228D:	04      	(Brightness: 4)
EE/228E:	0F
EE/228F:	03      	(Brightness: 3)
EE/2290:	00
EE/2291:	01      	(Brightness: 1)

Fade the screen completely at double the normal rate
EE/2292:	08      	PHP
EE/2293:	8B      	PHB
EE/2294:	E220    	SEP #$20       (8-bit A)
EE/2296:	7B      	TDC            (Zero A)
EE/2297:	48      	PHA
EE/2298:	AB      	PLB            (Set data bank to 00)
EE/2299:	A523    	LDA $23        (Current brightness)
EE/229B:	F004    	BEQ $22A1      (Branch if the screen is blank)
EE/229D:	3A      	DEC A          (Decrease brightness)
EE/229E:	F001    	BEQ $22A1      (Branch if this will result in a blank screen)
EE/22A0:	3A      	DEC A          (Decrease brightness)
EE/22A1:	8523    	STA $23        (Save changes)
EE/22A3:	A524    	LDA $24        (NMI count)
EE/22A5:	F0FC    	BEQ $22A3      (Loop until an NMI occurs)
EE/22A7:	6424    	STZ $24        (Reset NMI count)
EE/22A9:	A523    	LDA $23        (Current brightness)
EE/22AB:	D0EC    	BNE $2299      (Loop until screen goes blank)
EE/22AD:	A5E8    	LDA $E8        (BRA $22CE...)
EE/22AF:	297F    	AND #$7F
EE/22B1:	85E8    	STA $E8        (Save changes) (LDA #$80, TRB $E8...)
EE/22B3:	AB      	PLB
EE/22B4:	28      	PLP
EE/22B5:	60      	RTS

Fade the screen completely at a normal rate
EE/22B6:	08      	PHP
EE/22B7:	8B      	PHB
EE/22B8:	E220    	SEP #$20       (8-bit A)
EE/22BA:	7B      	TDC            (Zero A)
EE/22BB:	48      	PHA
EE/22BC:	AB      	PLB            (Set data bank to 00)
EE/22BD:	A523    	LDA $23        (Current brightness)
EE/22BF:	F001    	BEQ $22C2      (Branch if the screen is blank)
EE/22C1:	3A      	DEC A          (Decrease brightness)
EE/22C2:	8523    	STA $23        (Save changes)
EE/22C4:	A524    	LDA $24        (NMI count)
EE/22C6:	F0FC    	BEQ $22C4      (Loop until an NMI occurs)
EE/22C8:	6424    	STZ $24        (Reset NMI count)
EE/22CA:	A523    	LDA $23        (Current brightness)
EE/22CC:	D0EF    	BNE $22BD      (Loop until screen goes blank)
EE/22CE:	A5E8    	LDA $E8        (BRA $231D...)
EE/22D0:	297F    	AND #$7F
EE/22D2:	85E8    	STA $E8        (Save changes) (LDA #$80, TRB $E8...)
EE/22D4:	AB      	PLB
EE/22D5:	28      	PLP
EE/22D6:	60      	RTS

Called when a map is loaded via a vehicle or map script command
EE/22D7:	08      	PHP
EE/22D8:	8B      	PHB
EE/22D9:	E220    	SEP #$20       (8-bit A)
EE/22DB:	A900    	LDA #$00
EE/22DD:	48      	PHA
EE/22DE:	AB      	PLB            (Set data bank to 00)
EE/22DF:	A524    	LDA $24        (NMI count)
EE/22E1:	F0FC    	BEQ $22DF      (Loop until an NMI occurs)
EE/22E3:	6424    	STZ $24        (Reset NMI count)
EE/22E5:	E220    	SEP #$20       (8-bit A)
EE/22E7:	A902    	LDA #$02
EE/22E9:	8D0521  	STA $2105      (BG mode 2, 8x8 tiles)
EE/22EC:	AD641F  	LDA $1F64      (Map number from SRAM, low byte)
EE/22EF:	C902    	CMP #$02       (Serpent Trench?)
EE/22F1:	F004    	BEQ $22F7      (Branch if so)
EE/22F3:	A903    	LDA #$03
EE/22F5:	8002    	BRA $22F9      (Skip next instruction)
EE/22F7:	A983    	LDA #$83
EE/22F9:	8D3121  	STA $2131      (Enable color math for BG1 and BG2; subtract colors)
EE/22FC:	C220    	REP #$20       (16-bit A)
EE/22FE:	A9E000  	LDA #$00E0
EE/2301:	38      	SEC            (Set Carry for subtraction)
EE/2302:	E587    	SBC $87
EE/2304:	8D0942  	STA $4209      (V-Count timer)
EE/2307:	E220    	SEP #$20       (8-bit A)
EE/2309:	A523    	LDA $23        (Current brightness)
EE/230B:	F004    	BEQ $2311      (Branch if the screen is blank)
EE/230D:	3A      	DEC A          (Decrease brightness)
EE/230E:	F001    	BEQ $2311      (Branch if this will result in a blank screen)
EE/2310:	3A      	DEC A          (Decrease brightness)
EE/2311:	8523    	STA $23        (Save changes)
EE/2313:	A524    	LDA $24        (NMI count)
EE/2315:	F0FC    	BEQ $2313      (Loop until an NMI occurs)
EE/2317:	6424    	STZ $24        (Reset NMI count)
EE/2319:	A523    	LDA $23        (Current brightness)
EE/231B:	D0C8    	BNE $22E5      (Loop until screen goes blank)
EE/231D:	A5E8    	LDA $E8
EE/231F:	297F    	AND #$7F
EE/2321:	85E8    	STA $E8        (Save changes) (LDA #$80, TRB $E8...)
EE/2323:	AB      	PLB
EE/2324:	28      	PLP
EE/2325:	60      	RTS

Mine cart script routine
EE/2326:	08      	PHP
EE/2327:	E220    	SEP #$20       (8-bit A)
EE/2329:	C210    	REP #$10       (16-bit indexes)
EE/232B:	A536    	LDA $36        (1-63 counter)
EE/232D:	F007    	BEQ $2336
EE/232F:	C920    	CMP #$20       (Compare to 32)
EE/2331:	F003    	BEQ $2336      (Branch if equal) (BNE $234F...)
EE/2333:	4C4F23  	JMP $234F      (BRA...)
EE/2336:	C221    	REP #$21       (16-bit A; clear Carry)
EE/2338:	A92100  	LDA #$0021
EE/233B:	E536    	SBC $36        (Subtract counter)
EE/233D:	8558    	STA $58
EE/233F:	A534    	LDA $34
EE/2341:	8564    	STA $64
EE/2343:	20F525  	JSR $25F5      (Move data and set mine cart command)
EE/2346:	C221    	REP #$21       (16-bit A; clear Carry)
EE/2348:	A534    	LDA $34
EE/234A:	690500  	ADC #$0005     (Add 5)
EE/234D:	8534    	STA $34        (Save changes)
EE/234F:	C220    	REP #$20       (16-bit A)
EE/2351:	A5F0    	LDA $F0        (Command number)
EE/2353:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/2356:	0A      	ASL A          (Multiply by 2)
EE/2357:	AA      	TAX            (Transfer A to X)
EE/2358:	7CF62F  	JMP ($2FF6,X)

All mine cart commands jump here when they finish
EE/235B:	E220    	SEP #$20       (8-bit A)
EE/235D:	A900    	LDA #$00
EE/235F:	48      	PHA
EE/2360:	AB      	PLB            (Set data bank to 00)
EE/2361:	6460    	STZ $60
EE/2363:	A636    	LDX $36
EE/2365:	8638    	STX $38
EE/2367:	BF780B7F	LDA $7F0B78,X
EE/236B:	18      	CLC            (Clear Carry for addition)
EE/236C:	6928    	ADC #$28       (Add 40)
EE/236E:	8558    	STA $58        (Save it temporarily)
EE/2370:	A932    	LDA #$32       (50)
EE/2372:	38      	SEC            (Set Carry for subtraction)
EE/2373:	E558    	SBC $58
EE/2375:	1005    	BPL $237C
EE/2377:	49FF    	EOR #$FF       (Make value positive)
EE/2379:	1A      	INC A          (Add one)
EE/237A:	E660    	INC $60
EE/237C:	8D0242  	STA $4202      (Save as multiplicand)
EE/237F:	BF380B7F	LDA $7F0B38,X
EE/2383:	855C    	STA $5C        (Save it temporarily)
EE/2385:	A01800  	LDY #$0018
EE/2388:	BB      	TYX            (Transfer Y to X)
EE/2389:	BFF929EE	LDA $EE29F9,X
EE/238D:	8D0342  	STA $4203      (Save as multiplier)
EE/2390:	A638    	LDX $38
EE/2392:	BF380B7F	LDA $7F0B38,X
EE/2396:	38      	SEC            (Set Carry for subtraction)
EE/2397:	E55C    	SBC $5C
EE/2399:	855E    	STA $5E
EE/239B:	A560    	LDA $60
EE/239D:	F008    	BEQ $23A7
EE/239F:	A9FF    	LDA #$FF       (Set A to #$FF)
EE/23A1:	4D1742  	EOR $4217      (Toggle all bits set in high byte of product)
EE/23A4:	1A      	INC A          (Add one)
EE/23A5:	8003    	BRA $23AA      (Skip next instruction)
EE/23A7:	AD1742  	LDA $4217      (Load high byte of product)
EE/23AA:	38      	SEC            (Set Carry for subtraction)
EE/23AB:	E55E    	SBC $5E
EE/23AD:	18      	CLC            (Clear Carry for addition)
EE/23AE:	6558    	ADC $58
EE/23B0:	9FF80A7F	STA $7F0AF8,X
EE/23B4:	8A      	TXA            (Transfer X to A)
EE/23B5:	1A      	INC A
EE/23B6:	293F    	AND #$3F
EE/23B8:	8538    	STA $38
EE/23BA:	AA      	TAX            (Transfer A to X)
EE/23BB:	F004    	BEQ $23C1
EE/23BD:	C920    	CMP #$20
EE/23BF:	D009    	BNE $23CA
EE/23C1:	BF380B7F	LDA $7F0B38,X
EE/23C5:	38      	SEC            (Set Carry for subtraction)
EE/23C6:	E55E    	SBC $5E
EE/23C8:	855C    	STA $5C
EE/23CA:	88      	DEY
EE/23CB:	D0BB    	BNE $2388
EE/23CD:	6460    	STZ $60
EE/23CF:	A636    	LDX $36
EE/23D1:	8638    	STX $38
EE/23D3:	BFB80B7F	LDA $7F0BB8,X
EE/23D7:	1005    	BPL $23DE
EE/23D9:	49FF    	EOR #$FF       (Make value positive)
EE/23DB:	1A      	INC A          (Add one)
EE/23DC:	E660    	INC $60
EE/23DE:	8D0242  	STA $4202      (Save as multiplicand)
EE/23E1:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/23E4:	BB      	TYX            (Transfer Y to X)
EE/23E5:	BFF80B7F	LDA $7F0BF8,X
EE/23E9:	1005    	BPL $23F0
EE/23EB:	49FF    	EOR #$FF       (Make value positive)
EE/23ED:	1A      	INC A          (Add one)
EE/23EE:	C660    	DEC $60
EE/23F0:	8D0342  	STA $4203      (Save as multiplier)
EE/23F3:	A538    	LDA $38
EE/23F5:	AA      	TAX            (Transfer A to X)
EE/23F6:	1A      	INC A
EE/23F7:	293F    	AND #$3F
EE/23F9:	8538    	STA $38        (Save changes)
EE/23FB:	A560    	LDA $60
EE/23FD:	F008    	BEQ $2407
EE/23FF:	A9FF    	LDA #$FF       (Set A to #$FF)
EE/2401:	4D1742  	EOR $4217      (Toggle all bits set in high byte of product)
EE/2404:	1A      	INC A          (Add one)
EE/2405:	8003    	BRA $240A      (Skip next instruction)
EE/2407:	AD1742  	LDA $4217      (Load high byte of product)
EE/240A:	18      	CLC            (Clear Carry for addition)
EE/240B:	6940    	ADC #$40       (Add 64)
EE/240D:	9FB80A7F	STA $7F0AB8,X
EE/2411:	C8      	INY
EE/2412:	C01800  	CPY #$0018
EE/2415:	D0CD    	BNE $23E4      (Loop if not)
EE/2417:	A01600  	LDY #$0016
EE/241A:	8466    	STY $66
EE/241C:	C221    	REP #$21       (16-bit A; clear Carry)
EE/241E:	A536    	LDA $36
EE/2420:	691700  	ADC #$0017
EE/2423:	293F00  	AND #$003F
EE/2426:	8538    	STA $38
EE/2428:	E220    	SEP #$20       (8-bit A)
EE/242A:	A2E001  	LDX #$01E0
EE/242D:	8E8121  	STX $2181      (WRAM address)
EE/2430:	A97F    	LDA #$7F
EE/2432:	8D8321  	STA $2183      (WRAM bank; 7F/01E0)
EE/2435:	E230    	SEP #$30       (8-bit A and indexes)
EE/2437:	A638    	LDX $38
EE/2439:	BFB80A7F	LDA $7F0AB8,X
EE/243D:	8558    	STA $58        (Save it temporarily)
EE/243F:	BFF80A7F	LDA $7F0AF8,X
EE/2443:	855A    	STA $5A        (Save it temporarily)
EE/2445:	A666    	LDX $66
EE/2447:	BFD129EE	LDA $EE29D1,X
EE/244B:	8D0242  	STA $4202      (Save as multiplicand)
EE/244E:	A638    	LDX $38
EE/2450:	C230    	REP #$30       (16-bit A and indexes)
EE/2452:	BF180C7F	LDA $7F0C18,X
EE/2456:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/2459:	EB      	XBA            (Move it to B)
EE/245A:	4A      	LSR A          (Divide by 2)
EE/245B:	4A      	LSR A          (Divide by 4)
EE/245C:	4A      	LSR A          (Divide by 8)
EE/245D:	856A    	STA $6A        (Save it temporarily)
EE/245F:	4A      	LSR A          (Divide by 2)
EE/2460:	18      	CLC            (Clear Carry for addition)
EE/2461:	656A    	ADC $6A
EE/2463:	AA      	TAX            (Transfer A to X)
EE/2464:	A00C00  	LDY #$000C
EE/2467:	C220    	REP #$20       (16-bit A)
EE/2469:	BF322BEE	LDA $EE2B32,X
EE/246D:	F006    	BEQ $2475
EE/246F:	BF342BEE	LDA $EE2B34,X
EE/2473:	8011    	BRA $2486
EE/2475:	E220    	SEP #$20       (8-bit A)
EE/2477:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/247A:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/247D:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/2480:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/2483:	4CE524  	JMP $24E5      (BRA...)
EE/2486:	E221    	SEP #$21       (8-bit A; set Carry)
EE/2488:	645C    	STZ $5C
EE/248A:	BF322BEE	LDA $EE2B32,X
EE/248E:	E558    	SBC $58
EE/2490:	1005    	BPL $2497
EE/2492:	49FF    	EOR #$FF       (Make value positive)
EE/2494:	1A      	INC A          (Add one)
EE/2495:	E65C    	INC $5C
EE/2497:	8D0342  	STA $4203      (Save as multiplier)
EE/249A:	A55C    	LDA $5C
EE/249C:	F008    	BEQ $24A6
EE/249E:	A9FF    	LDA #$FF       (Set A to #$FF)
EE/24A0:	4D1742  	EOR $4217      (Toggle all bits set in high byte of product)
EE/24A3:	1A      	INC A          (Add one)
EE/24A4:	8003    	BRA $24A9      (Skip next instruction)
EE/24A6:	AD1742  	LDA $4217      (High byte of product)
EE/24A9:	18      	CLC            (Clear Carry for addition)
EE/24AA:	6558    	ADC $58
EE/24AC:	8D8021  	STA $2180      (WRAM data write)
EE/24AF:	645C    	STZ $5C
EE/24B1:	BF332BEE	LDA $EE2B33,X
EE/24B5:	38      	SEC            (Set Carry for subtraction)
EE/24B6:	E55A    	SBC $5A
EE/24B8:	1005    	BPL $24BF
EE/24BA:	49FF    	EOR #$FF       (Make value positive)
EE/24BC:	1A      	INC A          (Add one)
EE/24BD:	E65C    	INC $5C
EE/24BF:	8D0342  	STA $4203      (Save as multiplier)
EE/24C2:	A55C    	LDA $5C
EE/24C4:	F008    	BEQ $24CE
EE/24C6:	A9FF    	LDA #$FF       (Set A to #$FF)
EE/24C8:	4D1742  	EOR $4217      (Toggle all bits set in high byte of product)
EE/24CB:	1A      	INC A          (Add one)
EE/24CC:	8003    	BRA $24D1      (Skip next instruction)
EE/24CE:	AD1742  	LDA $4217      (High byte of product)
EE/24D1:	18      	CLC            (Clear Carry for addition)
EE/24D2:	655A    	ADC $5A
EE/24D4:	8D8021  	STA $2180      (WRAM data write)
EE/24D7:	BF342BEE	LDA $EE2B34,X
EE/24DB:	8D8021  	STA $2180      (WRAM data write)
EE/24DE:	BF352BEE	LDA $EE2B35,X
EE/24E2:	8D8021  	STA $2180      (WRAM data write)
EE/24E5:	E8      	INX
EE/24E6:	E8      	INX
EE/24E7:	E8      	INX
EE/24E8:	E8      	INX
EE/24E9:	88      	DEY
EE/24EA:	F003    	BEQ $24EF
EE/24EC:	4C6724  	JMP $2467      (Loop)
EE/24EF:	A538    	LDA $38
EE/24F1:	3A      	DEC A
EE/24F2:	293F    	AND #$3F
EE/24F4:	8538    	STA $38        (Save changes)
EE/24F6:	C666    	DEC $66
EE/24F8:	F003    	BEQ $24FD
EE/24FA:	4C3524  	JMP $2435      (Loop)
EE/24FD:	ADF611  	LDA $11F6
EE/2500:	8980    	BIT #$80       (BPL... Also, this bit is never set...)
EE/2502:	F073    	BEQ $2577
EE/2504:	A536    	LDA $36
EE/2506:	1A      	INC A          (Add one)
EE/2507:	8536    	STA $36        (Save changes) (INC $36...)
EE/2509:	A573    	LDA $73
EE/250B:	D01F    	BNE $252C
EE/250D:	7B      	TDC            (Zero A)
EE/250E:	AD7400  	LDA $0074
EE/2511:	EE7400  	INC $0074
EE/2514:	AA      	TAX            (Transfer A to X)
EE/2515:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/2519:	3004    	BMI $251F      (50% chance of branch)
EE/251B:	A900    	LDA #$00
EE/251D:	8002    	BRA $2521      (Skip next instruction)
EE/251F:	A9FF    	LDA #$FF
EE/2521:	852C    	STA $2C
EE/2523:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/2527:	293F    	AND #$3F       (0 to 63)
EE/2529:	1A      	INC A          (Add one)
EE/252A:	8573    	STA $73
EE/252C:	C673    	DEC $73
EE/252E:	A52C    	LDA $2C
EE/2530:	F014    	BEQ $2546
EE/2532:	C220    	REP #$20       (16-bit A)
EE/2534:	38      	SEC            (Set Carry for subtraction)
EE/2535:	A529    	LDA $29
EE/2537:	E90200  	SBC #$0002     (Subtract 2)
EE/253A:	8529    	STA $29        (Save changes)
EE/253C:	E220    	SEP #$20       (8-bit A)
EE/253E:	A52B    	LDA $2B
EE/2540:	E900    	SBC #$00       (Subtract one if Carry clear)
EE/2542:	852B    	STA $2B        (Save changes) (BRA $2555...)
EE/2544:	8011    	BRA $2557
EE/2546:	C221    	REP #$21       (16-bit A; clear Carry)
EE/2548:	A529    	LDA $29
EE/254A:	690200  	ADC #$0002
EE/254D:	8529    	STA $29        (Save changes)
EE/254F:	E220    	SEP #$20       (8-bit A)
EE/2551:	A52B    	LDA $2B
EE/2553:	6900    	ADC #$00       (Add one if Carry set)
EE/2555:	852B    	STA $2B        (Save changes)
EE/2557:	A53A    	LDA $3A
EE/2559:	18      	CLC            (Clear Carry for addition)
EE/255A:	6529    	ADC $29
EE/255C:	853A    	STA $3A        (Save changes)
EE/255E:	C220    	REP #$20       (16-bit A)
EE/2560:	A53B    	LDA $3B
EE/2562:	652A    	ADC $2A
EE/2564:	300B    	BMI $2571
EE/2566:	C96801  	CMP #$0168     (Compare to 360)
EE/2569:	900A    	BCC $2575      (Branch if smaller)
EE/256B:	38      	SEC            (Carry is already set...)
EE/256C:	E96801  	SBC #$0168     (Subtract 360)
EE/256F:	8004    	BRA $2575      (Skip next two instructions)
EE/2571:	18      	CLC            (Clear Carry for addition)
EE/2572:	696801  	ADC #$0168     (Add 360)
EE/2575:	853B    	STA $3B        (Save changes)
EE/2577:	C220    	REP #$20       (16-bit A)
EE/2579:	A53B    	LDA $3B
EE/257B:	C9B400  	CMP #$00B4     (Facing western hemisphere...?)
EE/257E:	9004    	BCC $2584      (Branch if so...?)
EE/2580:	38      	SEC            (Set Carry for subtraction)
EE/2581:	E9B400  	SBC #$00B4     (Subtract 180)
EE/2584:	AA      	TAX            (Transfer A to X)
EE/2585:	BFF1FEEF	LDA $EFFEF1,X
EE/2589:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/258C:	8558    	STA $58        (Save it temporarily)
EE/258E:	BF4BFFEF	LDA $EFFF4B,X
EE/2592:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/2595:	855A    	STA $5A        (Save it temporarily)
EE/2597:	A53B    	LDA $3B        (This is always set to zero...)
EE/2599:	C9B400  	CMP #$00B4     (facing the eastern hemisphere...?)
EE/259C:	B011    	BCS $25AF      (Branch if so...?)
EE/259E:	C95A00  	CMP #$005A     (Facing southwest quadrant...?)
EE/25A1:	B002    	BCS $25A5      (Branch if so...?) (BCC $25CE...)
EE/25A3:	8029    	BRA $25CE
EE/25A5:	A55A    	LDA $5A        (Redundant code follows...)
EE/25A7:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/25AA:	1A      	INC A          (Add one)
EE/25AB:	855A    	STA $5A        (Save changes)
EE/25AD:	801F    	BRA $25CE
EE/25AF:	C90E01  	CMP #$010E     (Facing the northeast quadrant...?)
EE/25B2:	B012    	BCS $25C6      (Branch if so...?)
EE/25B4:	A558    	LDA $58
EE/25B6:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/25B9:	1A      	INC A          (Add one)
EE/25BA:	8558    	STA $58        (Save changes)
EE/25BC:	A55A    	LDA $5A
EE/25BE:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/25C1:	1A      	INC A          (Add one)
EE/25C2:	855A    	STA $5A        (Save changes)
EE/25C4:	8008    	BRA $25CE
EE/25C6:	A558    	LDA $58
EE/25C8:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/25CB:	1A      	INC A          (Add one)
EE/25CC:	8558    	STA $58        (Save changes)
EE/25CE:	A55A    	LDA $5A
EE/25D0:	0A      	ASL A          (Multiply by 2)
EE/25D1:	18      	CLC            (Clear Carry for addition)
EE/25D2:	655A    	ADC $5A
EE/25D4:	8F3D0000	STA $00003D    ($3D...)
EE/25D8:	A558    	LDA $58
EE/25DA:	0A      	ASL A          (Multiply by 2)
EE/25DB:	18      	CLC            (Clear Carry for addition)
EE/25DC:	6558    	ADC $58
EE/25DE:	8F3F0000	STA $00003F    ($3F...)
EE/25E2:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/25E5:	1A      	INC A          (Add one)
EE/25E6:	8F410000	STA $000041    ($41...)
EE/25EA:	E220    	SEP #$20       (8-bit A)
EE/25EC:	A536    	LDA $36
EE/25EE:	1A      	INC A          (Add one)
EE/25EF:	293F    	AND #$3F
EE/25F1:	8536    	STA $36        (Save changes)
EE/25F3:	28      	PLP
EE/25F4:	60      	RTS

Move data and set jump table entry for mine-cart ride
EE/25F5:	08      	PHP            (Absence of PHB and PLB causes Mag Roader bug)
EE/25F6:	C220    	REP #$20       (16-bit A) (Superfluous...)
EE/25F8:	A664    	LDX $64
EE/25FA:	BFF22EEE	LDA $EE2EF2,X
EE/25FE:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/2601:	EB      	XBA            (Move it to B)
EE/2602:	4A      	LSR A          (Divide by 2)
EE/2603:	4A      	LSR A          (Divide by 4)
EE/2604:	4A      	LSR A          (Divide by 8)
EE/2605:	855A    	STA $5A        (Save it temporarily)
EE/2607:	18      	CLC            (Clear Carry for addition)
EE/2608:	699226  	ADC #$2692     (Add #$2692)
EE/260B:	AA      	TAX            (Set as source address)
EE/260C:	A558    	LDA $58
EE/260E:	18      	CLC            (Clear Carry for addition)
EE/260F:	69380B  	ADC #$0B38     (Add #$0B38)
EE/2612:	A8      	TAY            (Set as destination address)
EE/2613:	A91F00  	LDA #$001F     (Block size: $0020 bytes)
EE/2616:	547FEE  	MVN $7F,$EE    (Move data)
EE/2619:	A55A    	LDA $5A
EE/261B:	18      	CLC            (Clear Carry for addition)
EE/261C:	693228  	ADC #$2832     (Add #$2832)
EE/261F:	AA      	TAX            (Set as source address)
EE/2620:	A558    	LDA $58
EE/2622:	18      	CLC            (Clear Carry for addition)
EE/2623:	69780B  	ADC #$0B78     (Add #$0B78)
EE/2626:	A8      	TAY            (Set as destination address)
EE/2627:	A91F00  	LDA #$001F     (Block size: $0020 bytes)
EE/262A:	547FEE  	MVN $7F,$EE    (Move data)
EE/262D:	A664    	LDX $64
EE/262F:	BFF32EEE	LDA $EE2EF3,X
EE/2633:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/2636:	EB      	XBA            (Move it to B)
EE/2637:	4A      	LSR A          (Divide by 2)
EE/2638:	4A      	LSR A          (Divide by 4)
EE/2639:	4A      	LSR A          (Divide by 8)
EE/263A:	18      	CLC            (Clear Carry for addition)
EE/263B:	69322A  	ADC #$2A32     (Add #$2A32)
EE/263E:	AA      	TAX            (Set as source address)
EE/263F:	A558    	LDA $58
EE/2641:	18      	CLC            (Clear Carry for addition)
EE/2642:	69B80B  	ADC #$0BB8     (Add #$0BB8)
EE/2645:	A8      	TAY            (Set as destination address)
EE/2646:	A91F00  	LDA #$001F     (Block size: $0020 bytes)
EE/2649:	547FEE  	MVN $7F,$EE    (Move data)
EE/264C:	A664    	LDX $64
EE/264E:	BFF42EEE	LDA $EE2EF4,X
EE/2652:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/2655:	EB      	XBA            (Move it to B)
EE/2656:	4A      	LSR A          (Divide by 2)
EE/2657:	4A      	LSR A          (Divide by 4)
EE/2658:	4A      	LSR A          (Divide by 8)
EE/2659:	18      	CLC            (Clear Carry for addition)
EE/265A:	69922A  	ADC #$2A92     (Add #$2A92)
EE/265D:	AA      	TAX            (Set as source address)
EE/265E:	A558    	LDA $58
EE/2660:	18      	CLC            (Clear Carry for addition)
EE/2661:	69180C  	ADC #$0C18     (Add #$0C18)
EE/2664:	A8      	TAY            (Set as destination address)
EE/2665:	A91F00  	LDA #$001F     (Block size: $0020 bytes)
EE/2668:	547FEE  	MVN $7F,$EE    (Move data)
EE/266B:	A664    	LDX $64
EE/266D:	BFF52EEE	LDA $EE2EF5,X  (This is always zero...)
EE/2671:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/2674:	EB      	XBA            (Exchange B and A)
EE/2675:	4A      	LSR A          (Divide by 2)
EE/2676:	4A      	LSR A          (Divide by 4)
EE/2677:	4A      	LSR A          (Divide by 8)
EE/2678:	18      	CLC            (Clear Carry for addition)
EE/2679:	69122A  	ADC #$2A12     (Add #$2A12)
EE/267C:	AA      	TAX            (Set source address; always #$2A12)
EE/267D:	A0F80B  	LDY #$0BF8     (Destination address: $0BF8)
EE/2680:	A91F00  	LDA #$001F     (Block size: $0020 bytes)
EE/2683:	547FEE  	MVN $7F,$EE    (Move data)
EE/2686:	E220    	SEP #$20       (8-bit A)
EE/2688:	A664    	LDX $64
EE/268A:	BFF62EEE	LDA $EE2EF6,X  (Only a few entries aren't zero...)
EE/268E:	85F0    	STA $F0        (Save as mine cart command)
EE/2690:	28      	PLP
EE/2691:	60      	RTS

Data for mine-cart sequence
EE/2692:	0000
EE/2694:	0000
EE/2696:	0000
EE/2698:	0000
EE/269A:	0000
EE/269C:	0000
EE/269E:	0000
EE/26A0:	0000
EE/26A2:	0000
EE/26A4:	0000
EE/26A6:	0000
EE/26A8:	0000
EE/26AA:	0000
EE/26AC:	0000
EE/26AE:	0000
EE/26B0:	0000
EE/26B2:	F4F4
EE/26B4:	F4F4
EE/26B6:	F4F5
EE/26B8:	F6F6
EE/26BA:	F7F8
EE/26BC:	F9FA
EE/26BE:	FBFC
EE/26C0:	FDFE
EE/26C2:	0001
EE/26C4:	0203
EE/26C6:	0405
EE/26C8:	0607
EE/26CA:	0809
EE/26CC:	090A
EE/26CE:	0B0B
EE/26D0:	0B0B
EE/26D2:	0C0B
EE/26D4:	0B0B
EE/26D6:	0B0A
EE/26D8:	0909
EE/26DA:	0807
EE/26DC:	0605
EE/26DE:	0403
EE/26E0:	0201
EE/26E2:	FFFE
EE/26E4:	FDFC
EE/26E6:	FBFA
EE/26E8:	F9F8
EE/26EA:	F7F6
EE/26EC:	F6F5
EE/26EE:	F4F4
EE/26F0:	F4F4
EE/26F2:	F4F4
EE/26F4:	F4F4
EE/26F6:	F4F5
EE/26F8:	F6F6
EE/26FA:	F7F8
EE/26FC:	F9FA
EE/26FE:	FBFC
EE/2700:	FDFE
EE/2702:	0001
EE/2704:	0304
EE/2706:	0607
EE/2708:	090A
EE/270A:	0C0E
EE/270C:	0F11
EE/270E:	1214
EE/2710:	1517
EE/2712:	1715
EE/2714:	1412
EE/2716:	110F
EE/2718:	0E0C
EE/271A:	0A09
EE/271C:	0706
EE/271E:	0403
EE/2720:	0100
EE/2722:	FEFD
EE/2724:	FCFB
EE/2726:	FAF9
EE/2728:	F8F7
EE/272A:	F6F6
EE/272C:	F5F4
EE/272E:	F4F4
EE/2730:	F4F4
EE/2732:	E9EB
EE/2734:	ECEE
EE/2736:	EFF1
EE/2738:	F2F4
EE/273A:	F5F7
EE/273C:	F8FA
EE/273E:	FBFD
EE/2740:	FE00
EE/2742:	0103
EE/2744:	0406
EE/2746:	0709
EE/2748:	0A0C
EE/274A:	0D0F
EE/274C:	1012
EE/274E:	1315
EE/2750:	1618
EE/2752:	1715
EE/2754:	1412
EE/2756:	110F
EE/2758:	0E0C
EE/275A:	0B09
EE/275C:	0806
EE/275E:	0503
EE/2760:	0200
EE/2762:	FFFD
EE/2764:	FCFA
EE/2766:	F9F8
EE/2768:	F7F5
EE/276A:	F4F2
EE/276C:	F1EF
EE/276E:	EEEC
EE/2770:	EBE9
EE/2772:	E9EB
EE/2774:	ECEE
EE/2776:	EFF1
EE/2778:	F2F4
EE/277A:	F6F7
EE/277C:	F9FA
EE/277E:	FCFD
EE/2780:	FF00
EE/2782:	0203
EE/2784:	0405
EE/2786:	0607
EE/2788:	0809
EE/278A:	0A0A
EE/278C:	0B0C
EE/278E:	0C0C
EE/2790:	0C0C
EE/2792:	0C0C
EE/2794:	0C0C
EE/2796:	0C0B
EE/2798:	0A0A
EE/279A:	0908
EE/279C:	0706
EE/279E:	0504
EE/27A0:	0302
EE/27A2:	00FF
EE/27A4:	FDFC
EE/27A6:	FAF9
EE/27A8:	F7F6
EE/27AA:	F4F2
EE/27AC:	F1EF
EE/27AE:	EEEC
EE/27B0:	EBE9
EE/27B2:	F4F4
EE/27B4:	F4F4
EE/27B6:	F4F4
EE/27B8:	F4F4
EE/27BA:	F4F5
EE/27BC:	F5F5
EE/27BE:	F6F6
EE/27C0:	F6F7
EE/27C2:	F7F7
EE/27C4:	F8F8
EE/27C6:	F9F9
EE/27C8:	FAFA
EE/27CA:	FBFB
EE/27CC:	FCFD
EE/27CE:	FDFE
EE/27D0:	FEFF
EE/27D2:	0000
EE/27D4:	0101
EE/27D6:	0202
EE/27D8:	0304
EE/27DA:	0405
EE/27DC:	0506
EE/27DE:	0607
EE/27E0:	0708
EE/27E2:	0808
EE/27E4:	0909
EE/27E6:	090A
EE/27E8:	0A0A
EE/27EA:	0B0B
EE/27EC:	0B0B
EE/27EE:	0B0B
EE/27F0:	0B0B
EE/27F2:	0C0B
EE/27F4:	0B0B
EE/27F6:	0B0B
EE/27F8:	0B0B
EE/27FA:	0B0A
EE/27FC:	0A0A
EE/27FE:	0909
EE/2800:	0908
EE/2802:	0808
EE/2804:	0707
EE/2806:	0606
EE/2808:	0505
EE/280A:	0404
EE/280C:	0302
EE/280E:	0201
EE/2810:	0100
EE/2812:	FFFF
EE/2814:	FEFE
EE/2816:	FDFD
EE/2818:	FCFB
EE/281A:	FBFA
EE/281C:	FAF9
EE/281E:	F9F8
EE/2820:	F8F7
EE/2822:	F7F7
EE/2824:	F6F6
EE/2826:	F6F5
EE/2828:	F5F5
EE/282A:	F4F4
EE/282C:	F4F4
EE/282E:	F4F4
EE/2830:	F4F4
EE/2832:	0000
EE/2834:	0000
EE/2836:	0000
EE/2838:	0000
EE/283A:	0000
EE/283C:	0000
EE/283E:	0000
EE/2840:	0000
EE/2842:	0000
EE/2844:	0000
EE/2846:	0000
EE/2848:	0000
EE/284A:	0000
EE/284C:	0000
EE/284E:	0000
EE/2850:	0000
EE/2852:	FF01
EE/2854:	0304
EE/2856:	0607
EE/2858:	080A
EE/285A:	0B0C
EE/285C:	0D0E
EE/285E:	0E0F
EE/2860:	0F0F
EE/2862:	0F0F
EE/2864:	0F0F
EE/2866:	0E0E
EE/2868:	0D0C
EE/286A:	0B0A
EE/286C:	0807
EE/286E:	0604
EE/2870:	0301
EE/2872:	FFFE
EE/2874:	FCFB
EE/2876:	F9F8
EE/2878:	F7F5
EE/287A:	F4F3
EE/287C:	F2F1
EE/287E:	F1F0
EE/2880:	F0F0
EE/2882:	F0F0
EE/2884:	F0F0
EE/2886:	F1F1
EE/2888:	F2F3
EE/288A:	F4F5
EE/288C:	F7F8
EE/288E:	F9FB
EE/2890:	FCFE
EE/2892:	FF01
EE/2894:	0304
EE/2896:	0607
EE/2898:	080A
EE/289A:	0B0C
EE/289C:	0D0E
EE/289E:	0E0F
EE/28A0:	0F0F
EE/28A2:	0F0F
EE/28A4:	0F0F
EE/28A6:	0F0F
EE/28A8:	0F0F
EE/28AA:	0F0F
EE/28AC:	0F0F
EE/28AE:	0F0F
EE/28B0:	0F0F
EE/28B2:	F1F1
EE/28B4:	F1F1
EE/28B6:	F1F1
EE/28B8:	F1F1
EE/28BA:	F1F1
EE/28BC:	F1F1
EE/28BE:	F1F1
EE/28C0:	F1F1
EE/28C2:	F1F1
EE/28C4:	F1F2
EE/28C6:	F2F3
EE/28C8:	F4F5
EE/28CA:	F6F8
EE/28CC:	F9FA
EE/28CE:	FCFD
EE/28D0:	FF01
EE/28D2:	0F0F
EE/28D4:	0F0F
EE/28D6:	0F0F
EE/28D8:	0F0F
EE/28DA:	0F0F
EE/28DC:	0F0F
EE/28DE:	0F0F
EE/28E0:	0F0F
EE/28E2:	0F0F
EE/28E4:	0F0F
EE/28E6:	0F0F
EE/28E8:	0F0F
EE/28EA:	0F0F
EE/28EC:	0F0F
EE/28EE:	0F0F
EE/28F0:	0F0F
EE/28F2:	F1F1
EE/28F4:	F1F1
EE/28F6:	F1F1
EE/28F8:	F1F1
EE/28FA:	F1F1
EE/28FC:	F1F1
EE/28FE:	F1F1
EE/2900:	F1F1
EE/2902:	F1F1
EE/2904:	F1F1
EE/2906:	F1F1
EE/2908:	F1F1
EE/290A:	F1F1
EE/290C:	F1F1
EE/290E:	F1F1
EE/2910:	F1F1
EE/2912:	0F0F
EE/2914:	0F0F
EE/2916:	0F0F
EE/2918:	0F0F
EE/291A:	0F0F
EE/291C:	0F0F
EE/291E:	0F0F
EE/2920:	0F0F
EE/2922:	0F0F
EE/2924:	0F0E
EE/2926:	0E0D
EE/2928:	0C0B
EE/292A:	0A08
EE/292C:	0706
EE/292E:	0403
EE/2930:	01FF
EE/2932:	01FF
EE/2934:	FDFC
EE/2936:	FAF9
EE/2938:	F8F6
EE/293A:	F5F4
EE/293C:	F3F2
EE/293E:	F2F1
EE/2940:	F1F1
EE/2942:	F1F1
EE/2944:	F1F1
EE/2946:	F1F1
EE/2948:	F1F1
EE/294A:	F1F1
EE/294C:	F1F1
EE/294E:	F1F1
EE/2950:	F1F1
EE/2952:	FF00
EE/2954:	0102
EE/2956:	0303
EE/2958:	0405
EE/295A:	0606
EE/295C:	0708
EE/295E:	0809
EE/2960:	0A0A
EE/2962:	0B0B
EE/2964:	0C0C
EE/2966:	0D0D
EE/2968:	0E0E
EE/296A:	0E0F
EE/296C:	0F0F
EE/296E:	0F0F
EE/2970:	0F0F
EE/2972:	0F0F
EE/2974:	0F0F
EE/2976:	0F0F
EE/2978:	0F0F
EE/297A:	0E0E
EE/297C:	0E0D
EE/297E:	0D0C
EE/2980:	0C0B
EE/2982:	0B0A
EE/2984:	0A09
EE/2986:	0808
EE/2988:	0706
EE/298A:	0605
EE/298C:	0403
EE/298E:	0302
EE/2990:	0100
EE/2992:	FFFF
EE/2994:	FEFD
EE/2996:	FCFC
EE/2998:	FBFA
EE/299A:	F9F9
EE/299C:	F8F7
EE/299E:	F7F6
EE/29A0:	F5F5
EE/29A2:	F4F4
EE/29A4:	F3F3
EE/29A6:	F2F2
EE/29A8:	F1F1
EE/29AA:	F1F0
EE/29AC:	F0F0
EE/29AE:	F0F0
EE/29B0:	F0F0
EE/29B2:	F0F0
EE/29B4:	F0F0
EE/29B6:	F0F0
EE/29B8:	F0F0
EE/29BA:	F1F1
EE/29BC:	F1F2
EE/29BE:	F2F3
EE/29C0:	F3F4
EE/29C2:	F4F5
EE/29C4:	F5F6
EE/29C6:	F7F7
EE/29C8:	F8F9
EE/29CA:	F9FA
EE/29CC:	FBFC
EE/29CE:	FCFD
EE/29D0:	FEFF
EE/29D2:	FFE0
EE/29D4:	C0B0
EE/29D6:	A090
EE/29D8:	8080
EE/29DA:	7070
EE/29DC:	6565
EE/29DE:	5959
EE/29E0:	5959
EE/29E2:	4545
EE/29E4:	4545
EE/29E6:	4545
EE/29E8:	3838
EE/29EA:	3838
EE/29EC:	3838
EE/29EE:	3838
EE/29F0:	3838
EE/29F2:	3838
EE/29F4:	3838
EE/29F6:	3838
EE/29F8:	3838
EE/29FA:	3838
EE/29FC:	4545
EE/29FE:	4545
EE/2A00:	4545
EE/2A02:	5959
EE/2A04:	5959
EE/2A06:	6565
EE/2A08:	7070
EE/2A0A:	8080
EE/2A0C:	90A0
EE/2A0E:	B0C0
EE/2A10:	E0FF
EE/2A12:	FC00
EE/2A14:	0307
EE/2A16:	0A0D
EE/2A18:	1114
EE/2A1A:	171A
EE/2A1C:	1D20
EE/2A1E:	2225
EE/2A20:	2729
EE/2A22:	2A2C
EE/2A24:	2D2E
EE/2A26:	2F2F
EE/2A28:	2F2F
EE/2A2A:	2F2F
EE/2A2C:	2E2D
EE/2A2E:	2B2A
EE/2A30:	2826
EE/2A32:	0000
EE/2A34:	0000
EE/2A36:	0000
EE/2A38:	0000
EE/2A3A:	0000
EE/2A3C:	0000
EE/2A3E:	0000
EE/2A40:	0000
EE/2A42:	0000
EE/2A44:	0000
EE/2A46:	0000
EE/2A48:	0000
EE/2A4A:	0000
EE/2A4C:	0000
EE/2A4E:	0000
EE/2A50:	0000
EE/2A52:	000D
EE/2A54:	1925
EE/2A56:	313C
EE/2A58:	4751
EE/2A5A:	5B63
EE/2A5C:	6A71
EE/2A5E:	767A
EE/2A60:	7E7F
EE/2A62:	7F7F
EE/2A64:	7E7A
EE/2A66:	7671
EE/2A68:	6A63
EE/2A6A:	5A51
EE/2A6C:	473C
EE/2A6E:	3125
EE/2A70:	190D
EE/2A72:	00F3
EE/2A74:	E7DB
EE/2A76:	CFC4
EE/2A78:	B9AF
EE/2A7A:	A59D
EE/2A7C:	968F
EE/2A7E:	8A85
EE/2A80:	8281
EE/2A82:	8081
EE/2A84:	8286
EE/2A86:	8A8F
EE/2A88:	969D
EE/2A8A:	A6AF
EE/2A8C:	B9C4
EE/2A8E:	CFDB
EE/2A90:	E7F4
EE/2A92:	0301
EE/2A94:	0203
EE/2A96:	0501
EE/2A98:	0203
EE/2A9A:	0401
EE/2A9C:	0204
EE/2A9E:	0301
EE/2AA0:	0205
EE/2AA2:	0301
EE/2AA4:	0204
EE/2AA6:	0301
EE/2AA8:	0204
EE/2AAA:	0501
EE/2AAC:	0205
EE/2AAE:	0501
EE/2AB0:	0203
EE/2AB2:	0503
EE/2AB4:	0401
EE/2AB6:	0203
EE/2AB8:	0003
EE/2ABA:	0003
EE/2ABC:	0401
EE/2ABE:	0200
EE/2AC0:	0305
EE/2AC2:	0505
EE/2AC4:	0503
EE/2AC6:	0202
EE/2AC8:	0203
EE/2ACA:	0304
EE/2ACC:	0501
EE/2ACE:	0203
EE/2AD0:	0003
EE/2AD2:	0001
EE/2AD4:	0002
EE/2AD6:	0002
EE/2AD8:	0000
EE/2ADA:	0001
EE/2ADC:	0002
EE/2ADE:	0001
EE/2AE0:	0000
EE/2AE2:	0201
EE/2AE4:	0002
EE/2AE6:	0000
EE/2AE8:	0000
EE/2AEA:	0001
EE/2AEC:	0002
EE/2AEE:	0000
EE/2AF0:	0200
EE/2AF2:	0606
EE/2AF4:	0707
EE/2AF6:	0808
EE/2AF8:	0909
EE/2AFA:	0A0A
EE/2AFC:	0B0B
EE/2AFE:	0C0C
EE/2B00:	0D0D
EE/2B02:	0E0E
EE/2B04:	0F0F
EE/2B06:	1010
EE/2B08:	1111
EE/2B0A:	1212
EE/2B0C:	1313
EE/2B0E:	1200
EE/2B10:	0012
EE/2B12:	0006
EE/2B14:	0708
EE/2B16:	090A
EE/2B18:	0B0C
EE/2B1A:	0D0E
EE/2B1C:	0F10
EE/2B1E:	1100
EE/2B20:	0000
EE/2B22:	0000
EE/2B24:	0000
EE/2B26:	0000
EE/2B28:	0000
EE/2B2A:	0000
EE/2B2C:	0000
EE/2B2E:	0000
EE/2B30:	0000
EE/2B32:	0000
EE/2B34:	0000
EE/2B36:	0000
EE/2B38:	0000
EE/2B3A:	0000
EE/2B3C:	0000
EE/2B3E:	0000
EE/2B40:	0000
EE/2B42:	0000
EE/2B44:	0000
EE/2B46:	0000
EE/2B48:	0000
EE/2B4A:	0000
EE/2B4C:	0000
EE/2B4E:	0000
EE/2B50:	0000
EE/2B52:	0000
EE/2B54:	0000
EE/2B56:	0000
EE/2B58:	0000
EE/2B5A:	0000
EE/2B5C:	0000
EE/2B5E:	4068
EE/2B60:	5001
EE/2B62:	1C20
EE/2B64:	0000
EE/2B66:	1C30
EE/2B68:	1800
EE/2B6A:	1C40
EE/2B6C:	3000
EE/2B6E:	1C50
EE/2B70:	4800
EE/2B72:	1C60
EE/2B74:	6000
EE/2B76:	6420
EE/2B78:	9801
EE/2B7A:	6430
EE/2B7C:	B001
EE/2B7E:	6440
EE/2B80:	C801
EE/2B82:	6450
EE/2B84:	E001
EE/2B86:	6460
EE/2B88:	F801
EE/2B8A:	0000
EE/2B8C:	0000
EE/2B8E:	4068
EE/2B90:	6801
EE/2B92:	2820
EE/2B94:	7800
EE/2B96:	2830
EE/2B98:	9000
EE/2B9A:	2840
EE/2B9C:	A800
EE/2B9E:	2850
EE/2BA0:	C000
EE/2BA2:	5820
EE/2BA4:	1002
EE/2BA6:	5830
EE/2BA8:	2802
EE/2BAA:	5840
EE/2BAC:	4002
EE/2BAE:	5850
EE/2BB0:	5802
EE/2BB2:	3830
EE/2BB4:	3801
EE/2BB6:	4830
EE/2BB8:	3801
EE/2BBA:	0000
EE/2BBC:	0000
EE/2BBE:	4068
EE/2BC0:	5001
EE/2BC2:	2C50
EE/2BC4:	D800
EE/2BC6:	2C60
EE/2BC8:	F000
EE/2BCA:	5450
EE/2BCC:	7002
EE/2BCE:	5460
EE/2BD0:	8802
EE/2BD2:	0000
EE/2BD4:	0000
EE/2BD6:	0000
EE/2BD8:	0000
EE/2BDA:	0000
EE/2BDC:	0000
EE/2BDE:	0000
EE/2BE0:	0000
EE/2BE2:	0000
EE/2BE4:	0000
EE/2BE6:	0000
EE/2BE8:	0000
EE/2BEA:	0000
EE/2BEC:	0000
EE/2BEE:	4068
EE/2BF0:	6801
EE/2BF2:	3058
EE/2BF4:	0801
EE/2BF6:	5058
EE/2BF8:	A002
EE/2BFA:	0000
EE/2BFC:	0000
EE/2BFE:	0000
EE/2C00:	0000
EE/2C02:	0000
EE/2C04:	0000
EE/2C06:	0000
EE/2C08:	0000
EE/2C0A:	0000
EE/2C0C:	0000
EE/2C0E:	0000
EE/2C10:	0000
EE/2C12:	0000
EE/2C14:	0000
EE/2C16:	0000
EE/2C18:	0000
EE/2C1A:	0000
EE/2C1C:	0000
EE/2C1E:	4068
EE/2C20:	5001
EE/2C22:	4018
EE/2C24:	2001
EE/2C26:	0000
EE/2C28:	0000
EE/2C2A:	0000
EE/2C2C:	0000
EE/2C2E:	0000
EE/2C30:	0000
EE/2C32:	0000
EE/2C34:	0000
EE/2C36:	0000
EE/2C38:	0000
EE/2C3A:	0000
EE/2C3C:	0000
EE/2C3E:	0000
EE/2C40:	0000
EE/2C42:	0000
EE/2C44:	0000
EE/2C46:	0000
EE/2C48:	0000
EE/2C4A:	0000
EE/2C4C:	0000
EE/2C4E:	4068
EE/2C50:	6801
EE/2C52:	1C20
EE/2C54:	0000
EE/2C56:	1C30
EE/2C58:	1800
EE/2C5A:	1C40
EE/2C5C:	3000
EE/2C5E:	1C50
EE/2C60:	4800
EE/2C62:	1C60
EE/2C64:	6000
EE/2C66:	0000
EE/2C68:	0000
EE/2C6A:	0000
EE/2C6C:	0000
EE/2C6E:	0000
EE/2C70:	0000
EE/2C72:	0000
EE/2C74:	0000
EE/2C76:	0000
EE/2C78:	0000
EE/2C7A:	4468
EE/2C7C:	5001
EE/2C7E:	4068
EE/2C80:	6801
EE/2C82:	1C20
EE/2C84:	0000
EE/2C86:	1C30
EE/2C88:	1800
EE/2C8A:	1C40
EE/2C8C:	3000
EE/2C8E:	1C50
EE/2C90:	4800
EE/2C92:	1C60
EE/2C94:	6000
EE/2C96:	0000
EE/2C98:	0000
EE/2C9A:	0000
EE/2C9C:	0000
EE/2C9E:	0000
EE/2CA0:	0000
EE/2CA2:	0000
EE/2CA4:	0000
EE/2CA6:	0000
EE/2CA8:	0000
EE/2CAA:	4868
EE/2CAC:	5001
EE/2CAE:	4068
EE/2CB0:	6801
EE/2CB2:	1C20
EE/2CB4:	0000
EE/2CB6:	1C30
EE/2CB8:	1800
EE/2CBA:	1C40
EE/2CBC:	3000
EE/2CBE:	1C50
EE/2CC0:	4800
EE/2CC2:	1C60
EE/2CC4:	6000
EE/2CC6:	0000
EE/2CC8:	0000
EE/2CCA:	0000
EE/2CCC:	0000
EE/2CCE:	0000
EE/2CD0:	0000
EE/2CD2:	0000
EE/2CD4:	0000
EE/2CD6:	0000
EE/2CD8:	0000
EE/2CDA:	4C68
EE/2CDC:	5001
EE/2CDE:	4068
EE/2CE0:	6801
EE/2CE2:	1C20
EE/2CE4:	0000
EE/2CE6:	1C30
EE/2CE8:	1800
EE/2CEA:	1C40
EE/2CEC:	3000
EE/2CEE:	1C50
EE/2CF0:	4800
EE/2CF2:	1C60
EE/2CF4:	6000
EE/2CF6:	0000
EE/2CF8:	0000
EE/2CFA:	0000
EE/2CFC:	0000
EE/2CFE:	0000
EE/2D00:	0000
EE/2D02:	0000
EE/2D04:	0000
EE/2D06:	0000
EE/2D08:	0000
EE/2D0A:	5068
EE/2D0C:	5001
EE/2D0E:	4068
EE/2D10:	6801
EE/2D12:	1C20
EE/2D14:	0000
EE/2D16:	1C30
EE/2D18:	1800
EE/2D1A:	1C40
EE/2D1C:	3000
EE/2D1E:	1C50
EE/2D20:	4800
EE/2D22:	1C60
EE/2D24:	6000
EE/2D26:	0000
EE/2D28:	0000
EE/2D2A:	0000
EE/2D2C:	0000
EE/2D2E:	0000
EE/2D30:	0000
EE/2D32:	0000
EE/2D34:	0000
EE/2D36:	0000
EE/2D38:	0000
EE/2D3A:	5468
EE/2D3C:	5001
EE/2D3E:	4068
EE/2D40:	6801
EE/2D42:	0000
EE/2D44:	0000
EE/2D46:	0000
EE/2D48:	0000
EE/2D4A:	0000
EE/2D4C:	0000
EE/2D4E:	0000
EE/2D50:	0000
EE/2D52:	0000
EE/2D54:	0000
EE/2D56:	0000
EE/2D58:	0000
EE/2D5A:	0000
EE/2D5C:	0000
EE/2D5E:	0000
EE/2D60:	0000
EE/2D62:	0000
EE/2D64:	0000
EE/2D66:	0000
EE/2D68:	0000
EE/2D6A:	5868
EE/2D6C:	5001
EE/2D6E:	4068
EE/2D70:	6801
EE/2D72:	1C20
EE/2D74:	0000
EE/2D76:	1C30
EE/2D78:	1800
EE/2D7A:	1C40
EE/2D7C:	3000
EE/2D7E:	1C50
EE/2D80:	4800
EE/2D82:	1C60
EE/2D84:	6000
EE/2D86:	0000
EE/2D88:	0000
EE/2D8A:	0000
EE/2D8C:	0000
EE/2D8E:	0000
EE/2D90:	0000
EE/2D92:	0000
EE/2D94:	0000
EE/2D96:	0000
EE/2D98:	0000
EE/2D9A:	5C68
EE/2D9C:	5001
EE/2D9E:	4068
EE/2DA0:	6801
EE/2DA2:	5020
EE/2DA4:	9801
EE/2DA6:	5030
EE/2DA8:	B001
EE/2DAA:	5040
EE/2DAC:	C801
EE/2DAE:	5050
EE/2DB0:	E001
EE/2DB2:	5060
EE/2DB4:	F801
EE/2DB6:	0000
EE/2DB8:	0000
EE/2DBA:	0000
EE/2DBC:	0000
EE/2DBE:	0000
EE/2DC0:	0000
EE/2DC2:	0000
EE/2DC4:	0000
EE/2DC6:	0000
EE/2DC8:	0000
EE/2DCA:	6068
EE/2DCC:	5001
EE/2DCE:	4068
EE/2DD0:	6801
EE/2DD2:	5020
EE/2DD4:	9801
EE/2DD6:	5030
EE/2DD8:	B001
EE/2DDA:	5040
EE/2DDC:	C801
EE/2DDE:	5050
EE/2DE0:	E001
EE/2DE2:	5060
EE/2DE4:	F801
EE/2DE6:	0000
EE/2DE8:	0000
EE/2DEA:	0000
EE/2DEC:	0000
EE/2DEE:	0000
EE/2DF0:	0000
EE/2DF2:	0000
EE/2DF4:	0000
EE/2DF6:	0000
EE/2DF8:	0000
EE/2DFA:	6468
EE/2DFC:	5001
EE/2DFE:	4068
EE/2E00:	6801
EE/2E02:	1C20
EE/2E04:	0000
EE/2E06:	1C30
EE/2E08:	1800
EE/2E0A:	1C40
EE/2E0C:	3000
EE/2E0E:	1C50
EE/2E10:	4800
EE/2E12:	1C60
EE/2E14:	6000
EE/2E16:	0000
EE/2E18:	0000
EE/2E1A:	0000
EE/2E1C:	0000
EE/2E1E:	0000
EE/2E20:	0000
EE/2E22:	0000
EE/2E24:	0000
EE/2E26:	0000
EE/2E28:	0000
EE/2E2A:	6868
EE/2E2C:	5001
EE/2E2E:	4068
EE/2E30:	6801
EE/2E32:	5020
EE/2E34:	9801
EE/2E36:	5030
EE/2E38:	B001
EE/2E3A:	5040
EE/2E3C:	C801
EE/2E3E:	5050
EE/2E40:	E001
EE/2E42:	5060
EE/2E44:	F801
EE/2E46:	0000
EE/2E48:	0000
EE/2E4A:	0000
EE/2E4C:	0000
EE/2E4E:	0000
EE/2E50:	0000
EE/2E52:	0000
EE/2E54:	0000
EE/2E56:	0000
EE/2E58:	0000
EE/2E5A:	6C68
EE/2E5C:	5001
EE/2E5E:	4068
EE/2E60:	6801
EE/2E62:	0000
EE/2E64:	0000
EE/2E66:	0000
EE/2E68:	0000
EE/2E6A:	0000
EE/2E6C:	0000
EE/2E6E:	0000
EE/2E70:	0000
EE/2E72:	0000
EE/2E74:	0000
EE/2E76:	0000
EE/2E78:	0000
EE/2E7A:	0000
EE/2E7C:	0000
EE/2E7E:	0000
EE/2E80:	0000
EE/2E82:	0000
EE/2E84:	0000
EE/2E86:	0000
EE/2E88:	0000
EE/2E8A:	7068
EE/2E8C:	5001
EE/2E8E:	4068
EE/2E90:	6801
EE/2E92:	5020
EE/2E94:	9801
EE/2E96:	5030
EE/2E98:	B001
EE/2E9A:	5040
EE/2E9C:	C801
EE/2E9E:	5050
EE/2EA0:	E001
EE/2EA2:	5060
EE/2EA4:	F801
EE/2EA6:	0000
EE/2EA8:	0000
EE/2EAA:	0000
EE/2EAC:	0000
EE/2EAE:	0000
EE/2EB0:	0000
EE/2EB2:	0000
EE/2EB4:	0000
EE/2EB6:	0000
EE/2EB8:	0000
EE/2EBA:	7468
EE/2EBC:	5001
EE/2EBE:	4068
EE/2EC0:	6801
EE/2EC2:	1C20
EE/2EC4:	0000
EE/2EC6:	1C30
EE/2EC8:	1800
EE/2ECA:	1C40
EE/2ECC:	3000
EE/2ECE:	1C50
EE/2ED0:	4800
EE/2ED2:	1C60
EE/2ED4:	6000
EE/2ED6:	0000
EE/2ED8:	0000
EE/2EDA:	0000
EE/2EDC:	0000
EE/2EDE:	0000
EE/2EE0:	0000
EE/2EE2:	0000
EE/2EE4:	0000
EE/2EE6:	0000
EE/2EE8:	0000
EE/2EEA:	0000
EE/2EEC:	0000
EE/2EEE:	4068
EE/2EF0:	6801

Data for mine-cart sequence
EE/2EF2:	01      	(Source: EE/26B2)
EE/2EF3:	00      	(Source: EE/2A32)
EE/2EF4:	00      	(Source: EE/2A92)
EE/2EF5:	00      	(Source: EE/2A12)
EE/2EF6:	00      	(Jump table entry #1)
EE/2EF7:	08      	(Source: EE/2792)
EE/2EF8:	02      	(Source: EE/2A72)
EE/2EF9:	02      	(Source: EE/2AD2)
EE/2EFA:	00      	(Source: EE/2A12)
EE/2EFB:	00      	(Jump table entry #2)
EE/2EFC:	04      	(Source: EE/2712)
EE/2EFD:	01      	(Source: EE/2A52)
EE/2EFE:	01      	(Source: EE/2AB2)
EE/2EFF:	00      	(Source: EE/2A12)
EE/2F00:	00      	(Jump table entry #3)
EE/2F01:	00      	(Source: EE/2692)
EE/2F02:	00      	(Source: EE/2A32)
EE/2F03:	01      	(Source: EE/2AB2)
EE/2F04:	00      	(Source: EE/2A12)
EE/2F05:	E0      	(Jump table entry #4; Mag Roader battle, pack A)
EE/2F06:	02      	(Source: EE/26D2)
EE/2F07:	00      	(Source: EE/2A32)
EE/2F08:	01      	(Source: EE/2AB2)
EE/2F09:	00      	(Source: EE/2A12)
EE/2F0A:	00      	(Jump table entry #5)
EE/2F0B:	08      	(Source: EE/2792)
EE/2F0C:	01      	(Source: EE/2A52)
EE/2F0D:	03      	(Source: EE/2AF2)
EE/2F0E:	00      	(Source: EE/2A12)
EE/2F0F:	00      	(Jump table entry #6)
EE/2F10:	06      	(Source: EE/2752)
EE/2F11:	01      	(Source: EE/2A52)
EE/2F12:	02      	(Source: EE/2AD2)
EE/2F13:	00      	(Source: EE/2A12)
EE/2F14:	00      	(Jump table entry #7)
EE/2F15:	04      	(Source: EE/2712)
EE/2F16:	02      	(Source: EE/2A72)
EE/2F17:	00      	(Source: EE/2A92)
EE/2F18:	00      	(Source: EE/2A12)
EE/2F19:	00      	(Jump table entry #8)
EE/2F1A:	03      	(Source: EE/26F2)
EE/2F1B:	00      	(Source: EE/2A32)
EE/2F1C:	01      	(Source: EE/2AB2)
EE/2F1D:	00      	(Source: EE/2A12)
EE/2F1E:	00      	(Jump table entry #9)
EE/2F1F:	05      	(Source: EE/2732)
EE/2F20:	00      	(Source: EE/2A32)
EE/2F21:	01      	(Source: EE/2AB2)
EE/2F22:	00      	(Source: EE/2A12)
EE/2F23:	E1      	(Jump table entry #10; Mag Roader battle, pack B)
EE/2F24:	07      	(Source: EE/2772)
EE/2F25:	00      	(Source: EE/2A32)
EE/2F26:	00      	(Source: EE/2A92)
EE/2F27:	00      	(Source: EE/2A12)
EE/2F28:	00      	(Jump table entry #11)
EE/2F29:	01      	(Source: EE/26B2)
EE/2F2A:	00      	(Source: EE/2A32)
EE/2F2B:	00      	(Source: EE/2A92)
EE/2F2C:	00      	(Source: EE/2A12)
EE/2F2D:	00      	(Jump table entry #12)
EE/2F2E:	03      	(Source: EE/26F2)
EE/2F2F:	01      	(Source: EE/2A52)
EE/2F30:	01      	(Source: EE/2AB2)
EE/2F31:	00      	(Source: EE/2A12)
EE/2F32:	00      	(Jump table entry #13)
EE/2F33:	0A      	(Source: EE/27D2)
EE/2F34:	02      	(Source: EE/2A72)
EE/2F35:	02      	(Source: EE/2AD2)
EE/2F36:	00      	(Source: EE/2A12)
EE/2F37:	00      	(Jump table entry #14)
EE/2F38:	00      	(Source: EE/2692)
EE/2F39:	00      	(Source: EE/2A32)
EE/2F3A:	01      	(Source: EE/2AB2)
EE/2F3B:	00      	(Source: EE/2A12)
EE/2F3C:	E0      	(Jump table entry #15; Mag Roader battle, pack A)
EE/2F3D:	01      	(Source: EE/26B2)
EE/2F3E:	00      	(Source: EE/2A32)
EE/2F3F:	01      	(Source: EE/2AB2)
EE/2F40:	00      	(Source: EE/2A12)
EE/2F41:	00      	(Jump table entry #16)
EE/2F42:	00      	(Source: EE/2692)
EE/2F43:	01      	(Source: EE/2A52)
EE/2F44:	03      	(Source: EE/2AF2)
EE/2F45:	00      	(Source: EE/2A12)
EE/2F46:	00      	(Jump table entry #17)
EE/2F47:	03      	(Source: EE/26F2)
EE/2F48:	00      	(Source: EE/2A32)
EE/2F49:	00      	(Source: EE/2A92)
EE/2F4A:	00      	(Source: EE/2A12)
EE/2F4B:	00      	(Jump table entry #18)
EE/2F4C:	05      	(Source: EE/2732)
EE/2F4D:	01      	(Source: EE/2A52)
EE/2F4E:	02      	(Source: EE/2AD2)
EE/2F4F:	00      	(Source: EE/2A12)
EE/2F50:	00      	(Jump table entry #19)
EE/2F51:	07      	(Source: EE/2772)
EE/2F52:	00      	(Source: EE/2A32)
EE/2F53:	03      	(Source: EE/2AF2)
EE/2F54:	00      	(Source: EE/2A12)
EE/2F55:	00      	(Jump table entry #20)
EE/2F56:	08      	(Source: EE/2792)
EE/2F57:	00      	(Source: EE/2A32)
EE/2F58:	01      	(Source: EE/2AB2)
EE/2F59:	00      	(Source: EE/2A12)
EE/2F5A:	00      	(Jump table entry #21)
EE/2F5B:	02      	(Source: EE/26D2)
EE/2F5C:	01      	(Source: EE/2A52)
EE/2F5D:	00      	(Source: EE/2A92)
EE/2F5E:	00      	(Source: EE/2A12)
EE/2F5F:	00      	(Jump table entry #22)
EE/2F60:	01      	(Source: EE/26B2)
EE/2F61:	00      	(Source: EE/2A32)
EE/2F62:	00      	(Source: EE/2A92)
EE/2F63:	00      	(Source: EE/2A12)
EE/2F64:	00      	(Jump table entry #23)
EE/2F65:	09      	(Source: EE/27B2)
EE/2F66:	02      	(Source: EE/2A72)
EE/2F67:	01      	(Source: EE/2AB2)
EE/2F68:	00      	(Source: EE/2A12)
EE/2F69:	00      	(Jump table entry #24)
EE/2F6A:	01      	(Source: EE/26B2)
EE/2F6B:	01      	(Source: EE/2A52)
EE/2F6C:	02      	(Source: EE/2AD2)
EE/2F6D:	00      	(Source: EE/2A12)
EE/2F6E:	E1      	(Jump table entry #25; Mag Roader battle, pack B)
EE/2F6F:	03      	(Source: EE/26F2)
EE/2F70:	02      	(Source: EE/2A72)
EE/2F71:	01      	(Source: EE/2AB2)
EE/2F72:	00      	(Source: EE/2A12)
EE/2F73:	00      	(Jump table entry #26)
EE/2F74:	04      	(Source: EE/2712)
EE/2F75:	00      	(Source: EE/2A32)
EE/2F76:	03      	(Source: EE/2AF2)
EE/2F77:	00      	(Source: EE/2A12)
EE/2F78:	00      	(Jump table entry #27)
EE/2F79:	05      	(Source: EE/2732)
EE/2F7A:	00      	(Source: EE/2A32)
EE/2F7B:	02      	(Source: EE/2AD2)
EE/2F7C:	00      	(Source: EE/2A12)
EE/2F7D:	00      	(Jump table entry #28)
EE/2F7E:	07      	(Source: EE/2772)
EE/2F7F:	02      	(Source: EE/2A72)
EE/2F80:	00      	(Source: EE/2A92)
EE/2F81:	00      	(Source: EE/2A12)
EE/2F82:	00      	(Jump table entry #29)
EE/2F83:	05      	(Source: EE/2732)
EE/2F84:	01      	(Source: EE/2A52)
EE/2F85:	02      	(Source: EE/2AD2)
EE/2F86:	00      	(Source: EE/2A12)
EE/2F87:	00      	(Jump table entry #30)
EE/2F88:	07      	(Source: EE/2772)
EE/2F89:	00      	(Source: EE/2A32)
EE/2F8A:	01      	(Source: EE/2AB2)
EE/2F8B:	00      	(Source: EE/2A12)
EE/2F8C:	00      	(Jump table entry #31)
EE/2F8D:	03      	(Source: EE/26F2)
EE/2F8E:	01      	(Source: EE/2A52)
EE/2F8F:	01      	(Source: EE/2AB2)
EE/2F90:	00      	(Source: EE/2A12)
EE/2F91:	E1      	(Jump table entry #32; Mag Roader battle, pack B)
EE/2F92:	00      	(Source: EE/2692)
EE/2F93:	00      	(Source: EE/2A32)
EE/2F94:	00      	(Source: EE/2A92)
EE/2F95:	00      	(Source: EE/2A12)
EE/2F96:	00      	(Jump table entry #33)
EE/2F97:	00      	(Source: EE/2692)
EE/2F98:	00      	(Source: EE/2A32)
EE/2F99:	00      	(Source: EE/2A92)
EE/2F9A:	00      	(Source: EE/2A12)
EE/2F9B:	00      	(Jump table entry #34)
EE/2F9C:	01      	(Source: EE/26B2)
EE/2F9D:	00      	(Source: EE/2A32)
EE/2F9E:	01      	(Source: EE/2AB2)
EE/2F9F:	00      	(Source: EE/2A12)
EE/2FA0:	00      	(Jump table entry #35)
EE/2FA1:	02      	(Source: EE/26D2)
EE/2FA2:	01      	(Source: EE/2A52)
EE/2FA3:	02      	(Source: EE/2AB2)
EE/2FA4:	00      	(Source: EE/2A12)
EE/2FA5:	E2      	(Jump table entry #36; Number 128 battle)
EE/2FA6:	03      	(Source: EE/26F2)
EE/2FA7:	00      	(Source: EE/2A32)
EE/2FA8:	01      	(Source: EE/2AB2)
EE/2FA9:	00      	(Source: EE/2A12)
EE/2FAA:	00      	(Jump table entry #37)
EE/2FAB:	04      	(Source: EE/2712)
EE/2FAC:	01      	(Source: EE/2A52)
EE/2FAD:	01      	(Source: EE/2AB2)
EE/2FAE:	00      	(Source: EE/2A12)
EE/2FAF:	FF      	(Jump table entry #38; end script)

Unused data
EE/2FB0:	05
EE/2FB1:	02
EE/2FB2:	01
EE/2FB3:	00
EE/2FB4:	00
EE/2FB5:	06
EE/2FB6:	01
EE/2FB7:	00
EE/2FB8:	00
EE/2FB9:	00
EE/2FBA:	07
EE/2FBB:	00
EE/2FBC:	02
EE/2FBD:	00
EE/2FBE:	00
EE/2FBF:	00
EE/2FC0:	00
EE/2FC1:	00
EE/2FC2:	00
EE/2FC3:	00
EE/2FC4:	02
EE/2FC5:	01
EE/2FC6:	00
EE/2FC7:	00
EE/2FC8:	00
EE/2FC9:	00
EE/2FCA:	00
EE/2FCB:	00
EE/2FCC:	00
EE/2FCD:	00
EE/2FCE:	00
EE/2FCF:	00
EE/2FD0:	00
EE/2FD1:	00
EE/2FD2:	00
EE/2FD3:	03
EE/2FD4:	02
EE/2FD5:	01
EE/2FD6:	00
EE/2FD7:	00
EE/2FD8:	04
EE/2FD9:	00
EE/2FDA:	03
EE/2FDB:	00
EE/2FDC:	00
EE/2FDD:	05
EE/2FDE:	00
EE/2FDF:	02
EE/2FE0:	00
EE/2FE1:	00
EE/2FE2:	00
EE/2FE3:	00
EE/2FE4:	00
EE/2FE5:	00
EE/2FE6:	FF
EE/2FE7:	00
EE/2FE8:	00
EE/2FE9:	00
EE/2FEA:	00
EE/2FEB:	00
EE/2FEC:	00
EE/2FED:	00
EE/2FEE:	00
EE/2FEF:	00
EE/2FF0:	00
EE/2FF1:	00
EE/2FF2:	00
EE/2FF3:	00
EE/2FF4:	00
EE/2FF5:	00

Jump table for the mine-cart sequence (mostly unused)
EE/2FF6:	F631		(00, jump to EE/235B)
EE/2FF8:	F931
EE/2FFA:	F931
EE/2FFC:	F931
EE/2FFE:	F931
EE/3000:	F931
EE/3002:	F931
EE/3004:	F931
EE/3006:	F931
EE/3008:	F931
EE/300A:	F931
EE/300C:	F931
EE/300E:	F931
EE/3010:	F931
EE/3012:	F931
EE/3014:	F931
EE/3016:	F931
EE/3018:	F931
EE/301A:	F931
EE/301C:	F931
EE/301E:	F931
EE/3020:	F931
EE/3022:	F931
EE/3024:	F931
EE/3026:	F931
EE/3028:	F931
EE/302A:	F931
EE/302C:	F931
EE/302E:	F931
EE/3030:	F931
EE/3032:	F931
EE/3034:	F931
EE/3036:	F931
EE/3038:	F931
EE/303A:	F931
EE/303C:	F931
EE/303E:	F931
EE/3040:	F931
EE/3042:	F931
EE/3044:	F931
EE/3046:	F931
EE/3048:	F931
EE/304A:	F931
EE/304C:	F931
EE/304E:	F931
EE/3050:	F931
EE/3052:	F931
EE/3054:	F931
EE/3056:	F931
EE/3058:	F931
EE/305A:	F931
EE/305C:	F931
EE/305E:	F931
EE/3060:	F931
EE/3062:	F931
EE/3064:	F931
EE/3066:	F931
EE/3068:	F931
EE/306A:	F931
EE/306C:	F931
EE/306E:	F931
EE/3070:	F931
EE/3072:	F931
EE/3074:	F931
EE/3076:	1732
EE/3078:	1732
EE/307A:	1732
EE/307C:	1732
EE/307E:	1732
EE/3080:	1732
EE/3082:	1732
EE/3084:	1732
EE/3086:	1732
EE/3088:	1732
EE/308A:	1732
EE/308C:	1732
EE/308E:	1732
EE/3090:	1732
EE/3092:	1732
EE/3094:	1732
EE/3096:	1732
EE/3098:	1732
EE/309A:	1732
EE/309C:	1732
EE/309E:	1732
EE/30A0:	1732
EE/30A2:	1732
EE/30A4:	1732
EE/30A6:	1732
EE/30A8:	1732
EE/30AA:	1732
EE/30AC:	1732
EE/30AE:	1732
EE/30B0:	1732
EE/30B2:	1732
EE/30B4:	1732
EE/30B6:	1732
EE/30B8:	1732
EE/30BA:	1732
EE/30BC:	1732
EE/30BE:	1732
EE/30C0:	1732
EE/30C2:	1732
EE/30C4:	1732
EE/30C6:	1732
EE/30C8:	1732
EE/30CA:	1732
EE/30CC:	1732
EE/30CE:	1732
EE/30D0:	1732
EE/30D2:	1732
EE/30D4:	1732
EE/30D6:	1732
EE/30D8:	1732
EE/30DA:	1732
EE/30DC:	1732
EE/30DE:	1732
EE/30E0:	1732
EE/30E2:	1732
EE/30E4:	1732
EE/30E6:	1732
EE/30E8:	1732
EE/30EA:	1732
EE/30EC:	1732
EE/30EE:	1732
EE/30F0:	1732
EE/30F2:	1732
EE/30F4:	1732
EE/30F6:	3232
EE/30F8:	3232
EE/30FA:	3232
EE/30FC:	3232
EE/30FE:	3232
EE/3100:	3232
EE/3102:	3232
EE/3104:	3232
EE/3106:	3232
EE/3108:	3232
EE/310A:	3232
EE/310C:	3232
EE/310E:	3232
EE/3110:	3232
EE/3112:	3232
EE/3114:	3232
EE/3116:	3232
EE/3118:	3232
EE/311A:	3232
EE/311C:	3232
EE/311E:	3232
EE/3120:	3232
EE/3122:	3232
EE/3124:	3232
EE/3126:	3232
EE/3128:	3232
EE/312A:	3232
EE/312C:	3232
EE/312E:	3232
EE/3130:	3232
EE/3132:	3232
EE/3134:	3232
EE/3136:	5732
EE/3138:	5732
EE/313A:	5732
EE/313C:	5732
EE/313E:	5732
EE/3140:	5732
EE/3142:	5732
EE/3144:	5732
EE/3146:	5732
EE/3148:	5732
EE/314A:	5732
EE/314C:	5732
EE/314E:	5732
EE/3150:	5732
EE/3152:	5732
EE/3154:	5732
EE/3156:	5732
EE/3158:	5732
EE/315A:	5732
EE/315C:	5732
EE/315E:	5732
EE/3160:	5732
EE/3162:	5732
EE/3164:	5732
EE/3166:	5732
EE/3168:	5732
EE/316A:	5732
EE/316C:	5732
EE/316E:	5732
EE/3170:	5732
EE/3172:	5732
EE/3174:	5732
EE/3176:	F631
EE/3178:	F631
EE/317A:	F631
EE/317C:	F631
EE/317E:	F631
EE/3180:	F631
EE/3182:	F631
EE/3184:	F631
EE/3186:	F631
EE/3188:	F631
EE/318A:	F631
EE/318C:	F631
EE/318E:	F631
EE/3190:	F631
EE/3192:	F631
EE/3194:	F631
EE/3196:	F631
EE/3198:	F631
EE/319A:	F631
EE/319C:	F631
EE/319E:	F631
EE/31A0:	F631
EE/31A2:	F631
EE/31A4:	F631
EE/31A6:	F631
EE/31A8:	F631
EE/31AA:	F631
EE/31AC:	F631
EE/31AE:	F631
EE/31B0:	F631
EE/31B2:	F631
EE/31B4:	F631
EE/31B6:	7A32		(E0, trigger Mag Roader battle, pack A)
EE/31B8:	C832		(E1, trigger Mag Roader battle, pack B)
EE/31BA:	1633		(E2, trigger Number 128 battle)
EE/31BC:	F631
EE/31BE:	F631
EE/31C0:	F631
EE/31C2:	F631
EE/31C4:	F631
EE/31C6:	F631
EE/31C8:	F631
EE/31CA:	F631
EE/31CC:	F631
EE/31CE:	F631
EE/31D0:	F631
EE/31D2:	F631
EE/31D4:	F631
EE/31D6:	4A33
EE/31D8:	4D33
EE/31DA:	5033
EE/31DC:	5333
EE/31DE:	F631
EE/31E0:	F631
EE/31E2:	F631
EE/31E4:	F631
EE/31E6:	F631
EE/31E8:	F631
EE/31EA:	F631
EE/31EC:	F631
EE/31EE:	F631
EE/31F0:	F631
EE/31F2:	F631
EE/31F4:	5633		(FF, end script)

From many places in the jump table above
EE/31F6:	4C5B23  	JMP $235B      (Change all pointers to "5B23"...)

Mine cart commands 01-3F (unused)
EE/31F9:	A5E7		LDA $E7
EE/31FB:	890100  	BIT #$0001
EE/31FE:	F010    	BEQ $3210      (LSR A, BCC...)
EE/3200:	A5F0    	LDA $F0        (Command number)
EE/3202:	29FF00    	AND #$00FF     (Discard surplus)
EE/3205:	856A      	STA $6A        (Save it temporarily) (BRA $3220...)
EE/3207:	0A      	ASL A          (Double it)
EE/3208:	0A      	ASL A          (Double it)
EE/3209:	18      	CLC            (Clear Carry for addition)
EE/320A:	656A    	ADC $6A        (Add original value)
EE/320C:	6534    	ADC $34        (Add current X position in pixels...?)
EE/320E:	8534    	STA $34        (Set current X position in pixels...?)
EE/3210:	E220    	SEP #$20       (8-bit A)
EE/3212:	64F0    	STZ $F0        (Clear command number)
EE/3214:	4C5B23  	JMP $235B

Mine cart commands 40-7F (unused)
EE/3217:	A5F0    	LDA $F0        (Command number)
EE/3219:	29FF00  	AND #$00FF     (Discard surplus)
EE/321C:	38      	SEC            (Set Carry for subtraction)
EE/321D:	E93F00    	SBC #$003F     (Subtract 63)
EE/3220:	856A    	STA $6A        (Save it temporarily)
EE/3222:	0A      	ASL A          (Double it)
EE/3223:	0A      	ASL A          (Double it)
EE/3224:	18      	CLC            (Clear Carry for addition)
EE/3225:	656A    	ADC $6A        (Add original value)
EE/3227:	6534    	ADC $34        (Add current X position in pixels...?)
EE/3229:	8534    	STA $34        (Set current X position in pixels...?)
EE/322B:	E220    	SEP #$20       (8-bit A)
EE/322D:	64F0    	STZ $F0        (Clear command number)
EE/322F:	4C5B23  	JMP $235B

Mine cart commands 80-9F (unused)
EE/3232:	7B      	TDC            (Zero A)
EE/3233:	E221    	SEP #$21       (8-bit A; set Carry)
EE/3235:	A5F0    	LDA $F0        (Command number)
EE/3237:	2903    	AND #$03       (Isolate bits 0 and 1)
EE/3239:	1A      	INC A          (Add one)
EE/323A:	8529    	STA $29
EE/323C:	642A    	STZ $2A
EE/323E:	A5F0    	LDA $F0        (Command number)
EE/3240:	4A      	LSR A          (Divide by 2)
EE/3241:	4A      	LSR A          (Divide by 4)
EE/3242:	2907    	AND #$07       (Remain between 0 and 7)
EE/3244:	1A      	INC A          (Add one)
EE/3245:	0A      	ASL A          (Double it)
EE/3246:	8573    	STA $73        (Set vehicle's direction...?)
EE/3248:	E220    	SEP #$20       (...) (BRA $322B...)
EE/324A:	64F0    	STZ $F0        (Clear command number)
EE/324C:	4C5B23  	JMP $235B

Data for the unused function below
EE/324F:	02
EE/3250:	04
EE/3251:	06
EE/3252:	1E
EE/3253:	2D
EE/3254:	3C
EE/3255:	4B
EE/3256:	5A

Mine cart commands A0-BF (unused)
EE/3257:	7B      	TDC            (Zero A)
EE/3258:	E221    	SEP #$21       (8-bit A; set Carry)
EE/325A:	A5F0    	LDA $F0        (Command number)
EE/325C:	2903    	AND #$03       (Isolate bits 0 and 1)
EE/325E:	49FF    	EOR #$FF       (Toggle all bits)
EE/3260:	8529    	STA $29
EE/3262:	A9FF    	LDA #$FF
EE/3264:	852A    	STA $2A
EE/3266:	A5F0    	LDA $F0        (Command number)
EE/3268:	4A      	LSR A          (Divide by 2)
EE/3269:	4A      	LSR A          (Divide by 4)
EE/326A:	2907    	AND #$07       (Remain between 0 and 7)
EE/326C:	AA      	TAX            (Transfer A to X)
EE/326D:	BF4F32EE	LDA $EE324F,X
EE/3271:	8573    	STA $73        (Set vehicle's direction, low byte...?) (BRA $3246...)
EE/3273:	E220    	SEP #$20       (...)
EE/3275:	64F0    	STZ $F0        (Clear command number)
EE/3277:	4C5B23  	JMP $235B

Mine cart command E0, trigger Mag Roader battle, pack A
EE/327A:	AD6D1F  	LDA $1F6D      (RNG index) (Bug: loads from 7F/1F6D)
EE/327D:	29FF00    	AND #$00FF     (Discard surplus)
EE/3280:	AA      	TAX            (Transfer A to X)
EE/3281:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/3285:	8564    	STA $64        (Save it temporarily)
EE/3287:	A92900    	LDA #$0029     (Two-pack #$29, Mag Roaders)
EE/328A:	0A      	ASL A          (Multiply by 2) (BRA $32D8...)
EE/328B:	0A      	ASL A          (Multiply by 4)
EE/328C:	AA      	TAX            (Transfer A to X)
EE/328D:	E220    	SEP #$20       (8-bit A)
EE/328F:	EE6D1F  	INC $1F6D      (Increase RNG index) (Bug: increases 7F/1F6D)
EE/3292:	A564    	LDA $64        (Random number)
EE/3294:	C9C0    	CMP #$C0       (Below 192?)
EE/3296:	9002    	BCC $329A      (Branch if so; 75% chance)
EE/3298:	E8      	INX
EE/3299:	E8      	INX            (Increase formation index)
EE/329A:	BF0050CF	LDA $CF5000,X  (Mag Roader formation, low byte)
EE/329E:	8FE01100	STA $0011E0    (Set formation)
EE/32A2:	BF0150CF	LDA $CF5001,X  (Mag Roader formation, high byte)
EE/32A6:	8FE11100	STA $0011E1    (Set formation)
EE/32AA:	A92C    	LDA #$2C       (Value for railway)
EE/32AC:	8FE21100	STA $0011E2    (Set background)
EE/32B0:	7B      	TDC            (Zero A)
EE/32B1:	8FE31100	STA $0011E3
EE/32B5:	A908    	LDA #$08       (Bit for overriding battle song)
EE/32B7:	8FE41100	STA $0011E4    (Set battle flags)
EE/32BB:	AFF61100	LDA $0011F6
EE/32BF:	0902    	ORA #$02       (Set a battle to occur)
EE/32C1:	8FF61100	STA $0011F6    (Save changes)
EE/32C5:	4C5B23  	JMP $235B

Mine cart command E1, trigger Mag Roader battle, pack B
EE/32C8:	AD6D1F  	LDA $1F6D      (RNG index) (Bug: loads from 7F/1F6D)
EE/32CB:	29FF00    	AND #$00FF     (Discard surplus)
EE/32CE:	AA      	TAX            (Transfer A to X)
EE/32CF:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/32D3:	8564    	STA $64        (Save it temporarily)
EE/32D5:	A990    	LDA #$0090     (Two-pack #$90, Mag Roaders)
EE/32D8:	0A      	ASL A          (Multiply by 2)
EE/32D9:	0A      	ASL A          (Multiply by 4)
EE/32DA:	AA      	TAX            (Transfer A to X)
EE/32DB:	E220    	SEP #$20       (8-bit A)
EE/32DD:	EE6D1F  	INC $1F6D      (Increase RNG index) (Bug: increases 7F/1F6D)
EE/32E0:	A564    	LDA $64        (Temporarily saved random number)
EE/32E2:	C9C0    	CMP #$C0       (Below 192?)
EE/32E4:	9002    	BCC $32E8      (Branch if so; 75% chance)
EE/32E6:	E8      	INX
EE/32E7:	E8      	INX            (Increase formation index)
EE/32E8:	BF0050CF	LDA $CF5000,X  (Mag Roader formation, low byte)
EE/32EC:	8FE01100	STA $0011E0    (Set formation)
EE/32F0:	BF0150CF	LDA $CF5001,X  (Mag Roader formation, high byte)
EE/32F4:	8FE11100	STA $0011E1    (Set formation)
EE/32F8:	A92C    	LDA #$2C       (Value for railway)
EE/32FA:	8FE21100	STA $0011E2    (Set background)
EE/32FE:	7B      	TDC            (Zero A)
EE/32FF:	8FE31100	STA $0011E3
EE/3303:	A908    	LDA #$08       (Bit for overriding battle song)
EE/3305:	8FE41100	STA $0011E4    (Set battle flags) (BRA $3339...)
EE/3309:	AFF61100	LDA $0011F6
EE/330D:	0902    	ORA #$02       (Set a battle to occur)
EE/330F:	8FF61100	STA $0011F6    (Save changes)
EE/3313:	4C5B23  	JMP $235B

Mine cart command E2, trigger Number 128 battle
EE/3316:	A94900    	LDA #$0049     (Two-pack #$49) (LDX #$0124...)
EE/3319:	0A      	ASL A          (Multiply by 2)
EE/331A:	0A      	ASL A          (Multiply by 4)
EE/331B:	AA      	TAX            (Transfer it to X)
EE/331C:	E220    	SEP #$20       (8-bit A)
EE/331E:	BF0050CF	LDA $CF5000,X  (Number 128 formation, low byte)
EE/3322:	8FE01100	STA $0011E0    (Set formation)
EE/3326:	BF0150CF	LDA $CF5001,X  (Number 128 formation, high byte)
EE/332A:	8FE11100	STA $0011E1    (Set formation)
EE/332E:	A92C    	LDA #$2C       (Value for railway)
EE/3330:	8FE21100	STA $0011E2    (Set background)
EE/3334:	7B      	TDC            (Zero A)
EE/3335:	8FE31100	STA $0011E3
EE/3339:	8FE41100	STA $0011E4    (Clear various battle flags)
EE/333D:	AFF61100	LDA $0011F6
EE/3341:	0902    	ORA #$02       (Set a battle to occur)
EE/3343:	8FF61100	STA $0011F6    (Save changes)
EE/3347:	4C5B23  	JMP $235B

Mine cart command F0 (unused)
EE/334A:	4C5B23  	JMP $235B

Mine cart command F1 (unused)
EE/334D:	4C5B23  	JMP $235B

Mine cart command F2 (unused)
EE/3350:	4C5B23  	JMP $235B

Mine cart command F3 (unused)
EE/3353:	4C5B23  	JMP $235B

Mine cart command FF, end script
EE/3356:	E220    	SEP #$20       (8-bit A)
EE/3358:	64F0    	STZ $F0        (Clear command number)
EE/335A:	6422    	STZ $22        (Set screen to go blank)
EE/335C:	C220    	REP #$20       (16-bit A)
EE/335E:	E619    	INC $19        (Set ride to terminate)
EE/3360:	4C5B23  	JMP $235B

Generate a 32x32 world map to be stored in VRAM?
EE/3363:	E220    	SEP #$20       (8-bit A)
EE/3365:	C210    	REP #$10       (16-bit indexes)
EE/3367:	8B      	PHB            (Save data bank)
EE/3368:	A97E    	LDA #$7E
EE/336A:	48      	PHA
EE/336B:	AB      	PLB            (Set data bank to 7E)
EE/336C:	A97F    	LDA #$7F       (INC A...)
EE/336E:	8560    	STA $60
EE/3370:	C220    	REP #$20       (16-bit A)
EE/3372:	A534    	LDA $34        (Current X position in pixels)
EE/3374:	38      	SEC            (Set Carry for subtraction)
EE/3375:	E90002  	SBC #$0200     (Subtract 512)
EE/3378:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/337B:	855A    	STA $5A        (Save it temporarily) (Needless if moved below...)
EE/337D:	A538    	LDA $38        (Current Y position in pixels)
EE/337F:	38      	SEC            (Set Carry for subtraction)
EE/3380:	E90002  	SBC #$0200     (Subtract 512)
EE/3383:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/3386:	855C    	STA $5C        (Save it temporarily)
EE/3388:	C220    	REP #$20       (16-bit A)
EE/338A:	A55A    	LDA $5A        (Current X position in pixels, minus 512)
EE/338C:	4A      	LSR A          (Divide by 2)
EE/338D:	4A      	LSR A          (Divide by 4)
EE/338E:	4A      	LSR A          (Divide by 8)
EE/338F:	297E00  	AND #$007E     (Remain between 0 and 126)
EE/3392:	AA      	TAX            (Transfer A to X)
EE/3393:	A540    	LDA $40
EE/3395:	C90010  	CMP #$1000
EE/3398:	100D    	BPL $33A7
EE/339A:	C90000  	CMP #$0000     (CMP $00...)
EE/339D:	3030    	BMI $33CF
EE/339F:	A90080  	LDA #$8000
EE/33A2:	8544    	STA $44        (Disable first VRAM part of NMI code)
EE/33A4:	4C2A34  	JMP $342A
EE/33A7:	A540    	LDA $40
EE/33A9:	38      	SEC            (Set Carry for subtraction)
EE/33AA:	E90010  	SBC #$1000     (Subtract 4096)
EE/33AD:	8540    	STA $40        (Save changes)
EE/33AF:	A55C    	LDA $5C        (Current Y position in pixels, minus 512)
EE/33B1:	0A      	ASL A          (Multiply by 2)
EE/33B2:	0A      	ASL A          (Multiply by 4)
EE/33B3:	0A      	ASL A          (Multiply by 8)
EE/33B4:	0A      	ASL A          (Multiply by 16)
EE/33B5:	18      	CLC            (Clear Carry for addition)
EE/33B6:	69003F  	ADC #$3F00
EE/33B9:	2900FF  	AND #$FF00
EE/33BC:	855E    	STA $5E
EE/33BE:	A55C    	LDA $5C
EE/33C0:	0A      	ASL A          (Multiply by 2)
EE/33C1:	0A      	ASL A          (Multiply by 4)
EE/33C2:	0A      	ASL A          (Multiply by 8)
EE/33C3:	0A      	ASL A          (Multiply by 16)
EE/33C4:	38      	SEC            (Set Carry for subtraction)
EE/33C5:	E90001  	SBC #$0100     (Subtract 256)
EE/33C8:	29003F  	AND #$3F00     (BRA $33EB...)
EE/33CB:	8544    	STA $44        (Set first VRAM pointer for NMI)
EE/33CD:	801E    	BRA $33ED
EE/33CF:	A540    	LDA $40
EE/33D1:	18      	CLC            (Clear Carry for addition)
EE/33D2:	690010  	ADC #$1000     (Add 4096)
EE/33D5:	8540    	STA $40        (Save changes)
EE/33D7:	A55C    	LDA $5C
EE/33D9:	0A      	ASL A          (Multiply by 2)
EE/33DA:	0A      	ASL A          (Multiply by 4)
EE/33DB:	0A      	ASL A          (Multiply by 8)
EE/33DC:	0A      	ASL A          (Multiply by 16)
EE/33DD:	2900FF  	AND #$FF00     (Clear low byte)
EE/33E0:	855E    	STA $5E
EE/33E2:	A55C    	LDA $5C
EE/33E4:	0A      	ASL A          (Multiply by 2)
EE/33E5:	0A      	ASL A          (Multiply by 4)
EE/33E6:	0A      	ASL A          (Multiply by 8)
EE/33E7:	0A      	ASL A          (Multiply by 16)
EE/33E8:	29003F  	AND #$3F00
EE/33EB:	8544    	STA $44        (Set first VRAM pointer for NMI)
EE/33ED:	A55A    	LDA $5A
EE/33EF:	4A      	LSR A          (Divide by 2)
EE/33F0:	4A      	LSR A          (Divide by 4)
EE/33F1:	4A      	LSR A          (Divide by 8)
EE/33F2:	4A      	LSR A          (Divide by 16)
EE/33F3:	29FF00  	AND #$00FF     (Remain between 0 and 255)
EE/33F6:	A8      	TAY            (Transfer A to Y)
EE/33F7:	A94000  	LDA #$0040     (Value for loop counter)
EE/33FA:	8566    	STA $66        (Store in general variable)
EE/33FC:	B75E    	LDA [$5E],Y
EE/33FE:	5A      	PHY            (Save Y)
EE/33FF:	29FF00  	AND #$00FF     (Remain between 0 and 255)
EE/3402:	0A      	ASL A          (Multiply by 2)
EE/3403:	0A      	ASL A          (Multiply by 4)
EE/3404:	A8      	TAY            (Transfer A to Y)
EE/3405:	B9506F  	LDA $6F50,Y    (Tile graphics)
EE/3408:	9D506D  	STA $6D50,X
EE/340B:	B9526F  	LDA $6F52,Y    (Tile graphics)
EE/340E:	9DD06D  	STA $6DD0,X
EE/3411:	68      	PLA
EE/3412:	1A      	INC A          (Increase A)
EE/3413:	29FF00  	AND #$00FF     (Remain between 0 and 255)
EE/3416:	A8      	TAY            (Transfer A to Y)
EE/3417:	8A      	TXA            (Transfer X to A)
EE/3418:	1A      	INC A          (Increase A)
EE/3419:	1A      	INC A          (Increase A)
EE/341A:	297F00  	AND #$007F     (Remain between 0 and 127)
EE/341D:	AA      	TAX            (Transfer A to X)
EE/341E:	C666    	DEC $66        (Decrease loop counter)
EE/3420:	D0DA    	BNE $33FC      (Loop unless null)
EE/3422:	A90080  	LDA #$8000     (BRA $3441...)
EE/3425:	8546    	STA $46        (Disable second VRAM part of NMI code)
EE/3427:	4CD334  	JMP $34D3      (Exit) (PLB, RTS...)
EE/342A:	C220    	REP #$20       (...)
EE/342C:	A55C    	LDA $5C
EE/342E:	4A      	LSR A          (Divide by 2)
EE/342F:	4A      	LSR A          (Divide by 4)
EE/3430:	4A      	LSR A          (Divide by 8)
EE/3431:	297E00  	AND #$007E
EE/3434:	AA      	TAX            (Transfer A to X)
EE/3435:	A53C    	LDA $3C
EE/3437:	C90010  	CMP #$1000
EE/343A:	100D    	BPL $3449
EE/343C:	C90000  	CMP #$0000     (CMP $00...)
EE/343F:	302D    	BMI $346E
EE/3441:	A90080  	LDA #$8000
EE/3444:	8546    	STA $46        (Disable second VRAM part of NMI code)
EE/3446:	4CD334  	JMP $34D3      (Exit) (PLB, RTS...)
EE/3449:	A53C    	LDA $3C
EE/344B:	38      	SEC            (Set Carry for subtraction)
EE/344C:	E90010  	SBC #$1000     (Subtract 4096)
EE/344F:	853C    	STA $3C        (Save changes)
EE/3451:	A55A    	LDA $5A
EE/3453:	4A      	LSR A          (Divide by 2)
EE/3454:	4A      	LSR A          (Divide by 4)
EE/3455:	4A      	LSR A          (Divide by 8)
EE/3456:	4A      	LSR A          (Divide by 16)
EE/3457:	18      	CLC            (Clear Carry for addition)
EE/3458:	693F00  	ADC #$003F     (Add 63)
EE/345B:	29FF00  	AND #$00FF     (Remain between 0 and 255)
EE/345E:	855E    	STA $5E
EE/3460:	A55A    	LDA $5A
EE/3462:	4A      	LSR A          (Divide by 2)
EE/3463:	4A      	LSR A          (Divide by 4)
EE/3464:	4A      	LSR A          (Divide by 8)
EE/3465:	3A      	DEC A
EE/3466:	3A      	DEC A
EE/3467:	297E00  	AND #$007E     (Remain between 0 and 126)
EE/346A:	8546    	STA $46        (Set second VRAM pointer for NMI)
EE/346C:	801D    	BRA $348B
EE/346E:	A53C    	LDA $3C
EE/3470:	18      	CLC            (Clear Carry for addition)
EE/3471:	690010  	ADC #$1000     (Add 4096)
EE/3474:	853C    	STA $3C        (Save changes)
EE/3476:	A55A    	LDA $5A
EE/3478:	4A      	LSR A          (Divide by 2)
EE/3479:	4A      	LSR A          (Divide by 4)
EE/347A:	4A      	LSR A          (Divide by 8)
EE/347B:	4A      	LSR A          (Divide by 16)
EE/347C:	29FF00  	AND #$00FF     (Remain between 0 and 255)
EE/347F:	855E    	STA $5E
EE/3481:	A55A    	LDA $5A
EE/3483:	4A      	LSR A          (Divide by 2)
EE/3484:	4A      	LSR A          (Divide by 4)
EE/3485:	4A      	LSR A          (Divide by 8)
EE/3486:	297E00  	AND #$007E     (Remain between 0 and 126)
EE/3489:	8546    	STA $46        (Set second VRAM pointer for NMI)
EE/348B:	A55C    	LDA $5C
EE/348D:	0A      	ASL A          (Multiply by 2)
EE/348E:	0A      	ASL A          (Multiply by 4)
EE/348F:	0A      	ASL A          (Multiply by 8)
EE/3490:	0A      	ASL A          (Multiply by 16)
EE/3491:	2900FF  	AND #$FF00     (Clear low byte)
EE/3494:	A8      	TAY            (Transfer A to Y)
EE/3495:	A94000  	LDA #$0040     (Value for loop counter)
EE/3498:	8566    	STA $66        (Store in general variable)
EE/349A:	B75E    	LDA [$5E],Y
EE/349C:	5A      	PHY            (Save Y)
EE/349D:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/34A0:	0A      	ASL A          (Multiply by 2)
EE/34A1:	0A      	ASL A          (Multiply by 4)
EE/34A2:	A8      	TAY            (Transfer A to Y)
EE/34A3:	E220    	SEP #$20       (8-bit A)
EE/34A5:	B9506F  	LDA $6F50,Y
EE/34A8:	9D506E  	STA $6E50,X
EE/34AB:	B9516F  	LDA $6F51,Y
EE/34AE:	9DD06E  	STA $6ED0,X
EE/34B1:	B9526F  	LDA $6F52,Y
EE/34B4:	9D516E  	STA $6E51,X
EE/34B7:	B9536F  	LDA $6F53,Y
EE/34BA:	9DD16E  	STA $6ED1,X
EE/34BD:	C220    	REP #$20       (16-bit A) (REP #$21...)
EE/34BF:	68      	PLA
EE/34C0:	18      	CLC            (Clear Carry for addition)
EE/34C1:	690001  	ADC #$0100     (Add 256)
EE/34C4:	2900FF  	AND #$FF00
EE/34C7:	A8      	TAY            (Transfer A to Y)
EE/34C8:	8A      	TXA            (Transfer X to A)
EE/34C9:	1A      	INC A          (Increase A)
EE/34CA:	1A      	INC A          (Increase A)
EE/34CB:	297F00  	AND #$007F     (Remain between 0 and 127)
EE/34CE:	AA      	TAX            (Transfer A to X)
EE/34CF:	C666    	DEC $66        (Decrease loop counter)
EE/34D1:	D0C7    	BNE $349A      (Loop unless null)
EE/34D3:	AB      	PLB
EE/34D4:	60      	RTS

Generate a 32x32 world map to be stored in VRAM?
EE/34D5:	E220    	SEP #$20       (8-bit A)
EE/34D7:	C210    	REP #$10       (16-bit indexes)
EE/34D9:	8B      	PHB            (Save data bank)
EE/34DA:	A97E    	LDA #$7E
EE/34DC:	48      	PHA
EE/34DD:	AB      	PLB            (Set data bank to 7E)
EE/34DE:	A97F    	LDA #$7F       (INC A...)
EE/34E0:	8560    	STA $60
EE/34E2:	C220    	REP #$20       (16-bit A)
EE/34E4:	A538    	LDA $38        (Current Y position in pixels)
EE/34E6:	38      	SEC            (Set Carry for subtraction)
EE/34E7:	E90002  	SBC #$0200     (Subtract 512)
EE/34EA:	855C    	STA $5C        (Save it temporarily)
EE/34EC:	0A      	ASL A          (Multiply by 2)
EE/34ED:	0A      	ASL A          (Multiply by 4)
EE/34EE:	0A      	ASL A          (Multiply by 8)
EE/34EF:	0A      	ASL A          (Multiply by 16)
EE/34F0:	2900FF  	AND #$FF00
EE/34F3:	855E    	STA $5E        (Save it temporarily)
EE/34F5:	29003F  	AND #$3F00
EE/34F8:	856A    	STA $6A        (Save it temporarily)
EE/34FA:	A534    	LDA $34        (Current X position in pixels)
EE/34FC:	38      	SEC            (Set Carry for subtraction)
EE/34FD:	E90002  	SBC #$0200     (Subtract 512)
EE/3500:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/3503:	855A    	STA $5A        (Save it temporarily)
EE/3505:	4A      	LSR A          (Divide by 2)
EE/3506:	4A      	LSR A          (Divide by 4)
EE/3507:	4A      	LSR A          (Divide by 8)
EE/3508:	297E00  	AND #$007E
EE/350B:	056A    	ORA $6A
EE/350D:	AA      	TAX            (Transfer A to X)
EE/350E:	A55A    	LDA $5A        (Temporarily saved X position)
EE/3510:	4A      	LSR A          (Divide by 2)
EE/3511:	4A      	LSR A          (Divide by 4)
EE/3512:	4A      	LSR A          (Divide by 8)
EE/3513:	4A      	LSR A          (Divide by 16)
EE/3514:	29FF00  	AND #$00FF     (Remain between 0 and 255)
EE/3517:	A8      	TAY            (Transfer A to Y)
EE/3518:	A94000  	LDA #$0040     (Value for loop counter)
EE/351B:	8566    	STA $66        (Store in general variable)
EE/351D:	A94000  	LDA #$0040
EE/3520:	8568    	STA $68
EE/3522:	B75E    	LDA [$5E],Y
EE/3524:	5A      	PHY            (Save Y)
EE/3525:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/3528:	0A      	ASL A          (Multiply by 2)
EE/3529:	0A      	ASL A          (Multiply by 4)
EE/352A:	A8      	TAY            (Transfer A to Y)
EE/352B:	B9506F  	LDA $6F50,Y
EE/352E:	9D0020  	STA $2000,X
EE/3531:	B9526F  	LDA $6F52,Y
EE/3534:	9D8020  	STA $2080,X
EE/3537:	68      	PLA
EE/3538:	1A      	INC A          (Increase A)
EE/3539:	29FF00  	AND #$00FF
EE/353C:	A8      	TAY            (Transfer A to Y)
EE/353D:	8A      	TXA            (Transfer X to A)
EE/353E:	1A      	INC A          (Increase A)
EE/353F:	1A      	INC A          (Increase A)
EE/3540:	297F3F  	AND #$3F7F
EE/3543:	AA      	TAX            (Transfer A to X)
EE/3544:	C668    	DEC $68
EE/3546:	D0DA    	BNE $3522
EE/3548:	98      	TYA            (Transfer Y to A)
EE/3549:	38      	SEC            (Set Carry for subtraction)
EE/354A:	E94000  	SBC #$0040     (Subtract 64)
EE/354D:	29FF00  	AND #$00FF
EE/3550:	A8      	TAY            (Transfer A to Y)
EE/3551:	8A      	TXA            (Transfer X to A)
EE/3552:	18      	CLC            (Clear Carry for addition)
EE/3553:	690001  	ADC #$0100     (Add 256)
EE/3556:	297F3F  	AND #$3F7F
EE/3559:	AA      	TAX            (Transfer A to X)
EE/355A:	A55E    	LDA $5E
EE/355C:	690001  	ADC #$0100
EE/355F:	855E    	STA $5E        (Save changes)
EE/3561:	C666    	DEC $66        (Decrease loop counter)
EE/3563:	D0B8    	BNE $351D      (Loop unless null)
EE/3565:	AB      	PLB            (Restore data bank)
EE/3566:	9C1521  	STZ $2115      (VRAM pointer increases by a word when $2118 or $2139 is accessed)
EE/3569:	9C1621  	STZ $2116      (Set VRAM pointer to $0000)
EE/356C:	A90018  	LDA #$1800
EE/356F:	8D0043  	STA $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/3572:	A90020  	LDA #$2000
EE/3575:	8D0243  	STA $4302      (Source address)
EE/3578:	A97E00  	LDA #$007E
EE/357B:	8D0443  	STA $4304      (Source bank; 7E/2000)
EE/357E:	A90040  	LDA #$4000
EE/3581:	8D0543  	STA $4305      (Number of bytes: #$4000)
EE/3584:	A90001  	LDA #$0100
EE/3587:	8D0A42  	STA $420A      (Enable DMA channel 0; clear MSB of V-Count timer)
EE/358A:	60      	RTS

Generate a 32x32 Serpent Trench map to be stored in VRAM?
EE/358B:	E220    	SEP #$20       (8-bit A)
EE/358D:	C210    	REP #$10       (16-bit indexes)
EE/358F:	8B      	PHB            (Save data bank)
EE/3590:	A97E    	LDA #$7E
EE/3592:	48      	PHA
EE/3593:	AB      	PLB            (Set data bank to 7E)
EE/3594:	A97F    	LDA #$7F       (INC A...)
EE/3596:	8560    	STA $60
EE/3598:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/359A:	A534    	LDA $34        (Current X position in pixels)
EE/359C:	38      	SEC            (Set Carry for subtraction)
EE/359D:	E90002  	SBC #$0200     (Subtract 512)
EE/35A0:	29FF07  	AND #$07FF     (Remain between 0 and 2047)
EE/35A3:	855A    	STA $5A        (Save it temporarily)
EE/35A5:	A538    	LDA $38        (Current Y position in pixels)
EE/35A7:	38      	SEC            (Set Carry for subtraction)
EE/35A8:	E90002  	SBC #$0200     (Subtract 512)
EE/35AB:	29FF07  	AND #$07FF     (Remain between 0 and 2047)
EE/35AE:	855C    	STA $5C        (Save it temporarily)
EE/35B0:	C220    	REP #$20       (16-bit A)
EE/35B2:	A55A    	LDA $5A        (Temporarily saved X position)
EE/35B4:	4A      	LSR A          (Divide by 2)
EE/35B5:	4A      	LSR A          (Divide by 4)
EE/35B6:	4A      	LSR A          (Divide by 8)
EE/35B7:	297E00  	AND #$007E
EE/35BA:	AA      	TAX            (Transfer A to X)
EE/35BB:	A540    	LDA $40
EE/35BD:	C90010  	CMP #$1000
EE/35C0:	100D    	BPL $35CF
EE/35C2:	C90000  	CMP #$0000     (CMP $00...)
EE/35C5:	302F    	BMI $35F6
EE/35C7:	A90080  	LDA #$8000
EE/35CA:	8544    	STA $44        (Disable first VRAM part of NMI code)
EE/35CC:	4C5036  	JMP $3650
EE/35CF:	A540    	LDA $40
EE/35D1:	38      	SEC            (Set Carry for subtraction)
EE/35D2:	E90010  	SBC #$1000     (Subtract 4096)
EE/35D5:	8540    	STA $40        (Save changes)
EE/35D7:	A55C    	LDA $5C
EE/35D9:	0A      	ASL A          (Multiply by 2)
EE/35DA:	0A      	ASL A          (Multiply by 4)
EE/35DB:	0A      	ASL A          (Multiply by 8)
EE/35DC:	18      	CLC            (Clear Carry for addition)
EE/35DD:	69801F  	ADC #$1F80     (Add 8064)
EE/35E0:	29803F  	AND #$3F80
EE/35E3:	855E    	STA $5E
EE/35E5:	A55C    	LDA $5C
EE/35E7:	0A      	ASL A          (Multiply by 2)
EE/35E8:	0A      	ASL A          (Multiply by 4)
EE/35E9:	0A      	ASL A          (Multiply by 8)
EE/35EA:	0A      	ASL A          (Multiply by 16)
EE/35EB:	38      	SEC            (Set Carry for subtraction)
EE/35EC:	E90001  	SBC #$0100     (Subtract 256)
EE/35EF:	29003F  	AND #$3F00
EE/35F2:	8544    	STA $44        (Set first VRAM pointer for NMI)
EE/35F4:	801D    	BRA $3613
EE/35F6:	A540    	LDA $40
EE/35F8:	18      	CLC            (Clear Carry for addition)
EE/35F9:	690010  	ADC #$1000     (Add 4096)
EE/35FC:	8540    	STA $40
EE/35FE:	A55C    	LDA $5C
EE/3600:	0A      	ASL A          (Multiply by 2)
EE/3601:	0A      	ASL A          (Multiply by 4)
EE/3602:	0A      	ASL A          (Multiply by 8)
EE/3603:	29803F  	AND #$3F80
EE/3606:	855E    	STA $5E
EE/3608:	A55C    	LDA $5C
EE/360A:	0A      	ASL A          (Multiply by 2)
EE/360B:	0A      	ASL A          (Multiply by 4)
EE/360C:	0A      	ASL A          (Multiply by 8)
EE/360D:	0A      	ASL A          (Multiply by 16)
EE/360E:	29003F  	AND #$3F00
EE/3611:	8544    	STA $44        (Set first VRAM pointer for NMI)
EE/3613:	A55A    	LDA $5A
EE/3615:	4A      	LSR A          (Divide by 2)
EE/3616:	4A      	LSR A          (Divide by 4)
EE/3617:	4A      	LSR A          (Divide by 8)
EE/3618:	4A      	LSR A          (Divide by 16)
EE/3619:	297F00  	AND #$007F     (Remain between 0 and 127)
EE/361C:	A8      	TAY            (Transfer A to Y)
EE/361D:	A94000  	LDA #$0040     (Value for loop counter)
EE/3620:	8566    	STA $66        (Store in general variable)
EE/3622:	B75E    	LDA [$5E],Y
EE/3624:	5A      	PHY            (Save Y)
EE/3625:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/3628:	0A      	ASL A          (Multiply by 2)
EE/3629:	0A      	ASL A          (Multiply by 4)
EE/362A:	A8      	TAY            (Transfer A to Y)
EE/362B:	B9506F  	LDA $6F50,Y
EE/362E:	9D506D  	STA $6D50,X
EE/3631:	B9526F  	LDA $6F52,Y
EE/3634:	9DD06D  	STA $6DD0,X
EE/3637:	68      	PLA
EE/3638:	1A      	INC A          (Increase A)
EE/3639:	297F00  	AND #$007F     (Remain between 0 and 127)
EE/363C:	A8      	TAY            (Transfer A to Y)
EE/363D:	8A      	TXA            (Transfer X to A)
EE/363E:	1A      	INC A          (Increase A)
EE/363F:	1A      	INC A          (Increase A)
EE/3640:	297F00  	AND #$007F     (Remain between 0 and 127)
EE/3643:	AA      	TAX            (Transfer A to X)
EE/3644:	C666    	DEC $66        (Decrease loop counter)
EE/3646:	D0DA    	BNE $3622      (Loop unless null)
EE/3648:	A90080  	LDA #$8000
EE/364B:	8546    	STA $46        (Disable second VRAM part of NMI code)
EE/364D:	4CF836  	JMP $36F8      (PLB, RTS...)
EE/3650:	C220    	REP #$20       (16-bit A)
EE/3652:	A55C    	LDA $5C
EE/3654:	4A      	LSR A          (Divide by 2)
EE/3655:	4A      	LSR A          (Divide by 4)
EE/3656:	4A      	LSR A          (Divide by 8)
EE/3657:	297E00  	AND #$007E     (Remain between 0 and 126)
EE/365A:	AA      	TAX            (Transfer A to X)
EE/365B:	A53C    	LDA $3C
EE/365D:	C90010  	CMP #$1000
EE/3660:	100D    	BPL $366F
EE/3662:	C90000  	CMP #$0000     (CMP $00...)
EE/3665:	302D    	BMI $3694
EE/3667:	A90080  	LDA #$8000
EE/366A:	8546    	STA $46        (Disable second VRAM part of NMI code)
EE/366C:	4CF836  	JMP $36F8      (PLB, RTS...)
EE/366F:	A53C    	LDA $3C
EE/3671:	38      	SEC            (Set Carry for subtraction)
EE/3672:	E90010  	SBC #$1000     (Subtract 4096)
EE/3675:	853C    	STA $3C
EE/3677:	A55A    	LDA $5A
EE/3679:	4A      	LSR A          (Divide by 2)
EE/367A:	4A      	LSR A          (Divide by 4)
EE/367B:	4A      	LSR A          (Divide by 8)
EE/367C:	4A      	LSR A          (Divide by 16)
EE/367D:	18      	CLC            (Clear Carry for addition)
EE/367E:	693F00  	ADC #$003F     (Add 63)
EE/3681:	297F00  	AND #$007F
EE/3684:	855E    	STA $5E
EE/3686:	A55A    	LDA $5A
EE/3688:	4A      	LSR A          (Divide by 2)
EE/3689:	4A      	LSR A          (Divide by 4)
EE/368A:	4A      	LSR A          (Divide by 8)
EE/368B:	3A      	DEC A
EE/368C:	3A      	DEC A
EE/368D:	297E00  	AND #$007E
EE/3690:	8546    	STA $46        (Set second VRAM pointer for NMI)
EE/3692:	801D    	BRA $36B1
EE/3694:	A53C    	LDA $3C
EE/3696:	18      	CLC            (Clear Carry for addition)
EE/3697:	690010  	ADC #$1000     (Add 4096)
EE/369A:	853C    	STA $3C
EE/369C:	A55A    	LDA $5A
EE/369E:	4A      	LSR A          (Divide by 2)
EE/369F:	4A      	LSR A          (Divide by 4)
EE/36A0:	4A      	LSR A          (Divide by 8)
EE/36A1:	4A      	LSR A          (Divide by 16)
EE/36A2:	297F00  	AND #$007F
EE/36A5:	855E    	STA $5E
EE/36A7:	A55A    	LDA $5A
EE/36A9:	4A      	LSR A          (Divide by 2)
EE/36AA:	4A      	LSR A          (Divide by 4)
EE/36AB:	4A      	LSR A          (Divide by 8)
EE/36AC:	297E00  	AND #$007E
EE/36AF:	8546    	STA $46        (Set second VRAM pointer for NMI)
EE/36B1:	A55C    	LDA $5C
EE/36B3:	0A      	ASL A          (Multiply by 2)
EE/36B4:	0A      	ASL A          (Multiply by 4)
EE/36B5:	0A      	ASL A          (Multiply by 8)
EE/36B6:	29803F  	AND #$3F80
EE/36B9:	A8      	TAY            (Transfer A to Y)
EE/36BA:	A94000  	LDA #$0040     (Value for loop counter)
EE/36BD:	8566    	STA $66        (Store in general variable)
EE/36BF:	B75E    	LDA [$5E],Y
EE/36C1:	5A      	PHY
EE/36C2:	29FF00  	AND #$00FF
EE/36C5:	0A      	ASL A          (Multiply by 2)
EE/36C6:	0A      	ASL A          (Multiply by 4)
EE/36C7:	A8      	TAY            (Transfer A to Y)
EE/36C8:	E220    	SEP #$20       (8-bit A)
EE/36CA:	B9506F  	LDA $6F50,Y
EE/36CD:	9D506E  	STA $6E50,X
EE/36D0:	B9516F  	LDA $6F51,Y
EE/36D3:	9DD06E  	STA $6ED0,X
EE/36D6:	B9526F  	LDA $6F52,Y
EE/36D9:	9D516E  	STA $6E51,X
EE/36DC:	B9536F  	LDA $6F53,Y
EE/36DF:	9DD16E  	STA $6ED1,X
EE/36E2:	C220    	REP #$20       (16-bit A)
EE/36E4:	68      	PLA
EE/36E5:	18      	CLC            (Clear Carry for addition)
EE/36E6:	698000  	ADC #$0080     (Add 128)
EE/36E9:	29803F  	AND #$3F80
EE/36EC:	A8      	TAY            (Transfer A to Y)
EE/36ED:	8A      	TXA            (Transfer X to A)
EE/36EE:	1A      	INC A
EE/36EF:	1A      	INC A
EE/36F0:	297F00  	AND #$007F
EE/36F3:	AA      	TAX            (Transfer A to X)
EE/36F4:	C666    	DEC $66        (Decrease loop counter)
EE/36F6:	D0C7    	BNE $36BF      (Loop unless null)
EE/36F8:	AB      	PLB
EE/36F9:	60      	RTS

Generate a 32x32 Serpent Trench map to be stored in VRAM?
EE/36FA:	E220    	SEP #$20       (8-bit A)
EE/36FC:	C210    	REP #$10       (16-bit indexes)
EE/36FE:	8B      	PHB            (Save data bank)
EE/36FF:	A97E    	LDA #$7E
EE/3701:	48      	PHA
EE/3702:	AB      	PLB            (Set data bank to 7E)
EE/3703:	A97F    	LDA #$7F       (INC A...)
EE/3705:	8560    	STA $60
EE/3707:	C220    	REP #$20       (16-bit A)
EE/3709:	A538    	LDA $38        (Current Y position in pixels)
EE/370B:	38      	SEC            (Set Carry for subtraction)
EE/370C:	E90002  	SBC #$0200     (Subtract 512)
EE/370F:	29FF07  	AND #$07FF     (Cap at 2047)
EE/3712:	855C    	STA $5C        (Save it temporarily)
EE/3714:	0A      	ASL A          (Multiply by 2)
EE/3715:	0A      	ASL A          (Multiply by 4)
EE/3716:	0A      	ASL A          (Multiply by 8)
EE/3717:	29803F  	AND #$3F80
EE/371A:	855E    	STA $5E        (Save it temporarily)
EE/371C:	0A      	ASL A          (Multiply by 2)
EE/371D:	29003F  	AND #$3F00
EE/3720:	856A    	STA $6A        (Save it temporarily)
EE/3722:	A534    	LDA $34        (Current X position in pixels)
EE/3724:	38      	SEC            (Set Carry for subtraction)
EE/3725:	E90002  	SBC #$0200     (Subtract 512)
EE/3728:	29FF07  	AND #$07FF     (Cap at 2047)
EE/372B:	855A    	STA $5A        (Save it temporarily)
EE/372D:	4A      	LSR A          (Divide by 2)
EE/372E:	4A      	LSR A          (Divide by 4)
EE/372F:	4A      	LSR A          (Divide by 8)
EE/3730:	297E00  	AND #$007E
EE/3733:	056A    	ORA $6A
EE/3735:	AA      	TAX            (Transfer A to X)
EE/3736:	A55A    	LDA $5A
EE/3738:	4A      	LSR A          (Divide by 2)
EE/3739:	4A      	LSR A          (Divide by 4)
EE/373A:	4A      	LSR A          (Divide by 8)
EE/373B:	4A      	LSR A          (Divide by 16)
EE/373C:	297F00  	AND #$007F
EE/373F:	A8      	TAY            (Transfer A to Y)
EE/3740:	A94000  	LDA #$0040     (Value for loop counter)
EE/3743:	8566    	STA $66        (Store in general variable)
EE/3745:	A94000  	LDA #$0040
EE/3748:	8568    	STA $68
EE/374A:	B75E    	LDA [$5E],Y
EE/374C:	5A      	PHY            (Push Y on stack)
EE/374D:	29FF00  	AND #$00FF
EE/3750:	0A      	ASL A          (Multiply by 2)
EE/3751:	0A      	ASL A          (Multiply by 4)
EE/3752:	A8      	TAY            (Transfer A to Y)
EE/3753:	B9506F  	LDA $6F50,Y
EE/3756:	9D0020  	STA $2000,X
EE/3759:	B9526F  	LDA $6F52,Y
EE/375C:	9D8020  	STA $2080,X
EE/375F:	68      	PLA            (Pull the value from EE/374C)
EE/3760:	1A      	INC A
EE/3761:	297F00  	AND #$007F
EE/3764:	A8      	TAY            (Transfer A to Y)
EE/3765:	8A      	TXA            (Transfer X to A)
EE/3766:	1A      	INC A
EE/3767:	1A      	INC A
EE/3768:	297F3F  	AND #$3F7F
EE/376B:	AA      	TAX            (Transfer A to X)
EE/376C:	C668    	DEC $68
EE/376E:	D0DA    	BNE $374A
EE/3770:	98      	TYA            (Transfer Y to A)
EE/3771:	38      	SEC            (Set Carry for subtraction)
EE/3772:	E94000  	SBC #$0040     (Subtract 64)
EE/3775:	297F00  	AND #$007F
EE/3778:	A8      	TAY            (Transfer A to Y)
EE/3779:	8A      	TXA            (Transfer X to A)
EE/377A:	18      	CLC            (Clear Carry for addition)
EE/377B:	690001  	ADC #$0100     (Add 256)
EE/377E:	297F3F  	AND #$3F7F
EE/3781:	AA      	TAX            (Transfer A to X)
EE/3782:	A55E    	LDA $5E
EE/3784:	698000  	ADC #$0080
EE/3787:	29803F  	AND #$3F80
EE/378A:	855E    	STA $5E
EE/378C:	C666    	DEC $66        (Decrease loop counter)
EE/378E:	D0B5    	BNE $3745      (Loop unless null)
EE/3790:	AB      	PLB            (Restore data bank)
EE/3791:	9C1521  	STZ $2115      (VRAM pointer increases by a word when $2118 or $2139 is accessed)
EE/3794:	9C1621  	STZ $2116      (Set VRAM pointer to $0000)
EE/3797:	A90018  	LDA #$1800
EE/379A:	8D0043  	STA $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/379D:	A90020  	LDA #$2000
EE/37A0:	8D0243  	STA $4302      (Source address)
EE/37A3:	A97E00  	LDA #$007E
EE/37A6:	8D0443  	STA $4304      (Source bank; 7E/2000)
EE/37A9:	A90040  	LDA #$4000
EE/37AC:	8D0543  	STA $4305      (Number of bytes: #$4000)
EE/37AF:	A90001  	LDA #$0100
EE/37B2:	8D0A42  	STA $420A      (Enable DMA channel 0; clear most significant bit of V-Count timer)
EE/37B5:	60      	RTS

Adjust the sky's position
EE/37B6:	E220    	SEP #$20       (8-bit A)
EE/37B8:	8B      	PHB            (Save data bank)
EE/37B9:	A97E    	LDA #$7E
EE/37BB:	48      	PHA
EE/37BC:	AB      	PLB            (Set data bank to 7E)
EE/37BD:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/37BF:	C210    	REP #$10       (16-bit indexes)
EE/37C1:	A583    	LDA $83        (Sky rotation variable)
EE/37C3:	D003    	BNE $37C8      (Branch if not null)
EE/37C5:	4C5E38  	JMP $385E
EE/37C8:	304A    	BMI $3814      (Branch if the sky is rotated clockwise)
EE/37CA:	EB      	XBA            (Exchange B and A)
EE/37CB:	4A      	LSR A          (Divide by 2)
EE/37CC:	4A      	LSR A          (Divide by 4)
EE/37CD:	4A      	LSR A          (Divide by 8)
EE/37CE:	AA      	TAX            (Transfer A to X)
EE/37CF:	A9E000  	LDA #$00E0
EE/37D2:	38      	SEC            (Set Carry for subtraction)
EE/37D3:	E587    	SBC $87
EE/37D5:	18      	CLC            (Clear Carry for addition)
EE/37D6:	690800  	ADC #$0008     (Add 8)
EE/37D9:	4A      	LSR A          (Divide by 2)
EE/37DA:	4A      	LSR A          (Divide by 4)
EE/37DB:	4A      	LSR A          (Divide by 8)
EE/37DC:	8566    	STA $66
EE/37DE:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/37E1:	BF62B87E	LDA $7EB862,X
EE/37E5:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/37E8:	8558    	STA $58        (Save it temporarily)
EE/37EA:	A570    	LDA $70
EE/37EC:	38      	SEC            (Set Carry for subtraction)
EE/37ED:	E558    	SBC $58
EE/37EF:	990E69  	STA $690E,Y
EE/37F2:	991069  	STA $6910,Y
EE/37F5:	991269  	STA $6912,Y
EE/37F8:	991469  	STA $6914,Y
EE/37FB:	991669  	STA $6916,Y
EE/37FE:	991869  	STA $6918,Y
EE/3801:	991A69  	STA $691A,Y
EE/3804:	991C69  	STA $691C,Y
EE/3807:	98      	TYA            (Transfer Y to A)
EE/3808:	18      	CLC            (Clear Carry for addition)
EE/3809:	691000  	ADC #$0010     (Add 16)
EE/380C:	A8      	TAY            (Transfer A to Y)
EE/380D:	E8      	INX
EE/380E:	C666    	DEC $66        (Decrease loop counter)
EE/3810:	D0CF    	BNE $37E1      (Loop unless null)
EE/3812:	8060    	BRA $3874      (Skip code for clockwise rotation)
EE/3814:	49FFFF  	EOR #$FFFF     (Make value positive)
EE/3817:	1A      	INC A          (Add one)
EE/3818:	EB      	XBA            (Exchange B and A)
EE/3819:	4A      	LSR A          (Divide by 2)
EE/381A:	4A      	LSR A          (Divide by 4)
EE/381B:	4A      	LSR A          (Divide by 8)
EE/381C:	AA      	TAX            (Transfer A to X)
EE/381D:	A9E000  	LDA #$00E0
EE/3820:	38      	SEC            (Set Carry for subtraction)
EE/3821:	E587    	SBC $87
EE/3823:	18      	CLC            (Clear Carry for addition)
EE/3824:	690800  	ADC #$0008     (Add 8)
EE/3827:	4A      	LSR A          (Divide by 2)
EE/3828:	4A      	LSR A          (Divide by 4)
EE/3829:	4A      	LSR A          (Divide by 8)
EE/382A:	8566    	STA $66
EE/382C:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/382F:	BF62B87E	LDA $7EB862,X
EE/3833:	29FF00  	AND #$00FF
EE/3836:	18      	CLC            (Clear Carry for addition)
EE/3837:	6570    	ADC $70
EE/3839:	990E69  	STA $690E,Y
EE/383C:	991069  	STA $6910,Y
EE/383F:	991269  	STA $6912,Y
EE/3842:	991469  	STA $6914,Y
EE/3845:	991669  	STA $6916,Y
EE/3848:	991869  	STA $6918,Y
EE/384B:	991A69  	STA $691A,Y
EE/384E:	991C69  	STA $691C,Y
EE/3851:	98      	TYA            (Transfer Y to A)
EE/3852:	18      	CLC            (Clear Carry for addition)
EE/3853:	691000  	ADC #$0010     (Add 16)
EE/3856:	A8      	TAY            (Transfer A to Y)
EE/3857:	E8      	INX
EE/3858:	C666    	DEC $66        (Decrease loop counter)
EE/385A:	D0D3    	BNE $382F      (Loop unless null)
EE/385C:	8016    	BRA $3874
EE/385E:	A9E000  	LDA #$00E0
EE/3861:	38      	SEC            (Set Carry for subtraction)
EE/3862:	E587    	SBC $87
EE/3864:	F00E    	BEQ $3874
EE/3866:	AA      	TAX            (Transfer A to X)
EE/3867:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/386A:	A570    	LDA $70
EE/386C:	990E69  	STA $690E,Y
EE/386F:	C8      	INY
EE/3870:	C8      	INY
EE/3871:	CA      	DEX
EE/3872:	D0F8    	BNE $386C
EE/3874:	A9E000  	LDA #$00E0
EE/3877:	38      	SEC            (Set Carry for subtraction)
EE/3878:	E587    	SBC $87
EE/387A:	098000  	ORA #$0080
EE/387D:	8DBB00  	STA $00BB
EE/3880:	A90E69  	LDA #$690E
EE/3883:	8DBC00  	STA $00BC
EE/3886:	AB      	PLB
EE/3887:	60      	RTS

Draw the gradient overlay beneath the sky (includes the Serpent Trench)
EE/3888:	E220    	SEP #$20       (8-bit A)
EE/388A:	C210    	REP #$10       (16-bit indexes)
EE/388C:	8B      	PHB            (Save data bank)
EE/388D:	A97E    	LDA #$7E
EE/388F:	48      	PHA
EE/3890:	AB      	PLB            (Set data bank to 7E)
EE/3891:	C220    	REP #$20       (16-bit A)
EE/3893:	A583    	LDA $83        (Sky rotation variable)
EE/3895:	D003    	BNE $389A      (Skip next instruction if nonzero)
EE/3897:	4CC739  	JMP $39C7
EE/389A:	1003    	BPL $389F
EE/389C:	4C3339  	JMP $3933
EE/389F:	EB      	XBA            (Exchange B and A)
EE/38A0:	4A      	LSR A          (Divide by 2)
EE/38A1:	4A      	LSR A          (Divide by 4)
EE/38A2:	4A      	LSR A          (Divide by 8)
EE/38A3:	AA      	TAX            (Transfer A to X)
EE/38A4:	A9C000  	LDA #$00C0
EE/38A7:	38      	SEC            (Set Carry for subtraction)
EE/38A8:	E587    	SBC $87
EE/38AA:	18      	CLC            (Clear Carry for addition)
EE/38AB:	6583    	ADC $83        (Add to sky rotation variable)
EE/38AD:	8558    	STA $58        (Save it temporarily)
EE/38AF:	E220    	SEP #$20       (8-bit A)
EE/38B1:	A90F    	LDA #$0F       (Value for loop counter)
EE/38B3:	8566    	STA $66        (Store in general variable)
EE/38B5:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/38B8:	BF62B87E	LDA $7EB862,X
EE/38BC:	E8      	INX
EE/38BD:	855A    	STA $5A        (Save it temporarily)
EE/38BF:	A558    	LDA $58
EE/38C1:	99016C  	STA $6C01,Y
EE/38C4:	18      	CLC            (Clear Carry for addition)
EE/38C5:	6910    	ADC #$10       (Add 16)
EE/38C7:	993D6C  	STA $6C3D,Y
EE/38CA:	6910    	ADC #$10
EE/38CC:	99796C  	STA $6C79,Y
EE/38CF:	6910    	ADC #$10
EE/38D1:	99B56C  	STA $6CB5,Y
EE/38D4:	6910    	ADC #$10
EE/38D6:	99F16C  	STA $6CF1,Y
EE/38D9:	BF62B87E	LDA $7EB862,X
EE/38DD:	C55A    	CMP $5A
EE/38DF:	F01F    	BEQ $3900
EE/38E1:	855A    	STA $5A
EE/38E3:	C658    	DEC $58
EE/38E5:	A901    	LDA #$01
EE/38E7:	99026C  	STA $6C02,Y
EE/38EA:	A905    	LDA #$05
EE/38EC:	993E6C  	STA $6C3E,Y
EE/38EF:	A909    	LDA #$09
EE/38F1:	997A6C  	STA $6C7A,Y
EE/38F4:	A90D    	LDA #$0D
EE/38F6:	99B66C  	STA $6CB6,Y
EE/38F9:	A921    	LDA #$21
EE/38FB:	99F26C  	STA $6CF2,Y
EE/38FE:	8018    	BRA $3918
EE/3900:	7B      	TDC            (Zero A)
EE/3901:	99026C  	STA $6C02,Y
EE/3904:	A904    	LDA #$04
EE/3906:	993E6C  	STA $6C3E,Y
EE/3909:	A908    	LDA #$08
EE/390B:	997A6C  	STA $6C7A,Y
EE/390E:	A90C    	LDA #$0C
EE/3910:	99B66C  	STA $6CB6,Y
EE/3913:	A920    	LDA #$20
EE/3915:	99F26C  	STA $6CF2,Y
EE/3918:	E8      	INX
EE/3919:	BF62B87E	LDA $7EB862,X
EE/391D:	C55A    	CMP $5A
EE/391F:	F004    	BEQ $3925
EE/3921:	855A    	STA $5A
EE/3923:	C658    	DEC $58
EE/3925:	C666    	DEC $66        (Decrease loop counter)
EE/3927:	F007    	BEQ $3930      (Branch if null)
EE/3929:	C8      	INY
EE/392A:	C8      	INY
EE/392B:	C8      	INY
EE/392C:	C8      	INY
EE/392D:	E8      	INX
EE/392E:	808F    	BRA $38BF      (Loop)
EE/3930:	4CFD39  	JMP $39FD      (PLB, RTS...)
EE/3933:	49FFFF    	EOR #$FFFF     (Make value positive)
EE/3936:	1A		ASL A          (Multiply by 2)
EE/3937:	EB		XBA            (Exchange B and A)
EE/3938:	4A		LSR A          (Divide by 2)
EE/3939:	4A      	LSR A          (Divide by 4)
EE/393A:	4A      	LSR A          (Divide by 8)
EE/393B:	AA      	TAX            (Transfer A to X)
EE/393C:	A9C000    	LDA #$00C0
EE/393F:	38      	SEC            (Set Carry for subtraction)
EE/3940:	E587    	SBC $87
EE/3942:	8558    	STA $58        (Save it temporarily)
EE/3944:	E220    	SEP #$20       (8-bit A)
EE/3946:	A90F    	LDA #$0F       (Value for loop counter)
EE/3948:	8566    	STA $66        (Store in general variable)
EE/394A:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/394D:	BF62B87E	LDA $7EB862,X
EE/3951:	E8      	INX
EE/3952:	855A    	STA $5A        (Save it temporarily)
EE/3954:	BF62B87E	LDA $7EB862,X
EE/3958:	C55A    	CMP $5A
EE/395A:	F01F    	BEQ $397B
EE/395C:	855A    	STA $5A        (Save it temporarily)
EE/395E:	E658    	INC $58
EE/3960:	A902    	LDA #$02
EE/3962:	99026C  	STA $6C02,Y
EE/3965:	A906    	LDA #$06
EE/3967:	993E6C  	STA $6C3E,Y
EE/396A:	A90A    	LDA #$0A
EE/396C:	997A6C  	STA $6C7A,Y
EE/396F:	A90E    	LDA #$0E
EE/3971:	99B66C  	STA $6CB6,Y
EE/3974:	A922    	LDA #$22
EE/3976:	99F26C  	STA $6CF2,Y
EE/3979:	8018    	BRA $3993
EE/397B:	7B      	TDC            (Zero A)
EE/397C:	99026C  	STA $6C02,Y
EE/397F:	A904    	LDA #$04
EE/3981:	993E6C  	STA $6C3E,Y
EE/3984:	A908    	LDA #$08
EE/3986:	997A6C  	STA $6C7A,Y
EE/3989:	A90C    	LDA #$0C
EE/398B:	99B66C  	STA $6CB6,Y
EE/398E:	A920    	LDA #$20
EE/3990:	99F26C  	STA $6CF2,Y
EE/3993:	A558    	LDA $58
EE/3995:	99016C  	STA $6C01,Y
EE/3998:	18      	CLC            (Clear Carry for addition)
EE/3999:	6910    	ADC #$10       (Add 16)
EE/399B:	993D6C  	STA $6C3D,Y
EE/399E:	6910    	ADC #$10
EE/39A0:	99796C  	STA $6C79,Y
EE/39A3:	6910    	ADC #$10
EE/39A5:	99B56C  	STA $6CB5,Y
EE/39A8:	6910    	ADC #$10
EE/39AA:	99F16C  	STA $6CF1,Y
EE/39AD:	E8      	INX
EE/39AE:	BF62B87E	LDA $7EB862,X
EE/39B2:	C55A    	CMP $5A
EE/39B4:	F004    	BEQ $39BA
EE/39B6:	855A    	STA $5A
EE/39B8:	E658    	INC $58
EE/39BA:	C666    	DEC $66        (Decrease loop counter)
EE/39BC:	F007    	BEQ $39C5      (Branch if null)
EE/39BE:	C8      	INY
EE/39BF:	C8      	INY
EE/39C0:	C8      	INY
EE/39C1:	C8      	INY
EE/39C2:	E8      	INX
EE/39C3:	808F    	BRA $3954      (Loop)
EE/39C5:	8036    	BRA $39FD      (Exit)
EE/39C7:	A9C000  	LDA #$00C0
EE/39CA:	38      	SEC            (Set Carry for subtraction)
EE/39CB:	E587    	SBC $87
EE/39CD:	8558    	STA $58        (Save it temporarily)
EE/39CF:	E220    	SEP #$20       (8-bit A)
EE/39D1:	645A    	STZ $5A
EE/39D3:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/39D6:	A20F00  	LDX #$000F
EE/39D9:	A558    	LDA $58
EE/39DB:	99016C  	STA $6C01,Y
EE/39DE:	A55A    	LDA $5A
EE/39E0:	99026C  	STA $6C02,Y
EE/39E3:	C8      	INY
EE/39E4:	C8      	INY
EE/39E5:	C8      	INY
EE/39E6:	C8      	INY
EE/39E7:	CA      	DEX
EE/39E8:	D0EF    	BNE $39D9
EE/39EA:	18      	CLC            (Clear Carry for addition)
EE/39EB:	6914    	ADC #$14       (Add 20)
EE/39ED:	292F    	AND #$2F
EE/39EF:	855A    	STA $5A
EE/39F1:	A558    	LDA $58
EE/39F3:	18      	CLC            (Clear Carry for addition)
EE/39F4:	6910    	ADC #$10       (Add 16)
EE/39F6:	8558    	STA $58        (Save changes)
EE/39F8:	C02C01  	CPY #$012C
EE/39FB:	D0D9    	BNE $39D6
EE/39FD:	AB      	PLB
EE/39FE:	60      	RTS

Sky rotation mechanics
EE/39FF:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/3A01:	C210    	REP #$10       (16-bit indexes)
EE/3A03:	9C1521  	STZ $2115      (VRAM pointer increases by a word when $2118 or $2139 is accessed)
EE/3A06:	A9204C  	LDA #$4C20
EE/3A09:	8D1621  	STA $2116      (Set VRAM pointer to $9840)
EE/3A0C:	A583    	LDA $83        (Sky rotation variable)
EE/3A0E:	F059    	BEQ $3A69      (Branch if zero)
EE/3A10:	302C    	BMI $3A3E
EE/3A12:	855A    	STA $5A
EE/3A14:	EB      	XBA            (Exchange B and A)
EE/3A15:	4A      	LSR A          (Divide by 2)
EE/3A16:	4A      	LSR A          (Divide by 4)
EE/3A17:	4A      	LSR A          (Divide by 8)
EE/3A18:	AA      	TAX            (Transfer A to X)
EE/3A19:	A587    	LDA $87
EE/3A1B:	E220    	SEP #$20       (8-bit A) (SEP #$21...)
EE/3A1D:	38      	SEC            (Set Carry for subtraction)
EE/3A1E:	E964    	SBC #$64       (Subtract 100)
EE/3A20:	38      	SEC            (Set Carry for subtraction)
EE/3A21:	E55A    	SBC $5A
EE/3A23:	8558    	STA $58        (Save it temporarily)
EE/3A25:	8D1021  	STA $2110      (BG2 vertical scroll, low byte)
EE/3A28:	9C1021  	STZ $2110      (Zero the high byte)
EE/3A2B:	A02000  	LDY #$0020
EE/3A2E:	A558    	LDA $58
EE/3A30:	18      	CLC            (Clear Carry for addition)
EE/3A31:	7F62B87E	ADC $7EB862,X
EE/3A35:	8D1821  	STA $2118      (VRAM data write)
EE/3A38:	E8      	INX
EE/3A39:	88      	DEY
EE/3A3A:	D0F2    	BNE $3A2E
EE/3A3C:	8041    	BRA $3A7F      (RTS...)
EE/3A3E:	49FFFF  	EOR #$FFFF     (Make value positive)
EE/3A41:	1A      	INC A          (Add one)
EE/3A42:	EB      	XBA            (Exchange B and A)
EE/3A43:	4A      	LSR A          (Divide by 2)
EE/3A44:	4A      	LSR A          (Divide by 4)
EE/3A45:	4A      	LSR A          (Divide by 8)
EE/3A46:	AA      	TAX            (Transfer A to X)
EE/3A47:	A587    	LDA $87
EE/3A49:	E220    	SEP #$20       (8-bit A) (SEP #$21...)
EE/3A4B:	38      	SEC            (Set Carry for subtraction)
EE/3A4C:	E964    	SBC #$64       (Subtract 100)
EE/3A4E:	8558    	STA $58        (Save it temporarily)
EE/3A50:	8D1021  	STA $2110      (BG2 vertical scroll, low byte)
EE/3A53:	9C1021  	STZ $2110      (Zero the high byte)
EE/3A56:	A02000  	LDY #$0020
EE/3A59:	A558    	LDA $58
EE/3A5B:	38      	SEC            (Set Carry for subtraction)
EE/3A5C:	FF62B87E	SBC $7EB862,X
EE/3A60:	8D1821  	STA $2118      (VRAM data write)
EE/3A63:	E8      	INX
EE/3A64:	88      	DEY
EE/3A65:	D0F2    	BNE $3A59
EE/3A67:	8016    	BRA $3A7F      (RTS...)
EE/3A69:	A587    	LDA $87
EE/3A6B:	E220    	SEP #$20       (8-bit A) (SEP #$21...)
EE/3A6D:	38      	SEC            (Set Carry for subtraction)
EE/3A6E:	E964    	SBC #$64       (Subtract 100)
EE/3A70:	8D1021  	STA $2110      (BG2 vertical scroll, low byte)
EE/3A73:	9C1021  	STZ $2110      (BG2 vertical scroll, high byte)
EE/3A76:	A02000  	LDY #$0020
EE/3A79:	8D1821  	STA $2118      (VRAM data write)
EE/3A7C:	88      	DEY
EE/3A7D:	D0FA    	BNE $3A79
EE/3A7F:	60      	RTS

Mode 7 rendering for vehicle mode
EE/3A80:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/3A82:	C210    	REP #$10       (16-bit indexes)
EE/3A84:	646B    	STZ $6B
EE/3A86:	646E    	STZ $6E
EE/3A88:	A587    	LDA $87
EE/3A8A:	C9E100  	CMP #$00E1
EE/3A8D:	900D    	BCC $3A9C
EE/3A8F:	A9C001  	LDA #$01C0
EE/3A92:	38      	SEC            (Set Carry for subtraction)
EE/3A93:	E587    	SBC $87
EE/3A95:	8589    	STA $89
EE/3A97:	A9E000  	LDA #$00E0
EE/3A9A:	8002    	BRA $3A9E      (Skip next instruction)
EE/3A9C:	8589    	STA $89
EE/3A9E:	0A      	ASL A          (Multiply by 2)
EE/3A9F:	AA      	TAX            (Transfer A to X)
EE/3AA0:	18      	CLC            (Clear Carry for addition)
EE/3AA1:	694001  	ADC #$0140     (Add 320)
EE/3AA4:	85A0    	STA $A0
EE/3AA6:	85B5    	STA $B5
EE/3AA8:	69F800  	ADC #$00F8
EE/3AAB:	85A3    	STA $A3
EE/3AAD:	85B8    	STA $B8
EE/3AAF:	8A      	TXA            (Transfer X to A)
EE/3AB0:	690003  	ADC #$0300
EE/3AB3:	85A7    	STA $A7
EE/3AB5:	69F800  	ADC #$00F8
EE/3AB8:	85AA    	STA $AA
EE/3ABA:	8A      	TXA            (Transfer X to A)
EE/3ABB:	69C004  	ADC #$04C0
EE/3ABE:	85AE    	STA $AE
EE/3AC0:	69F800  	ADC #$00F8
EE/3AC3:	85B1    	STA $B1
EE/3AC5:	C220    	REP #$20       (...)
EE/3AC7:	E210    	SEP #$10       (8-bit indexes) (SEP #$11...)
EE/3AC9:	A689    	LDX $89
EE/3ACB:	A58F    	LDA $8F
EE/3ACD:	38      	SEC            (Set Carry for subtraction)
EE/3ACE:	E58D    	SBC $8D
EE/3AD0:	B004    	BCS $3AD6
EE/3AD2:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3AD5:	1A      	INC A          (Add one)
EE/3AD6:	08      	PHP            (Save Carry flag)
EE/3AD7:	8D0442  	STA $4204      (Save as dividend)
EE/3ADA:	8E0642  	STX $4206      (Store X to divisor)
EE/3ADD:	AD7300  	LDA $0073      (Vehicle direction)
EE/3AE0:	C9B400  	CMP #$00B4     (Compare to 180; south)
EE/3AE3:	9003    	BCC $3AE8      (Branch if smaller; facing western hemisphere)
EE/3AE5:	E9B400  	SBC #$00B4     (Subtract 180)
EE/3AE8:	AA      	TAX            (Transfer A to X)
EE/3AE9:	BFF1FEEF	LDA $EFFEF1,X
EE/3AED:	859B    	STA $9B
EE/3AEF:	BF4BFFEF	LDA $EFFF4B,X
EE/3AF3:	859D    	STA $9D
EE/3AF5:	28      	PLP            (Restore Carry flag)
EE/3AF6:	AD1442  	LDA $4214      (Quotient)
EE/3AF9:	B004    	BCS $3AFF      (Branch on Carry set)
EE/3AFB:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3AFE:	1A      	INC A          (Add one)
EE/3AFF:	8595    	STA $95
EE/3B01:	A589    	LDA $89
EE/3B03:	C97E00  	CMP #$007E
EE/3B06:	B006    	BCS $3B0E
EE/3B08:	8566    	STA $66
EE/3B0A:	6468    	STZ $68
EE/3B0C:	800B    	BRA $3B19
EE/3B0E:	6466    	STZ $66
EE/3B10:	A27E    	LDX #$7E
EE/3B12:	8666    	STX $66
EE/3B14:	E97E00  	SBC #$007E
EE/3B17:	8568    	STA $68
EE/3B19:	A58B    	LDA $8B        (Zoom variable)
EE/3B1B:	8597    	STA $97
EE/3B1D:	A58D    	LDA $8D
EE/3B1F:	8599    	STA $99
EE/3B21:	AD7300  	LDA $0073      (Vehicle direction)
EE/3B24:	C9B400  	CMP #$00B4     (Compare to 180; south)
EE/3B27:	900B    	BCC $3B34      (Branch if smaller; facing western hemisphere)
EE/3B29:	C90E01  	CMP #$010E     (Compare to 270; east)
EE/3B2C:	9003    	BCC $3B31      (Branch if smaller; facing southeast)
EE/3B2E:	4C8F3D  	JMP $3D8F      (Handler for when facing northeast)
EE/3B31:	4CC63C  	JMP $3CC6      (Handler for when facing southeast)
EE/3B34:	C95A00  	CMP #$005A     (Compare to 90; west)
EE/3B37:	9003    	BCC $3B3C      (Branch if smaller; facing northwest)
EE/3B39:	4CFD3B  	JMP $3BFD      (Handler for when facing southwest)

Mode 7 rendering for when facing northwest
EE/3B3C:	A000    	LDY #$00       (Zero Y)
EE/3B3E:	A597    	LDA $97
EE/3B40:	8D0442  	STA $4204      (Save as dividend)
EE/3B43:	A69A    	LDX $9A
EE/3B45:	8E0642  	STX $4206      (Save as divisor)
EE/3B48:	A599    	LDA $99
EE/3B4A:	18      	CLC            (Clear Carry for addition)
EE/3B4B:	6595    	ADC $95
EE/3B4D:	8599    	STA $99        (Save changes)
EE/3B4F:	C8      	INY
EE/3B50:	A69D    	LDX $9D
EE/3B52:	8E0242  	STX $4202      (Save as multiplicand)
EE/3B55:	AD1442  	LDA $4214      (Quotient)
EE/3B58:	856D    	STA $6D
EE/3B5A:	AA      	TAX            (Transfer A to X)
EE/3B5B:	8E0342  	STX $4203      (Save as multiplier)
EE/3B5E:	EB      	XBA            (Exchange B and A)
EE/3B5F:	AA      	TAX            (Transfer A to X)
EE/3B60:	AD1642  	LDA $4216      (Product)
EE/3B63:	856A    	STA $6A        (Save it temporarily)
EE/3B65:	8E0342  	STX $4203      (Save X as multiplier)
EE/3B68:	A56B    	LDA $6B
EE/3B6A:	18      	CLC            (Clear Carry for addition)
EE/3B6B:	6D1642  	ADC $4216      (Add to product)
EE/3B6E:	99FF02  	STA $02FF,Y
EE/3B71:	A69B    	LDX $9B
EE/3B73:	8E0242  	STX $4202      (Save as multiplicand)
EE/3B76:	A66D    	LDX $6D
EE/3B78:	8E0342  	STX $4203      (Save as multiplier)
EE/3B7B:	A66E    	LDX $6E
EE/3B7D:	C8      	INY
EE/3B7E:	AD1642  	LDA $4216      (Product)
EE/3B81:	856A    	STA $6A        (Save it temporarily)
EE/3B83:	8E0342  	STX $4203      (Save X as multiplier)
EE/3B86:	A56B    	LDA $6B
EE/3B88:	18      	CLC            (Clear Carry for addition)
EE/3B89:	6D1642  	ADC $4216      (Add to product)
EE/3B8C:	99BE04  	STA $04BE,Y
EE/3B8F:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3B92:	1A      	INC A          (Add one)
EE/3B93:	997E06  	STA $067E,Y
EE/3B96:	C666    	DEC $66        (Decrease loop counter)
EE/3B98:	D0A4    	BNE $3B3E      (Loop unless null)
EE/3B9A:	A000    	LDY #$00       (Zero Y)
EE/3B9C:	C668    	DEC $68
EE/3B9E:	305A    	BMI $3BFA
EE/3BA0:	A597    	LDA $97
EE/3BA2:	8D0442  	STA $4204      (Save as dividend)
EE/3BA5:	A69A    	LDX $9A
EE/3BA7:	8E0642  	STX $4206      (Save as divisor)
EE/3BAA:	A599    	LDA $99
EE/3BAC:	18      	CLC            (Clear Carry for addition)
EE/3BAD:	6595    	ADC $95
EE/3BAF:	8599    	STA $99        (Save changes)
EE/3BB1:	C8      	INY
EE/3BB2:	A69D    	LDX $9D
EE/3BB4:	8E0242  	STX $4202      (Save as multiplicand)
EE/3BB7:	AD1442  	LDA $4214      (Quotient)
EE/3BBA:	856D    	STA $6D
EE/3BBC:	AA      	TAX            (Transfer A to X)
EE/3BBD:	8E0342  	STX $4203      (Save as multiplier)
EE/3BC0:	EB      	XBA            (Exchange B and A)
EE/3BC1:	AA      	TAX            (Transfer A to X)
EE/3BC2:	AD1642  	LDA $4216      (Product)
EE/3BC5:	856A    	STA $6A        (Save it temporarily)
EE/3BC7:	8E0342  	STX $4203      (Save X as multiplier)
EE/3BCA:	A56B    	LDA $6B
EE/3BCC:	18      	CLC            (Clear Carry for addition)
EE/3BCD:	6D1642  	ADC $4216      (Add to product)
EE/3BD0:	99FB03  	STA $03FB,Y
EE/3BD3:	A69B    	LDX $9B
EE/3BD5:	8E0242  	STX $4202      (Save as multiplicand)
EE/3BD8:	A66D    	LDX $6D
EE/3BDA:	8E0342  	STX $4203      (Save as multiplier)
EE/3BDD:	A66E    	LDX $6E
EE/3BDF:	C8      	INY
EE/3BE0:	AD1642  	LDA $4216      (Product)
EE/3BE3:	856A    	STA $6A        (Save it temporarily)
EE/3BE5:	8E0342  	STX $4203      (Save X as multiplier)
EE/3BE8:	A56B    	LDA $6B
EE/3BEA:	18      	CLC            (Clear Carry for addition)
EE/3BEB:	6D1642  	ADC $4216      (Add to product)
EE/3BEE:	99BA05  	STA $05BA,Y
EE/3BF1:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3BF4:	1A      	INC A          (Add one)
EE/3BF5:	997A07  	STA $077A,Y
EE/3BF8:	80A2    	BRA $3B9C
EE/3BFA:	4C503E  	JMP $3E50

Mode 7 rendering for when facing southwest
EE/3BFD:	A000    	LDY #$00       (Zero Y)
EE/3BFF:	A597    	LDA $97
EE/3C01:	8D0442  	STA $4204      (Save as dividend)
EE/3C04:	A69A    	LDX $9A
EE/3C06:	8E0642  	STX $4206      (Save as divisor)
EE/3C09:	A599    	LDA $99
EE/3C0B:	18      	CLC            (Clear Carry for addition)
EE/3C0C:	6595    	ADC $95
EE/3C0E:	8599    	STA $99        (Save changes)
EE/3C10:	C8      	INY
EE/3C11:	A69D    	LDX $9D
EE/3C13:	8E0242  	STX $4202      (Save as multiplicand)
EE/3C16:	AD1442  	LDA $4214      (Quotient)
EE/3C19:	856D    	STA $6D
EE/3C1B:	AA      	TAX            (Transfer A to X)
EE/3C1C:	8E0342  	STX $4203      (Set multiplier)
EE/3C1F:	EB      	XBA            (Exchange B and A)
EE/3C20:	AA      	TAX            (Transfer A to X)
EE/3C21:	AD1642  	LDA $4216      (Product)
EE/3C24:	856A    	STA $6A        (Save it temporarily)
EE/3C26:	8E0342  	STX $4203      (Save X as multiplier)
EE/3C29:	A56B    	LDA $6B
EE/3C2B:	18      	CLC            (Clear Carry for addition)
EE/3C2C:	6D1642  	ADC $4216      (Add to product)
EE/3C2F:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3C32:	1A      	INC A          (Add one)
EE/3C33:	99FF02  	STA $02FF,Y
EE/3C36:	A69B    	LDX $9B
EE/3C38:	8E0242  	STX $4202      (Set multiplicand)
EE/3C3B:	A66D    	LDX $6D
EE/3C3D:	8E0342  	STX $4203      (Set multiplier)
EE/3C40:	A66E    	LDX $6E
EE/3C42:	C8      	INY
EE/3C43:	AD1642  	LDA $4216      (Product)
EE/3C46:	856A    	STA $6A        (Save it temporarily)
EE/3C48:	8E0342  	STX $4203      (Save X as multiplier)
EE/3C4B:	A56B    	LDA $6B
EE/3C4D:	18      	CLC            (Clear Carry for addition)
EE/3C4E:	6D1642  	ADC $4216      (Add to product)
EE/3C51:	99BE04  	STA $04BE,Y
EE/3C54:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3C57:	1A      	INC A          (Add one)
EE/3C58:	997E06  	STA $067E,Y
EE/3C5B:	C666    	DEC $66        (Decrease loop counter)
EE/3C5D:	D0A0    	BNE $3BFF      (Loop unless null)
EE/3C5F:	A000    	LDY #$00       (Zero Y)
EE/3C61:	C668    	DEC $68
EE/3C63:	305E    	BMI $3CC3
EE/3C65:	A597    	LDA $97
EE/3C67:	8D0442  	STA $4204      (Save as dividend)
EE/3C6A:	A69A    	LDX $9A
EE/3C6C:	8E0642  	STX $4206      (Save as divisor)
EE/3C6F:	A599    	LDA $99
EE/3C71:	18      	CLC            (Clear Carry for addition)
EE/3C72:	6595    	ADC $95
EE/3C74:	8599    	STA $99        (Save changes)
EE/3C76:	C8      	INY
EE/3C77:	A69D    	LDX $9D
EE/3C79:	8E0242  	STX $4202      (Save as multiplicand)
EE/3C7C:	AD1442  	LDA $4214      (Quotient)
EE/3C7F:	856D    	STA $6D
EE/3C81:	AA      	TAX            (Transfer A to X)
EE/3C82:	8E0342  	STX $4203      (Save as multiplier)
EE/3C85:	EB      	XBA            (Exchange B and A)
EE/3C86:	AA      	TAX            (Transfer A to X)
EE/3C87:	AD1642  	LDA $4216      (Product)
EE/3C8A:	856A    	STA $6A        (Save it temporarily)
EE/3C8C:	8E0342  	STX $4203      (Save X as multiplier)
EE/3C8F:	A56B    	LDA $6B
EE/3C91:	18      	CLC            (Clear Carry for addition)
EE/3C92:	6D1642  	ADC $4216      (Add to product)
EE/3C95:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3C98:	1A      	INC A          (Add one)
EE/3C99:	99FB03  	STA $03FB,Y
EE/3C9C:	A69B    	LDX $9B
EE/3C9E:	8E0242  	STX $4202      (Save as multiplicand)
EE/3CA1:	A66D    	LDX $6D
EE/3CA3:	8E0342  	STX $4203      (Save as multiplier)
EE/3CA6:	A66E    	LDX $6E
EE/3CA8:	C8      	INY
EE/3CA9:	AD1642  	LDA $4216      (Product)
EE/3CAC:	856A    	STA $6A        (Save it temporarily)
EE/3CAE:	8E0342  	STX $4203      (Save X as multiplier)
EE/3CB1:	A56B    	LDA $6B
EE/3CB3:	18      	CLC            (Clear Carry for addition)
EE/3CB4:	6D1642  	ADC $4216      (Add to product)
EE/3CB7:	99BA05  	STA $05BA,Y
EE/3CBA:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3CBD:	1A      	INC A          (Add one)
EE/3CBE:	997A07  	STA $077A,Y
EE/3CC1:	809E    	BRA $3C61
EE/3CC3:	4C503E  	JMP $3E50

Mode 7 rendering for when facing southeast
EE/3CC6:	A000    	LDY #$00
EE/3CC8:	A597    	LDA $97
EE/3CCA:	8D0442  	STA $4204      (Save as dividend)
EE/3CCD:	A69A    	LDX $9A
EE/3CCF:	8E0642  	STX $4206      (Save as divisor)
EE/3CD2:	A599    	LDA $99
EE/3CD4:	18      	CLC            (Clear Carry for addition)
EE/3CD5:	6595    	ADC $95
EE/3CD7:	8599    	STA $99        (Save changes)
EE/3CD9:	C8      	INY
EE/3CDA:	A69D    	LDX $9D
EE/3CDC:	8E0242  	STX $4202      (Save as multiplicand)
EE/3CDF:	AD1442  	LDA $4214      (Quotient)
EE/3CE2:	856D    	STA $6D
EE/3CE4:	AA      	TAX            (Transfer A to X)
EE/3CE5:	8E0342  	STX $4203      (Save as multiplier)
EE/3CE8:	EB      	XBA            (Exchange B and A)
EE/3CE9:	AA      	TAX            (Transfer A to X)
EE/3CEA:	AD1642  	LDA $4216      (Product)
EE/3CED:	856A    	STA $6A        (Save it temporarily)
EE/3CEF:	8E0342  	STX $4203      (Save X as multiplier)
EE/3CF2:	A56B    	LDA $6B
EE/3CF4:	18      	CLC            (Clear Carry for addition)
EE/3CF5:	6D1642  	ADC $4216      (Add to product)
EE/3CF8:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3CFB:	1A      	INC A          (Add one)
EE/3CFC:	99FF02  	STA $02FF,Y
EE/3CFF:	A69B    	LDX $9B
EE/3D01:	8E0242  	STX $4202      (Save as multiplicand)
EE/3D04:	A66D    	LDX $6D
EE/3D06:	8E0342  	STX $4203      (Save as multiplier)
EE/3D09:	A66E    	LDX $6E
EE/3D0B:	C8      	INY
EE/3D0C:	AD1642  	LDA $4216      (Product)
EE/3D0F:	856A    	STA $6A        (Save it temporarily)
EE/3D11:	8E0342  	STX $4203      (Save X as multiplier)
EE/3D14:	A56B    	LDA $6B
EE/3D16:	18      	CLC            (Clear Carry for addition)
EE/3D17:	6D1642  	ADC $4216      (Add to product)
EE/3D1A:	997E06  	STA $067E,Y
EE/3D1D:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3D20:	1A      	INC A          (Add one)
EE/3D21:	99BE04  	STA $04BE,Y
EE/3D24:	C666    	DEC $66        (Decrease loop counter)
EE/3D26:	D0A0    	BNE $3CC8      (Loop unless null)
EE/3D28:	A000    	LDY #$00       (Zero Y)
EE/3D2A:	C668    	DEC $68
EE/3D2C:	305E    	BMI $3D8C
EE/3D2E:	A597    	LDA $97
EE/3D30:	8D0442  	STA $4204      (Save as dividend)
EE/3D33:	A69A    	LDX $9A
EE/3D35:	8E0642  	STX $4206      (Save as divisor)
EE/3D38:	A599    	LDA $99
EE/3D3A:	18      	CLC            (Clear Carry for addition)
EE/3D3B:	6595    	ADC $95
EE/3D3D:	8599    	STA $99        (Save changes)
EE/3D3F:	C8      	INY
EE/3D40:	A69D    	LDX $9D
EE/3D42:	8E0242  	STX $4202      (Save as multiplicand)
EE/3D45:	AD1442  	LDA $4214      (Quotient)
EE/3D48:	856D    	STA $6D
EE/3D4A:	AA      	TAX            (Transfer A to X)
EE/3D4B:	8E0342  	STX $4203      (Save as multiplier)
EE/3D4E:	EB      	XBA            (Exchange B and A)
EE/3D4F:	AA      	TAX            (Transfer A to X)
EE/3D50:	AD1642  	LDA $4216      (Product)
EE/3D53:	856A    	STA $6A        (Save it temporarily)
EE/3D55:	8E0342  	STX $4203      (Save X as multiplier)
EE/3D58:	A56B    	LDA $6B
EE/3D5A:	18      	CLC            (Clear Carry for addition)
EE/3D5B:	6D1642  	ADC $4216      (Add to product)
EE/3D5E:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3D61:	1A      	INC A          (Add one)
EE/3D62:	99FB03  	STA $03FB,Y
EE/3D65:	A69B    	LDX $9B
EE/3D67:	8E0242  	STX $4202      (Save as multiplicand)
EE/3D6A:	A66D    	LDX $6D
EE/3D6C:	8E0342  	STX $4203      (Save as multiplier)
EE/3D6F:	A66E    	LDX $6E
EE/3D71:	C8      	INY
EE/3D72:	AD1642  	LDA $4216      (Product)
EE/3D75:	856A    	STA $6A        (Save it temporarily)
EE/3D77:	8E0342  	STX $4203      (Save X as multiplier)
EE/3D7A:	A56B    	LDA $6B
EE/3D7C:	18      	CLC            (Clear Carry for addition)
EE/3D7D:	6D1642  	ADC $4216      (Add to product)
EE/3D80:	997A07  	STA $077A,Y
EE/3D83:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3D86:	1A      	INC A          (Add one)
EE/3D87:	99BA05  	STA $05BA,Y
EE/3D8A:	809E    	BRA $3D2A      (Loop)
EE/3D8C:	4C503E  	JMP $3E50

Mode 7 rendering for when facing northeast
EE/3D8F:	A000    	LDY #$00
EE/3D91:	A597    	LDA $97
EE/3D93:	8D0442  	STA $4204      (Save as dividend)
EE/3D96:	A69A    	LDX $9A
EE/3D98:	8E0642  	STX $4206      (Save as divisor)
EE/3D9B:	A599    	LDA $99
EE/3D9D:	18      	CLC            (Clear Carry for addition)
EE/3D9E:	6595    	ADC $95
EE/3DA0:	8599    	STA $99        (Save changes)
EE/3DA2:	C8      	INY
EE/3DA3:	A69D    	LDX $9D
EE/3DA5:	8E0242  	STX $4202      (Save as multiplicand)
EE/3DA8:	AD1442  	LDA $4214      (Quotient)
EE/3DAB:	856D    	STA $6D
EE/3DAD:	AA      	TAX            (Transfer A to X)
EE/3DAE:	8E0342  	STX $4203      (Save as multiplier)
EE/3DB1:	EB      	XBA            (Exchange B and A)
EE/3DB2:	AA      	TAX            (Transfer A to X)
EE/3DB3:	AD1642  	LDA $4216      (Product)
EE/3DB6:	856A    	STA $6A        (Save it temporarily)
EE/3DB8:	8E0342  	STX $4203      (Save X as multiplier)
EE/3DBB:	A56B    	LDA $6B
EE/3DBD:	18      	CLC            (Clear Carry for addition)
EE/3DBE:	6D1642  	ADC $4216      (Add to product)
EE/3DC1:	99FF02  	STA $02FF,Y
EE/3DC4:	A69B    	LDX $9B
EE/3DC6:	8E0242  	STX $4202      (Save as multiplicand)
EE/3DC9:	A66D    	LDX $6D
EE/3DCB:	8E0342  	STX $4203      (Save as multiplier)
EE/3DCE:	A66E    	LDX $6E
EE/3DD0:	C8      	INY
EE/3DD1:	AD1642  	LDA $4216      (Product)
EE/3DD4:	856A    	STA $6A        (Save it temporarily)
EE/3DD6:	8E0342  	STX $4203      (Save X as multiplier)
EE/3DD9:	A56B    	LDA $6B
EE/3DDB:	18      	CLC            (Clear Carry for addition)
EE/3DDC:	6D1642  	ADC $4216      (Add to product)
EE/3DDF:	997E06  	STA $067E,Y
EE/3DE2:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3DE5:	1A      	INC A          (Add one)
EE/3DE6:	99BE04  	STA $04BE,Y
EE/3DE9:	C666    	DEC $66        (Decrease loop counter)
EE/3DEB:	D0A4    	BNE $3D91      (Loop unless null)
EE/3DED:	A000    	LDY #$00
EE/3DEF:	C668    	DEC $68
EE/3DF1:	305A    	BMI $3E4D
EE/3DF3:	A597    	LDA $97
EE/3DF5:	8D0442  	STA $4204      (Save as dividend)
EE/3DF8:	A69A    	LDX $9A
EE/3DFA:	8E0642  	STX $4206      (Save as divisor)
EE/3DFD:	A599    	LDA $99
EE/3DFF:	18      	CLC            (Clear Carry for addition)
EE/3E00:	6595    	ADC $95
EE/3E02:	8599    	STA $99        (Save changes)
EE/3E04:	C8      	INY
EE/3E05:	A69D    	LDX $9D
EE/3E07:	8E0242  	STX $4202      (Save as multiplicand)
EE/3E0A:	AD1442  	LDA $4214      (Quotient)
EE/3E0D:	856D    	STA $6D
EE/3E0F:	AA      	TAX            (Transfer A to X)
EE/3E10:	8E0342  	STX $4203      (Save as multiplier)
EE/3E13:	EB      	XBA            (Exchange B and A)
EE/3E14:	AA      	TAX            (Transfer A to X)
EE/3E15:	AD1642  	LDA $4216      (Product)
EE/3E18:	856A    	STA $6A        (Save it temporarily)
EE/3E1A:	8E0342  	STX $4203      (Save X as multiplier)
EE/3E1D:	A56B    	LDA $6B
EE/3E1F:	18      	CLC            (Clear Carry for addition)
EE/3E20:	6D1642  	ADC $4216      (Add to product)
EE/3E23:	99FB03  	STA $03FB,Y
EE/3E26:	A69B    	LDX $9B
EE/3E28:	8E0242  	STX $4202      (Save as multiplicand)
EE/3E2B:	A66D    	LDX $6D
EE/3E2D:	8E0342  	STX $4203      (Save as multiplier)
EE/3E30:	A66E    	LDX $6E
EE/3E32:	C8      	INY
EE/3E33:	AD1642  	LDA $4216      (Product)
EE/3E36:	856A    	STA $6A        (Save it temporarily)
EE/3E38:	8E0342  	STX $4203      (Save X as multiplier)
EE/3E3B:	A56B    	LDA $6B
EE/3E3D:	18      	CLC            (Clear Carry for addition)
EE/3E3E:	6D1642  	ADC $4216      (Add to product)
EE/3E41:	997A07  	STA $077A,Y
EE/3E44:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3E47:	1A      	INC A          (Add one)
EE/3E48:	99BA05  	STA $05BA,Y
EE/3E4B:	80A2    	BRA $3DEF      (Loop)
EE/3E4D:	4C503E  	JMP $3E50      (...)
EE/3E50:	60      	RTS

Mode 7 rendering for character mode
EE/3E51:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/3E53:	C210    	REP #$10       (16-bit indexes)
EE/3E55:	A587    	LDA $87
EE/3E57:	C9E100  	CMP #$00E1     (Compare to 225 (line 226?))
EE/3E5A:	900D    	BCC $3E69      (Branch if smaller)
EE/3E5C:	A9C001  	LDA #$01C0
EE/3E5F:	38      	SEC            (Carry is already set...)
EE/3E60:	E587    	SBC $87
EE/3E62:	8589    	STA $89
EE/3E64:	A9E000  	LDA #$00E0
EE/3E67:	8002    	BRA $3E6B      (Skip next instruction)
EE/3E69:	8589    	STA $89
EE/3E6B:	0A      	ASL A          (Multiply by 2)
EE/3E6C:	AA      	TAX            (Transfer A to X)
EE/3E6D:	18      	CLC            (Clear Carry for addition)
EE/3E6E:	694001  	ADC #$0140     (Add 320)
EE/3E71:	85A0    	STA $A0
EE/3E73:	69F800  	ADC #$00F8
EE/3E76:	85A3    	STA $A3
EE/3E78:	8A      	TXA            (Transfer X to A)
EE/3E79:	690003  	ADC #$0300
EE/3E7C:	85A7    	STA $A7
EE/3E7E:	69F800  	ADC #$00F8
EE/3E81:	85AA    	STA $AA
EE/3E83:	8A      	TXA            (Transfer X to A)
EE/3E84:	69C004  	ADC #$04C0
EE/3E87:	85AE    	STA $AE
EE/3E89:	69F800  	ADC #$00F8
EE/3E8C:	85B1    	STA $B1
EE/3E8E:	8A      	TXA            (Transfer X to A)
EE/3E8F:	698006  	ADC #$0680
EE/3E92:	85B5    	STA $B5
EE/3E94:	69F800  	ADC #$00F8
EE/3E97:	85B8    	STA $B8
EE/3E99:	E210    	SEP #$10       (8-bit indexes) (SEP #$11...)
EE/3E9B:	A689    	LDX $89
EE/3E9D:	A58F    	LDA $8F
EE/3E9F:	38      	SEC            (Set Carry for subtraction)
EE/3EA0:	E58D    	SBC $8D
EE/3EA2:	B004    	BCS $3EA8
EE/3EA4:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3EA7:	1A      	INC A          (Add one)
EE/3EA8:	08      	PHP            (Save Carry flag)
EE/3EA9:	8D0442  	STA $4204      (Save as dividend)
EE/3EAC:	8E0642  	STX $4206      (Store X to divisor)
EE/3EAF:	AD7300  	LDA $0073      (Vehicle direction)
EE/3EB2:	C9B400  	CMP #$00B4     (Compare to 180, the south direction)
EE/3EB5:	9003    	BCC $3EBA      (Branch if smaller, meaning we're facing the western hemisphere)
EE/3EB7:	E9B400  	SBC #$00B4     (Subtract 180)
EE/3EBA:	AA      	TAX            (Transfer A to X)
EE/3EBB:	BFF1FEEF	LDA $EFFEF1,X
EE/3EBF:	859B    	STA $9B
EE/3EC1:	BF4BFFEF	LDA $EFFF4B,X
EE/3EC5:	859D    	STA $9D
EE/3EC7:	28      	PLP            (Restore Carry flag)
EE/3EC8:	AD1442  	LDA $4214      (Quotient)
EE/3ECB:	B004    	BCS $3ED1
EE/3ECD:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/3ED0:	1A      	INC A          (Add one)
EE/3ED1:	8595    	STA $95
EE/3ED3:	A589    	LDA $89
EE/3ED5:	C97E00  	CMP #$007E
EE/3ED8:	B006    	BCS $3EE0
EE/3EDA:	8566    	STA $66
EE/3EDC:	6468    	STZ $68
EE/3EDE:	8009    	BRA $3EE9
EE/3EE0:	A27E    	LDX #$7E
EE/3EE2:	8666    	STX $66
EE/3EE4:	E97E00  	SBC #$007E
EE/3EE7:	8568    	STA $68
EE/3EE9:	A58B    	LDA $8B        (Zoom variable)
EE/3EEB:	8597    	STA $97
EE/3EED:	A58D    	LDA $8D
EE/3EEF:	8599    	STA $99
EE/3EF1:	9C0542  	STZ $4205      (Zero divisor and high byte of dividend...)
EE/3EF4:	A000    	LDY #$00
EE/3EF6:	A666    	LDX $66
EE/3EF8:	A597    	LDA $97
EE/3EFA:	8D0442  	STA $4204      (Save as dividend)
EE/3EFD:	A59A    	LDA $9A
EE/3EFF:	8D0642  	STA $4206      (Save as divisor... and H-Count timer?)
EE/3F02:	A599    	LDA $99
EE/3F04:	18      	CLC            (Clear Carry for addition)
EE/3F05:	6595    	ADC $95
EE/3F07:	8599    	STA $99        (Save changes)
EE/3F09:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/3F0C:	99C004  	STA $04C0,Y
EE/3F0F:	998006  	STA $0680,Y
EE/3F12:	AD1442  	LDA $4214      (Quotient)
EE/3F15:	990003  	STA $0300,Y
EE/3F18:	994008  	STA $0840,Y
EE/3F1B:	C8      	INY
EE/3F1C:	C8      	INY
EE/3F1D:	CA      	DEX
EE/3F1E:	D0D8    	BNE $3EF8
EE/3F20:	A000    	LDY #$00
EE/3F22:	A668    	LDX $68
EE/3F24:	CA      	DEX
EE/3F25:	3027    	BMI $3F4E
EE/3F27:	A597    	LDA $97
EE/3F29:	8D0442  	STA $4204      (Save as dividend)
EE/3F2C:	A59A    	LDA $9A
EE/3F2E:	8D0642  	STA $4206      (Save as divisor... and H-Count timer?)
EE/3F31:	A599    	LDA $99
EE/3F33:	18      	CLC            (Clear Carry for addition)
EE/3F34:	6595    	ADC $95
EE/3F36:	8599    	STA $99        (Save changes)
EE/3F38:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/3F3B:	99BC05  	STA $05BC,Y
EE/3F3E:	997C07  	STA $077C,Y
EE/3F41:	AD1442  	LDA $4214      (Quotient)
EE/3F44:	99FC03  	STA $03FC,Y
EE/3F47:	993C09  	STA $093C,Y
EE/3F4A:	C8      	INY
EE/3F4B:	C8      	INY
EE/3F4C:	80D6    	BRA $3F24      (Loop)
EE/3F4E:	60      	RTS

All of the functions that initialize a map mode will call this routine
EE/3F4F:	08      	PHP
EE/3F50:	8B      	PHB
EE/3F51:	E220    	SEP #$20       (8-bit A)
EE/3F53:	A900    	LDA #$00
EE/3F55:	48      	PHA
EE/3F56:	AB      	PLB            (Set data bank to 00)
EE/3F57:	C220    	REP #$20       (16-bit A)
EE/3F59:	A95073  	LDA #$7350
EE/3F5C:	8D8121  	STA $2181      (WRAM address)
EE/3F5F:	9C1621  	STZ $2116      (Set VRAM pointer to $0000)
EE/3F62:	E220    	SEP #$20       (8-bit A)
EE/3F64:	9C8321  	STZ $2183      (WRAM bank; 00/7350)
EE/3F67:	A980    	LDA #$80
EE/3F69:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/3F6C:	E210    	SEP #$10       (8-bit indexes)
EE/3F6E:	A200    	LDX #$00
EE/3F70:	BF50937E	LDA $7E9350,X
EE/3F74:	290F    	AND #$0F
EE/3F76:	0A      	ASL A          (Multiply by 2)
EE/3F77:	0A      	ASL A          (Multiply by 4)
EE/3F78:	0A      	ASL A          (Multiply by 8)
EE/3F79:	0A      	ASL A          (Multiply by 16)
EE/3F7A:	8558    	STA $58        (Save it temporarily)
EE/3F7C:	DA      	PHX            (Save X)
EE/3F7D:	A220    	LDX #$20       (Loop counter)
EE/3F7F:	AD8021  	LDA $2180      (WRAM data read)
EE/3F82:	A8      	TAY            (Transfer A to Y)
EE/3F83:	290F    	AND #$0F
EE/3F85:	0558    	ORA $58
EE/3F87:	8D1921  	STA $2119      (VRAM data write, high byte)
EE/3F8A:	98      	TYA            (Transfer Y to A)
EE/3F8B:	4A      	LSR A          (Divide by 2)
EE/3F8C:	4A      	LSR A          (Divide by 4)
EE/3F8D:	4A      	LSR A          (Divide by 8)
EE/3F8E:	4A      	LSR A          (Divide by 16)
EE/3F8F:	0558    	ORA $58
EE/3F91:	8D1921  	STA $2119      (VRAM data write, high byte)
EE/3F94:	CA      	DEX            (Decrease X, the loop counter)
EE/3F95:	D0E8    	BNE $3F7F      (Loop if not null)
EE/3F97:	FA      	PLX            (Save X)
EE/3F98:	BF50937E	LDA $7E9350,X
EE/3F9C:	29F0    	AND #$F0
EE/3F9E:	8558    	STA $58        (Save it temporarily)
EE/3FA0:	DA      	PHX            (Save X)
EE/3FA1:	A220    	LDX #$20       (Loop counter)
EE/3FA3:	AD8021  	LDA $2180      (WRAM data read)
EE/3FA6:	A8      	TAY            (Transfer A to Y)
EE/3FA7:	290F    	AND #$0F
EE/3FA9:	0558    	ORA $58
EE/3FAB:	8D1921  	STA $2119      (VRAM data write, high byte)
EE/3FAE:	98      	TYA            (Transfer Y to A)
EE/3FAF:	4A      	LSR A          (Divide by 2)
EE/3FB0:	4A      	LSR A          (Divide by 4)
EE/3FB1:	4A      	LSR A          (Divide by 8)
EE/3FB2:	4A      	LSR A          (Divide by 16)
EE/3FB3:	0558    	ORA $58
EE/3FB5:	8D1921  	STA $2119      (VRAM data write, high byte)
EE/3FB8:	CA      	DEX            (Decrease X, the loop counter)
EE/3FB9:	D0E8    	BNE $3FA3      (Loop if not null)
EE/3FBB:	FA      	PLX            (Restore X)
EE/3FBC:	E8      	INX
EE/3FBD:	E080    	CPX #$80
EE/3FBF:	D0AF    	BNE $3F70      (Loop if not)
EE/3FC1:	AB      	PLB
EE/3FC2:	28      	PLP
EE/3FC3:	60      	RTS

Hide some objects and initialize the gradient overlay
EE/3FC4:	8B      	PHB
EE/3FC5:	A97E    	LDA #$7E
EE/3FC7:	48      	PHA
EE/3FC8:	AB      	PLB            (Set data bank to 7E)
EE/3FC9:	A20000  	LDX #$0000     (Start from first column) (LDX $00...)
EE/3FCC:	A00F00  	LDY #$000F     (16 columns in total)
EE/3FCF:	A908    	LDA #$08       (X position for first column)
EE/3FD1:	8558    	STA $58        (Save it temporarily)
EE/3FD3:	9D006C  	STA $6C00,X    (Set X position for first tile of current column)
EE/3FD6:	9D3C6C  	STA $6C3C,X    (Set X position for second tile of current column)
EE/3FD9:	9D786C  	STA $6C78,X    (Set X position for third tile of current column)
EE/3FDC:	9DB46C  	STA $6CB4,X    (Set X position for fourth tile of current column)
EE/3FDF:	9DF06C  	STA $6CF0,X    (Set X position for fifth tile of current column)
EE/3FE2:	A916    	LDA #$16
EE/3FE4:	9D036C  	STA $6C03,X    (Set graphic for first tile of current column)
EE/3FE7:	9D3F6C  	STA $6C3F,X    (Set graphic for second tile of current column)
EE/3FEA:	A908    	LDA #$08
EE/3FEC:	9D7B6C  	STA $6C7B,X    (Set graphic for third tile of current column)
EE/3FEF:	9DB76C  	STA $6CB7,X    (Set graphic for fourth tile of current column)
EE/3FF2:	9DF36C  	STA $6CF3,X    (Set graphic for fifth tile of current column)
EE/3FF5:	A558    	LDA $58        (Temporarily saved X position)
EE/3FF7:	18      	CLC            (Clear Carry for addition)
EE/3FF8:	6910    	ADC #$10       (Adjust it for the next column)
EE/3FFA:	E8      	INX
EE/3FFB:	E8      	INX
EE/3FFC:	E8      	INX
EE/3FFD:	E8      	INX
EE/3FFE:	88      	DEY            (One less column to process)
EE/3FFF:	D0D0    	BNE $3FD1      (Loop until all minimap tiles have been relocated)
EE/4001:	A08000  	LDY #$0080     (Loop counter) (BRA $401E...)
EE/4004:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/4007:	A9E0    	LDA #$E0       (Line 225 is off the screen)
EE/4009:	9D316B  	STA $6B31,X    (Hide some objects, including the gradient overlay)
EE/400C:	E8      	INX
EE/400D:	E8      	INX
EE/400E:	E8      	INX
EE/400F:	E8      	INX
EE/4010:	88      	DEY            (Decrease loop counter)
EE/4011:	D0F6    	BNE $4009      (Loop until all objects have been relocated)
EE/4013:	AB      	PLB
EE/4014:	60      	RTS

Hide some objects, such as minimap dots
EE/4015:	E220    	SEP #$20       (8-bit A)
EE/4017:	C210    	REP #$10       (16-bit indexes)
EE/4019:	8B      	PHB            (Save data bank)
EE/401A:	A97E    	LDA #$7E
EE/401C:	48      	PHA
EE/401D:	AB      	PLB            (Set data bank to 7E)
EE/401E:	A08000  	LDY #$0080     (Loop counter)
EE/4021:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/4024:	A9E0    	LDA #$E0       (Line 225 is off the screen)
EE/4026:	9D316B  	STA $6B31,X    (Hide some object)
EE/4029:	E8      	INX
EE/402A:	E8      	INX
EE/402B:	E8      	INX
EE/402C:	E8      	INX            (Point to next object)
EE/402D:	88      	DEY            (Decrease loop counter)
EE/402E:	D0F6    	BNE $4026      (Loop until all objects have been relocated)
EE/4030:	AB      	PLB
EE/4031:	60      	RTS

Set $6D30-$6D34 (minimap?) and $6D3D-$6D4F (gradient overlay?) to #$AA, and zero $6D35-$6D3C
EE/4032:	08      	PHP
EE/4033:	C220    	REP #$20       (16-bit A)
EE/4035:	A9306D  	LDA #$6D30
EE/4038:	8D8121  	STA $2181      (WRAM address)
EE/403B:	E220    	SEP #$20       (8-bit A)
EE/403D:	9C8321  	STZ $2183      (WRAM bank; 00/6D30)
EE/4040:	A9AA    	LDA #$AA
EE/4042:	8D8021  	STA $2180      (WRAM data write: AA)
EE/4045:	8D8021  	STA $2180      (WRAM data write: AA)
EE/4048:	8D8021  	STA $2180      (WRAM data write: AA)
EE/404B:	8D8021  	STA $2180      (WRAM data write: AA)
EE/404E:	8D8021  	STA $2180      (WRAM data write: AA)
EE/4051:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/4054:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/4057:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/405A:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/405D:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/4060:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/4063:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/4066:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/4069:	A21300  	LDX #$0013
EE/406C:	8D8021  	STA $2180      (WRAM data write: AA)
EE/406F:	CA      	DEX
EE/4070:	D0FA    	BNE $406C      (Loop 18 times)
EE/4072:	28      	PLP
EE/4073:	60      	RTS

Set $6D30-$6D34 (minimap?) and $6D3D-$6D4F (gradient overlay?) to #$AA, and zero $6D35-$6D3C
EE/4074:	08      	PHP
EE/4075:	8B      	PHB
EE/4076:	E220    	SEP #$20       (8-bit A)
EE/4078:	A900    	LDA #$00
EE/407A:	48      	PHA
EE/407B:	AB      	PLB            (Set data bank to 00)
EE/407C:	C220    	REP #$20       (16-bit A)
EE/407E:	A9306D  	LDA #$6D30
EE/4081:	8D8121  	STA $2181      (WRAM address)
EE/4084:	E220    	SEP #$20       (8-bit A)
EE/4086:	9C8321  	STZ $2183      (WRAM bank; 00/6D30)
EE/4089:	A9AA    	LDA #$AA
EE/408B:	8D8021  	STA $2180      (WRAM data write: AA)
EE/408E:	8D8021  	STA $2180      (WRAM data write: AA)
EE/4091:	8D8021  	STA $2180      (WRAM data write: AA)
EE/4094:	8D8021  	STA $2180      (WRAM data write: AA)
EE/4097:	8D8021  	STA $2180      (WRAM data write: AA)
EE/409A:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/409D:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/40A0:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/40A3:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/40A6:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/40A9:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/40AC:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/40AF:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/40B2:	A21300  	LDX #$0013
EE/40B5:	8D8021  	STA $2180      (WRAM data write: AA)
EE/40B8:	CA      	DEX
EE/40B9:	D0FA    	BNE $40B5      (Loop 18 times)
EE/40BB:	AB      	PLB
EE/40BC:	28      	PLP
EE/40BD:	60      	RTS

Set $6D30-$6D34 (minimap?) to #$AA, and zero $6D35-$6D4F
EE/40BE:	08      	PHP
EE/40BF:	E220    	SEP #$20       (8-bit A)
EE/40C1:	8B      	PHB            (Save data bank)
EE/40C2:	A900    	LDA #$00
EE/40C4:	48      	PHA
EE/40C5:	AB      	PLB            (Set data bank to 00)
EE/40C6:	C220    	REP #$20       (16-bit A)
EE/40C8:	A9306D  	LDA #$6D30
EE/40CB:	8D8121  	STA $2181      (WRAM address)
EE/40CE:	E220    	SEP #$20       (8-bit A)
EE/40D0:	9C8321  	STZ $2183      (WRAM bank; 00/6D30)
EE/40D3:	A9AA    	LDA #$AA
EE/40D5:	8D8021  	STA $2180      (Set 00/6D30 to #$AA)
EE/40D8:	8D8021  	STA $2180      (Set 00/6D31 to #$AA)
EE/40DB:	8D8021  	STA $2180      (Set 00/6D32 to #$AA)
EE/40DE:	8D8021  	STA $2180      (Set 00/6D33 to #$AA)
EE/40E1:	8D8021  	STA $2180      (Set 00/6D34 to #$AA)
EE/40E4:	A21B00  	LDX #$001B     (Loop counter)
EE/40E7:	9C8021  	STZ $2180      (WRAM data write: 00)
EE/40EA:	CA      	DEX            (Decrease X)
EE/40EB:	D0FA    	BNE $40E7      (Basically, loop 26 times)
EE/40ED:	AB      	PLB
EE/40EE:	28      	PLP
EE/40EF:	60      	RTS

This function is called to hide some sprites during certain scenes
EE/40F0:	08      	PHP
EE/40F1:	8B      	PHB
EE/40F2:	E220    	SEP #$20       (8-bit A)
EE/40F4:	A97E    	LDA #$7E
EE/40F6:	48      	PHA
EE/40F7:	AB      	PLB            (Set data bank to 7E)
EE/40F8:	A2D000  	LDX #$00D0     (Senseless...)
EE/40FB:	A9E0    	LDA #$E0       (Line 225 is off the screen)
EE/40FD:	9D316B  	STA $6B31,X    (Hide some sprite)
EE/4100:	9D6D6B  	STA $6B6D,X    (Hide some sprite)
EE/4103:	9DA96B  	STA $6BA9,X    (Hide some sprite)
EE/4106:	9DE56B  	STA $6BE5,X    (Hide some sprite)
EE/4109:	9D216C  	STA $6C21,X    (Hide some sprite)
EE/410C:	E8      	INX
EE/410D:	E8      	INX
EE/410E:	E8      	INX
EE/410F:	E8      	INX            (Point to next set of sprites)
EE/4110:	E00C01  	CPX #$010C     (Relocated all sprites?)
EE/4113:	D0E8    	BNE $40FD      (Loop if not)
EE/4115:	AB      	PLB
EE/4116:	28      	PLP
EE/4117:	60      	RTS

Zero $B5D0 through $B64F
EE/4118:	08      	PHP
EE/4119:	8B      	PHB
EE/411A:	E230    	SEP #$30       (8-bit A and indexes)
EE/411C:	A97E    	LDA #$7E
EE/411E:	48      	PHA
EE/411F:	AB      	PLB            (Set data bank to 7E)
EE/4120:	A200    	LDX #$00       (LDX #$80, STZ, DEX, BNE...)
EE/4122:	9ED0B5  	STZ $B5D0,X    (Zero $B5D0+X)
EE/4125:	E8      	INX            (Point to next byte)
EE/4126:	E080    	CPX #$80       (Pointing to $B650?)
EE/4128:	D0F8    	BNE $4122      (Loop if not)
EE/412A:	AB      	PLB
EE/412B:	28      	PLP
EE/412C:	60      	RTS

Show minimap
EE/412D:	8B      	PHB
EE/412E:	08      	PHP
EE/412F:	E220    	SEP #$20       (8-bit A) (SEP #$30...)
EE/4131:	E210    	SEP #$10       (8-bit indexes)
EE/4133:	A97E    	LDA #$7E
EE/4135:	48      	PHA
EE/4136:	AB      	PLB            (Set data bank to 7E)
EE/4137:	18      	CLC            (Clear Carry for addition)
EE/4138:	A200    	LDX #$00       (Zero X)
EE/413A:	A000    	LDY #$00       (Zero Y) (TXY...)
EE/413C:	98      	TYA            (Transfer Y to A)
EE/413D:	9D426B  	STA $6B42,X    (Set graphic of minimap tile)
EE/4140:	6912    	ADC #$12
EE/4142:	292E    	AND #$2E
EE/4144:	A8      	TAY            (Transfer A to Y)
EE/4145:	A90B    	LDA #$0B
EE/4147:	9D436B  	STA $6B43,X    (Set palette of current minimap tile)
EE/414A:	8A      	TXA            (Transfer X to A)
EE/414B:	6904    	ADC #$04       (Move to the next minimap tile)
EE/414D:	AA      	TAX            (Transfer A to X)
EE/414E:	C940    	CMP #$40       (Relocated all 16 tiles?)
EE/4150:	90EA    	BCC $413C      (Loop if not)
EE/4152:	18      	CLC            (Clear Carry for addition)
EE/4153:	A200    	LDX #$00       (Start from first column)
EE/4155:	A0B0    	LDY #$B0       (X position for first column)
EE/4157:	98      	TYA            (Transfer Y to A)
EE/4158:	9D406B  	STA $6B40,X    (Set X position of minimap tile 1 in column)
EE/415B:	9D506B  	STA $6B50,X    (Set X position of minimap tile 2 in column)
EE/415E:	9D606B  	STA $6B60,X    (Set X position of minimap tile 3 in column)
EE/4161:	9D706B  	STA $6B70,X    (Set X position of minimap tile 4 in column)
EE/4164:	6910    	ADC #$10       (Adjust X position for next column)
EE/4166:	A8      	TAY            (Transfer A to Y)
EE/4167:	8A      	TXA            (Transfer X to A)
EE/4168:	6904    	ADC #$04       (Point to next column)
EE/416A:	AA      	TAX            (Transfer A to X)
EE/416B:	C910    	CMP #$10       (Relocated all 16 tiles?)
EE/416D:	90E8    	BCC $4157      (Loop if not)
EE/416F:	18      	CLC            (Clear Carry for addition)
EE/4170:	A200    	LDX #$00       (Start from first row)
EE/4172:	A09C    	LDY #$9C       (Y position for first row)
EE/4174:	98      	TYA            (Transfer Y to A)
EE/4175:	9D416B  	STA $6B41,X    (Set Y position of minimap tile 1 in row)
EE/4178:	9D456B  	STA $6B45,X    (Set Y position of minimap tile 2 in row)
EE/417B:	9D496B  	STA $6B49,X    (Set Y position of minimap tile 3 in row)
EE/417E:	9D4D6B  	STA $6B4D,X    (Set Y position of minimap tile 4 in row)
EE/4181:	6910    	ADC #$10       (Adjust Y position for next row)
EE/4183:	A8      	TAY            (Transfer A to Y)
EE/4184:	8A      	TXA            (Transfer X to A)
EE/4185:	6910    	ADC #$10       (Point to next row)
EE/4187:	AA      	TAX            (Transfer A to X)
EE/4188:	C940    	CMP #$40       (Relocated all 16 tiles?)
EE/418A:	90E8    	BCC $4174      (Loop if not)
EE/418C:	28      	PLP
EE/418D:	AB      	PLB
EE/418E:	60      	RTS

Hide minimap
EE/418F:	8B      	PHB
EE/4190:	08      	PHP
EE/4191:	E220    	SEP #$20       (8-bit A) (SEP #$30...)
EE/4193:	E210    	SEP #$10       (8-bit indexes)
EE/4195:	A97E    	LDA #$7E
EE/4197:	48      	PHA
EE/4198:	AB      	PLB            (Set data bank to 7E)
EE/4199:	18      	CLC            (Clear Carry for addition)
EE/419A:	A200    	LDX #$00       (Start from first row)
EE/419C:	A9E0    	LDA #$E0       (Line 225 is off the screen)
EE/419E:	9D416B  	STA $6B41,X    (Hide minimap tile 1)
EE/41A1:	9D456B  	STA $6B45,X    (Hide minimap tile 2)
EE/41A4:	9D496B  	STA $6B49,X    (Hide minimap tile 3)
EE/41A7:	9D4D6B  	STA $6B4D,X    (Hide minimap tile 4)
EE/41AA:	8A      	TXA            (Transfer X to A)
EE/41AB:	6910    	ADC #$10       (Point to next row)
EE/41AD:	AA      	TAX            (Transfer A to X)
EE/41AE:	C940    	CMP #$40       (Relocated all 16 tiles?)
EE/41B0:	90EA    	BCC $419C      (Loop if not)
EE/41B2:	28      	PLP
EE/41B3:	AB      	PLB
EE/41B4:	60      	RTS

Draw location dot on minimap
EE/41B5:	08      	PHP
EE/41B6:	8B      	PHB
EE/41B7:	E220    	SEP #$20       (8-bit A)
EE/41B9:	A97E    	LDA #$7E
EE/41BB:	48      	PHA
EE/41BC:	AB      	PLB            (Set data bank to 7E)
EE/41BD:	C230    	REP #$30       (16-bit A and indexes)
EE/41BF:	A534    	LDA $34        (Party's X position in pixels)
EE/41C1:	4A      	LSR A          (Divide by 2)
EE/41C2:	4A      	LSR A          (Divide by 4)
EE/41C3:	4A      	LSR A          (Divide by 8)
EE/41C4:	4A      	LSR A          (Divide by 16)
EE/41C5:	4A      	LSR A          (Divide by 32)
EE/41C6:	4A      	LSR A          (Divide by 64; isolate occupied 4x4 block)
EE/41C7:	18      	CLC            (Clear Carry for addition)
EE/41C8:	69AF00  	ADC #$00AF     (Add base value for minimap location)
EE/41CB:	856A    	STA $6A        (Set occupied 4x4 block, X position)
EE/41CD:	8D306B  	STA $6B30      (Sprite 0 in OAM, the location dot)
EE/41D0:	A538    	LDA $38        (Party's Y position in pixels)
EE/41D2:	4A      	LSR A          (Divide by 2)
EE/41D3:	4A      	LSR A          (Divide by 4)
EE/41D4:	4A      	LSR A          (Divide by 8)
EE/41D5:	4A      	LSR A          (Divide by 16)
EE/41D6:	4A      	LSR A          (Divide by 32)
EE/41D7:	4A      	LSR A          (Divide by 64; isolate occupied 4x4 block)
EE/41D8:	18      	CLC            (Clear Carry for addition)
EE/41D9:	699B00  	ADC #$009B     (Add base value for minimap location)
EE/41DC:	856D    	STA $6D        (Set occupied 4x4 block, Y position)
EE/41DE:	8D316B  	STA $6B31      (Sprite 0 in OAM, the location dot)
EE/41E1:	A9801B  	LDA #$1B80
EE/41E4:	8D326B  	STA $6B32      (Finalize drawing the location dot)
EE/41E7:	E220    	SEP #$20       (8-bit A)
EE/41E9:	A520    	LDA $20        (Map mode)
EE/41EB:	C903    	CMP #$03       (Character mode?)
EE/41ED:	D003    	BNE $41F2      (Branch if not)
EE/41EF:	4C6942  	JMP $4269      (BRA...)

Figure out where the small dot is to be drawn while piloting an airship or riding a chocobo
EE/41F2:	C220    	REP #$20       (16-bit A)
EE/41F4:	A59D    	LDA $9D
EE/41F6:	0A      	ASL A          (Multiply by 2)
EE/41F7:	0A      	ASL A          (Multiply by 4)
EE/41F8:	EB      	XBA            (Exchange B and A)
EE/41F9:	290300  	AND #$0003
EE/41FC:	8558    	STA $58        (Where the small dot +/- your current X position will show up)
EE/41FE:	A59B    	LDA $9B
EE/4200:	0A      	ASL A          (Multiply by 2)
EE/4201:	0A      	ASL A          (Multiply by 4)
EE/4202:	EB      	XBA            (Exchange B and A)
EE/4203:	290300  	AND #$0003
EE/4206:	855A    	STA $5A        (Where the small dot +/- your current Y position will show up)
EE/4208:	A573    	LDA $73        (Vehicle direction)
EE/420A:	C9B400  	CMP #$00B4     (Compare to 180, the south direction)
EE/420D:	902A    	BCC $4239      (Branch if smaller, meaning we're facing the western hemisphere)
EE/420F:	C90E01  	CMP #$010E     (Compare to 270, the east direction)
EE/4212:	9013    	BCC $4227      (Branch if smaller, meaning we're facing southeast)
EE/4214:	A56A    	LDA $6A        (Load current X 4x4 block you are on)
EE/4216:	38      	SEC            (Carry is already set...)
EE/4217:	655A    	ADC $5A        (Add the +/- for the small dot + 1)
EE/4219:	8D346B  	STA $6B34      (Add the small dot, X position, sprite 1)
EE/421C:	A56D    	LDA $6D        (Load current Y 4x4 block you are on)
EE/421E:	38      	SEC            (Set Carry for subtraction)
EE/421F:	E558    	SBC $58        (Subtract the +/- for the small dot)
EE/4221:	1A      	INC A
EE/4222:	8D356B  	STA $6B35      (Add the small dot, Y position, sprite 1)
EE/4225:	803C    	BRA $4263
EE/4227:	A56A    	LDA $6A        (Load current X 4x4 block you are on)
EE/4229:	38      	SEC
EE/422A:	655A    	ADC $5A        (Add the +/- for the small dot + 1)
EE/422C:	8D346B  	STA $6B34      (Add the small dot, X position, sprite 1)
EE/422F:	A56D    	LDA $6D        (Load current Y 4x4 block you are on)
EE/4231:	38      	SEC
EE/4232:	6558    	ADC $58        (Add the +/- for the small dot + 1)
EE/4234:	8D356B  	STA $6B35      (Add the small dot, Y position, sprite 1)
EE/4237:	802A    	BRA $4263
EE/4239:	C95A00  	CMP #$005A     (Compare to 90, the west direction)
EE/423C:	9013    	BCC $4251      (Branch if smaller, meaning we're facing northwest)
EE/423E:	A56A    	LDA $6A        (Load current X 4x4 block you are on)
EE/4240:	38      	SEC            (Set Carry for subtraction)
EE/4241:	E55A    	SBC $5A        (Subtract the +/- for the small dot)
EE/4243:	1A      	INC A
EE/4244:	8D346B  	STA $6B34      (Add the small dot, X position, sprite 1)
EE/4247:	A56D    	LDA $6D        (Load current Y 4x4 block you are on)
EE/4249:	38      	SEC
EE/424A:	6558    	ADC $58        (Add the +/- for the small dot + 1)
EE/424C:	8D356B  	STA $6B35      (Add the small dot, Y position, sprite 1)
EE/424F:	8012    	BRA $4263
EE/4251:	A56A    	LDA $6A        (Load current X 4x4 block you are on)
EE/4253:	38      	SEC            (Set Carry for subtraction)
EE/4254:	E55A    	SBC $5A        (Subtract the +/- for the small dot)
EE/4256:	1A      	INC A
EE/4257:	8D346B  	STA $6B34      (Add the small dot, X position, sprite 1)
EE/425A:	A56D    	LDA $6D        (Load current Y 4x4 block you are on)
EE/425C:	38      	SEC            (Set Carry for subtraction)
EE/425D:	E558    	SBC $58        (Subtract the +/- for the small dot)
EE/425F:	1A      	INC A
EE/4260:	8D356B  	STA $6B35      (Add the small dot, Y position, sprite 1)
EE/4263:	A9821B  	LDA #$1B82
EE/4266:	8D366B  	STA $6B36      (Finalize drawing the small dot)
EE/4269:	AB      	PLB
EE/426A:	28      	PLP
EE/426B:	60      	RTS

Hide both minimap dots
EE/426C:	08      	PHP
EE/426D:	C220    	REP #$20       (16-bit A)
EE/426F:	A9E000  	LDA #$00E0     (Line 225, which is off the screen)
EE/4272:	8F316B7E	STA $7E6B31    (Hide and blank the location dot)
EE/4276:	8F356B7E	STA $7E6B35    (Hide and blank the direction dot)
EE/427A:	28      	PLP
EE/427B:	60      	RTS

Sprite-related function for vehicle mode
EE/427C:	E220    	SEP #$20       (8-bit A)
EE/427E:	8B      	PHB            (Save data bank)
EE/427F:	A97E    	LDA #$7E
EE/4281:	48      	PHA
EE/4282:	AB      	PLB            (Set data bank to 7E)
EE/4283:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/4285:	C210    	REP #$10       (16-bit indexes)
EE/4287:	A90800  	LDA #$0008
EE/428A:	8566    	STA $66
EE/428C:	A25000  	LDX #$0050
EE/428F:	865C    	STX $5C        (Save it temporarily)
EE/4291:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/4294:	BDD2B5  	LDA $B5D2,X
EE/4297:	8558    	STA $58        (Save it temporarily)
EE/4299:	BDD4B5  	LDA $B5D4,X
EE/429C:	855A    	STA $5A        (Save it temporarily)
EE/429E:	BDD0B5  	LDA $B5D0,X
EE/42A1:	DA      	PHX            (Save X)
EE/42A2:	F03C    	BEQ $42E0
EE/42A4:	0A      	ASL A          (Multiply by 2)
EE/42A5:	A8      	TAY            (Transfer A to Y)
EE/42A6:	B9D093  	LDA $93D0,Y    (Load a pointer)
EE/42A9:	A8      	TAY            (Transfer A to Y)
EE/42AA:	E220    	SEP #$20       (8-bit A)
EE/42AC:	B9D095  	LDA $95D0,Y    (Number of tiles for sprite)
EE/42AF:	C8      	INY            (Adjust Y so it points to the X position)
EE/42B0:	8568    	STA $68        (Save it temporarily)
EE/42B2:	A65C    	LDX $5C
EE/42B4:	B9D095  	LDA $95D0,Y    (X position)
EE/42B7:	18      	CLC            (Clear Carry for addition)
EE/42B8:	6558    	ADC $58
EE/42BA:	9D306B  	STA $6B30,X
EE/42BD:	B9D195  	LDA $95D1,Y    (Y position)
EE/42C0:	18      	CLC            (Clear Carry for addition)
EE/42C1:	655A    	ADC $5A
EE/42C3:	9D316B  	STA $6B31,X
EE/42C6:	C221    	REP #$21       (16-bit A; clear Carry)
EE/42C8:	B9D295  	LDA $95D2,Y    (Tile number and other attributes)
EE/42CB:	9D326B  	STA $6B32,X
EE/42CE:	98      	TYA            (Transfer Y to A)
EE/42CF:	690400  	ADC #$0004     (Add 4)
EE/42D2:	A8      	TAY            (Transfer A to Y)
EE/42D3:	8A      	TXA            (Transfer X to A)
EE/42D4:	690400  	ADC #$0004     (Add 4)
EE/42D7:	AA      	TAX            (Transfer A to X)
EE/42D8:	E220    	SEP #$20       (8-bit A)
EE/42DA:	C668    	DEC $68        (Decrease number of tiles)
EE/42DC:	D0D6    	BNE $42B4      (Loop if sprite remains incomplete)
EE/42DE:	865C    	STX $5C
EE/42E0:	C221    	REP #$21       (16-bit A; clear Carry)
EE/42E2:	68      	PLA
EE/42E3:	690800  	ADC #$0008     (Add 8)
EE/42E6:	AA      	TAX            (Transfer A to X)
EE/42E7:	C94000  	CMP #$0040
EE/42EA:	90A8    	BCC $4294
EE/42EC:	A55C    	LDA $5C
EE/42EE:	C9D000  	CMP #$00D0
EE/42F1:	B00D    	BCS $4300
EE/42F3:	AA      	TAX            (Transfer A to X)
EE/42F4:	A900E0  	LDA #$E000     (Line 225 is off the screen)
EE/42F7:	9D306B  	STA $6B30,X    (Hide and blank some graphics)
EE/42FA:	8A      	TXA            (Transfer X to A)
EE/42FB:	690400  	ADC #$0004
EE/42FE:	80EE    	BRA $42EE      (Loop)
EE/4300:	AB      	PLB
EE/4301:	60      	RTS

Sprite-related function for character mode
EE/4302:	E220    	SEP #$20       (8-bit A)
EE/4304:	8B      	PHB            (Save data bank)
EE/4305:	A97E    	LDA #$7E
EE/4307:	48      	PHA
EE/4308:	AB      	PLB            (Set data bank to 7E)
EE/4309:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/430B:	C210    	REP #$10       (16-bit indexes)
EE/430D:	A25000  	LDX #$0050
EE/4310:	865C    	STX $5C        (Save it temporarily)
EE/4312:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/4315:	BDD2B5  	LDA $B5D2,X
EE/4318:	8558    	STA $58        (Save it temporarily)
EE/431A:	BDD4B5  	LDA $B5D4,X
EE/431D:	855A    	STA $5A        (Save it temporarily)
EE/431F:	BDD0B5  	LDA $B5D0,X
EE/4322:	DA      	PHX
EE/4323:	F072    	BEQ $4397
EE/4325:	0A      	ASL A          (Multiply by 2)
EE/4326:	A8      	TAY            (Transfer A to Y)
EE/4327:	B9D093  	LDA $93D0,Y    (Load a pointer)
EE/432A:	A8      	TAY            (Transfer A to Y)
EE/432B:	E220    	SEP #$20       (8-bit A)
EE/432D:	B9D095  	LDA $95D0,Y    (Get the number of tiles in the sprite)
EE/4330:	C8      	INY            (Adjust Y so it points to the X position)
EE/4331:	8568    	STA $68        (Save it temporarily)
EE/4333:	A65C    	LDX $5C
EE/4335:	A559    	LDA $59
EE/4337:	F022    	BEQ $435B
EE/4339:	3010    	BMI $434B
EE/433B:	B9D095  	LDA $95D0,Y
EE/433E:	3003    	BMI $4343
EE/4340:	7B      	TDC            (Zero A)
EE/4341:	802D    	BRA $4370
EE/4343:	18      	CLC            (Clear Carry for addition)
EE/4344:	6558    	ADC $58
EE/4346:	3028    	BMI $4370
EE/4348:	7B      	TDC            (Zero A)
EE/4349:	8025    	BRA $4370
EE/434B:	B9D095  	LDA $95D0,Y    (Get the X position)
EE/434E:	1003    	BPL $4353
EE/4350:	7B      	TDC            (Zero A)
EE/4351:	801D    	BRA $4370
EE/4353:	18      	CLC            (Clear Carry for addition)
EE/4354:	6558    	ADC $58
EE/4356:	1018    	BPL $4370
EE/4358:	7B      	TDC            (Zero A)
EE/4359:	8015    	BRA $4370
EE/435B:	B9D095  	LDA $95D0,Y
EE/435E:	3008    	BMI $4368
EE/4360:	18      	CLC            (Clear Carry for addition)
EE/4361:	6558    	ADC $58
EE/4363:	900B    	BCC $4370
EE/4365:	7B      	TDC            (Zero A)
EE/4366:	8008    	BRA $4370
EE/4368:	18      	CLC            (Clear Carry for addition)
EE/4369:	6558    	ADC $58
EE/436B:	C558    	CMP $58
EE/436D:	9001    	BCC $4370
EE/436F:	7B      	TDC            (Zero A)
EE/4370:	9D306B  	STA $6B30,X
EE/4373:	B9D195  	LDA $95D1,Y    (Get the Y position)
EE/4376:	18      	CLC            (Clear Carry for addition)
EE/4377:	655A    	ADC $5A
EE/4379:	9D316B  	STA $6B31,X
EE/437C:	C220    	REP #$20       (16-bit A) (REP #$21...)
EE/437E:	B9D295  	LDA $95D2,Y    (Load tile number and other sprite data)
EE/4381:	9D326B  	STA $6B32,X
EE/4384:	98      	TYA            (Transfer Y to A)
EE/4385:	18      	CLC            (Clear Carry for addition)
EE/4386:	690400  	ADC #$0004     (Add 4)
EE/4389:	A8      	TAY            (Transfer A to Y)
EE/438A:	8A      	TXA            (Transfer X to A)
EE/438B:	690400  	ADC #$0004     (Add 4)
EE/438E:	AA      	TAX            (Transfer A to X)
EE/438F:	E220    	SEP #$20       (8-bit A)
EE/4391:	C668    	DEC $68        (Decrease the temporarily saved number of tiles)
EE/4393:	D0A0    	BNE $4335      (Loop if the sprite is still incomplete)
EE/4395:	865C    	STX $5C
EE/4397:	C220    	REP #$20       (16-bit A) (REP #$21...)
EE/4399:	68      	PLA
EE/439A:	18      	CLC            (Clear Carry for addition)
EE/439B:	690800  	ADC #$0008     (Add 8)
EE/439E:	AA      	TAX            (Transfer A to X)
EE/439F:	C95000  	CMP #$0050     (Compare to )
EE/43A2:	B003    	BCS $43A7      (Branch if equal or greater)
EE/43A4:	4C1543  	JMP $4315      (Loop)
EE/43A7:	A55C    	LDA $5C
EE/43A9:	C90002  	CMP #$0200     (Compare to 512)
EE/43AC:	B00D    	BCS $43BB      (Branch if equal or greater)
EE/43AE:	AA      	TAX            (Transfer A to X)
EE/43AF:	A900E0  	LDA #$E000     (Line 225, which is off the screen)
EE/43B2:	9D306B  	STA $6B30,X    (Hide and blank some graphics)
EE/43B5:	8A      	TXA            (Transfer X to A)
EE/43B6:	690400  	ADC #$0004     (Add 4)
EE/43B9:	80EE    	BRA $43A9      (Loop)
EE/43BB:	AB      	PLB
EE/43BC:	60      	RTS

Sprite initialization and animation
EE/43BD:	08      	PHP
EE/43BE:	8B      	PHB
EE/43BF:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/43C1:	C210    	REP #$10       (16-bit indexes)
EE/43C3:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/43C6:	B5CA    	LDA $CA,X
EE/43C8:	F007    	BEQ $43D1
EE/43CA:	DA      	PHX
EE/43CB:	0A      	ASL A          (Multiply by 2)
EE/43CC:	AA      	TAX            (Transfer A to X)
EE/43CD:	FCDB43  	JSR ($43DB,X)
EE/43D0:	FA      	PLX
EE/43D1:	E8      	INX
EE/43D2:	E8      	INX
EE/43D3:	E00800  	CPX #$0008     (Have we done $CA through $D0?)
EE/43D6:	D0EE    	BNE $43C6      (Loop if not)
EE/43D8:	AB      	PLB
EE/43D9:	28      	PLP
EE/43DA:	60      	RTS

Jump table for the function above
EE/43DB:	0000    	(Blank entry)
EE/43DD:	0F44    	(Draw a flying airship)
EE/43DF:	0646    	(Draw a chocobo and its rider)
EE/43E1:	8E46    	(Draw a map character and landed airship)
EE/43E3:	044A    	(Draw the flashing arrows from the Serpent Trench)
EE/43E5:	574B    	(Draw a ship)
EE/43E7:	BA4B    	(Draw an airship taking off)
EE/43E9:	5B4C    	(Initialize a flying airship after the airship has taken off)
EE/43EB:	C24C    	(Draw a landing airship)
EE/43ED:	344D    	(Initialize the map character and landed airship after the airship has landed)
EE/43EF:	E84D    	(Draw the dismounting from a chocobo)
EE/43F1:	164F    	(Finalize the dismounting from a chocobo)
EE/43F3:	8D4A    	(Initialize flying Esper Terra)
EE/43F5:	D44A    	(Draw flying Esper Terra)
EE/43F7:	264F    	(Initialize an airship emerging from the ocean)
EE/43F9:	694F    	(Draw an airship emerging from the ocean)
EE/43FB:	C151    	(Initialize a smoking airship)
EE/43FD:	1152    	(Draw a smoking airship)
EE/43FF:	5453    	(Initialize a flying pigeon)
EE/4401:	9453    	(Draw a flying pigeon)
EE/4403:	D650    	(Propel the airship leftward after it has emerged from the ocean)
EE/4405:	DC53    	(Initialize the fire objects displayed when the world is getting zapped)
EE/4407:	0D54    	(Draw the fire objects displayed when the world is getting zapped)
EE/4409:	2F55    	(Initialize the airship for the scene from the ending)
EE/440B:	8455    	(Animate the airship for the scene from the ending)
EE/440D:	1157    	(Unused)

Draw a flying airship
EE/440F:	08      	PHP
EE/4410:	8B      	PHB
EE/4411:	E220    	SEP #$20       (8-bit A)
EE/4413:	A900    	LDA #$00
EE/4415:	48      	PHA
EE/4416:	AB      	PLB            (Set data bank to 00)
EE/4417:	C220    	REP #$20       (16-bit A)
EE/4419:	A529    	LDA $29        (Rotation speed)
EE/441B:	C9AA00  	CMP #$00AA     (High enough to face left?)
EE/441E:	100A    	BPL $442A      (Branch if so)
EE/4420:	C956FF  	CMP #$FF56     (High enough to face right?)
EE/4423:	300A    	BMI $442F      (Branch if so)
EE/4425:	A90100  	LDA #$0001     (Value for airship facing neither left nor right) (TDC, INC A...)
EE/4428:	8008    	BRA $4432      (Skip next three instructions)
EE/442A:	A90900  	LDA #$0009     (Value for airship facing left)
EE/442D:	8003    	BRA $4432      (Skip next instruction)
EE/442F:	A90500  	LDA #$0005     (Value for airship facing right)
EE/4432:	8558    	STA $58        (Save it temporarily)
EE/4434:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/4436:	C9AA00  	CMP #$00AA     (High enough to use an up-facing airship sprite?)
EE/4439:	100A    	BPL $4445      (Branch if so)
EE/443B:	C956FF  	CMP #$FF56     (High enough to use a down-facing airship sprite?)
EE/443E:	300A    	BMI $444A      (Branch if so)
EE/4440:	A90000  	LDA #$0000     (Value for airship facing neither up nor down) (TDC...)
EE/4443:	8008    	BRA $444D      (Skip next three instructions)
EE/4445:	A90100  	LDA #$0001     (Value for airship facing up) (TDC, INC A...)
EE/4448:	8003    	BRA $444D      (Skip next instruction)
EE/444A:	A90200  	LDA #$0002     (Value for airship facing down)
EE/444D:	18      	CLC            (Clear Carry for addition)
EE/444E:	6558    	ADC $58        (Add to value for airship sprite facing left or right)
EE/4450:	AA      	TAX            (Transfer A to X)
EE/4451:	E220    	SEP #$20       (8-bit A) (SEP #$21...)
EE/4453:	A908    	LDA #$08
EE/4455:	38      	SEC            (Set Carry for subtraction)
EE/4456:	E527    	SBC $27        (Subtract high byte of vehicle speed)
EE/4458:	4A      	LSR A          (Divide by 2)
EE/4459:	1A      	INC A          (Add one)
EE/445A:	8F54B67E	STA $7EB654    (Animation speed for propellers? Lower = faster)
EE/445E:	AF52B67E	LDA $7EB652
EE/4462:	3A      	DEC A
EE/4463:	F006    	BEQ $446B
EE/4465:	8F52B67E	STA $7EB652    (Save changes)
EE/4469:	8011    	BRA $447C
EE/446B:	AF50B67E	LDA $7EB650
EE/446F:	3A      	DEC A
EE/4470:	8F50B67E	STA $7EB650    (Save changes)
EE/4474:	AF54B67E	LDA $7EB654
EE/4478:	8F52B67E	STA $7EB652
EE/447C:	AF50B67E	LDA $7EB650
EE/4480:	2901    	AND #$01
EE/4482:	18      	CLC            (Clear Carry for addition)
EE/4483:	7F6645EE	ADC $EE4566,X  (Add sprite number obtained from table)
EE/4487:	8FD0B57E	STA $7EB5D0
EE/448B:	A530    	LDA $30        (Vehicle height, high byte)
EE/448D:	8D0242  	STA $4202      (Save as multiplicand)
EE/4490:	A951    	LDA #$51
EE/4492:	8D0342  	STA $4203      (Set multiplier to 81)
EE/4495:	38      	SEC            (Set Carry for subtraction)
EE/4496:	A980    	LDA #$80
EE/4498:	8FD2B57E	STA $7EB5D2
EE/449C:	ED1742  	SBC $4217      (Subtract high byte of product)
EE/449F:	8FD4B57E	STA $7EB5D4
EE/44A3:	A5E7    	LDA $E7
EE/44A5:	8920    	BIT #$20       (Is the "hide vehicle and map character" bit set?)
EE/44A7:	F006    	BEQ $44AF      (Branch if not)
EE/44A9:	A9F0    	LDA #$F0
EE/44AB:	8FD4B57E	STA $7EB5D4
EE/44AF:	A530    	LDA $30        (Vehicle height, high byte)
EE/44B1:	8D0242  	STA $4202      (Save as multiplicand)
EE/44B4:	A910    	LDA #$10
EE/44B6:	8D0342  	STA $4203      (Set multiplier to 16)
EE/44B9:	A5C2    	LDA $C2        (Tile properties, low byte)
EE/44BB:	290C    	AND #$0C       (Isolate size of shadow cast by airship)
EE/44BD:	4A      	LSR A          (Divide by 2)
EE/44BE:	8558    	STA $58        (Save it temporarily)
EE/44C0:	AD1742  	LDA $4217      (Load high byte of product)
EE/44C3:	29FE    	AND #$FE       (Clear bit 0)
EE/44C5:	18      	CLC            (Clear Carry for addition)
EE/44C6:	6928    	ADC #$28       (Add 40)
EE/44C8:	38      	SEC            (Set Carry for subtraction)
EE/44C9:	E558    	SBC $58        (Subtract the temporarily saved value)
EE/44CB:	8F3A6B7E	STA $7E6B3A    (Set graphic of left portion of vehicle shadow)
EE/44CF:	8F3E6B7E	STA $7E6B3E    (Set graphic of right portion of vehicle shadow)
EE/44D3:	A974    	LDA #$74
EE/44D5:	8F386B7E	STA $7E6B38    (Set X position of left portion of vehicle shadow)
EE/44D9:	A97C    	LDA #$7C
EE/44DB:	8F3C6B7E	STA $7E6B3C    (Set X position of right portion of vehicle shadow)
EE/44DF:	A5E7    	LDA $E7
EE/44E1:	8920    	BIT #$20       (Is the "hide vehicle and map character" bit set?)
EE/44E3:	F004    	BEQ $44E9      (Branch if not)
EE/44E5:	A9F0    	LDA #$F0       (Y position for vehicle shadow: off the screen)
EE/44E7:	8002    	BRA $44EB      (Skip next instruction)
EE/44E9:	A9C8    	LDA #$C8       (Y position for vehicle shadow: normal)
EE/44EB:	8F396B7E	STA $7E6B39    (Set Y position of left portion of vehicle shadow)
EE/44EF:	8F3D6B7E	STA $7E6B3D    (Set Y position of right portion of vehicle shadow)
EE/44F3:	A910    	LDA #$10
EE/44F5:	8F3B6B7E	STA $7E6B3B
EE/44F9:	A950    	LDA #$50
EE/44FB:	8F3F6B7E	STA $7E6B3F
EE/44FF:	A5E8    	LDA $E8
EE/4501:	8902    	BIT #$02       (Are the flashing arrows visible?)
EE/4503:	D008    	BNE $450D      (Branch if so)
EE/4505:	A900    	LDA #$00
EE/4507:	8FE0B57E	STA $7EB5E0
EE/450B:	8056    	BRA $4563      (Exit)
EE/450D:	AF61B67E	LDA $7EB661
EE/4511:	1A      	INC A
EE/4512:	8F61B67E	STA $7EB661    (Save changes)
EE/4516:	C904    	CMP #$04
EE/4518:	9015    	BCC $452F
EE/451A:	A900    	LDA #$00
EE/451C:	8F61B67E	STA $7EB661
EE/4520:	AF60B67E	LDA $7EB660
EE/4524:	1A      	INC A
EE/4525:	C904    	CMP #$04
EE/4527:	9002    	BCC $452B
EE/4529:	A900    	LDA #$00
EE/452B:	8F60B67E	STA $7EB660
EE/452F:	ADB61E  	LDA $1EB6      (Event bits)
EE/4532:	8980    	BIT #$80       (Bearing left at the fork in the Serpent Trench?) (BMI...)
EE/4534:	D011    	BNE $4547      (Branch if so)
EE/4536:	A998    	LDA #$98
EE/4538:	8FE2B57E	STA $7EB5E2
EE/453C:	AF60B67E	LDA $7EB660
EE/4540:	F014    	BEQ $4556
EE/4542:	18      	CLC            (Clear Carry for addition)
EE/4543:	693E    	ADC #$3E       (Add 62)
EE/4545:	800F    	BRA $4556
EE/4547:	A960    	LDA #$60
EE/4549:	8FE2B57E	STA $7EB5E2
EE/454D:	AF60B67E	LDA $7EB660
EE/4551:	F003    	BEQ $4556
EE/4553:	18      	CLC            (Clear Carry for addition)
EE/4554:	6941    	ADC #$41       (Add 65)
EE/4556:	8FE0B57E	STA $7EB5E0
EE/455A:	A9FF    	LDA #$FF
EE/455C:	38      	SEC            (Set Carry for subtraction)
EE/455D:	E585    	SBC $85
EE/455F:	8FE4B57E	STA $7EB5E4
EE/4563:	AB      	PLB
EE/4564:	28      	PLP
EE/4565:	60      	RTS

Sprites used for a flying airship
EE/4566:	00      	(Blank entry)
EE/4567:	01      	(Facing ahead)
EE/4568:	07      	(Facing up)
EE/4569:	0D      	(Facing down)
EE/456A:	00      	(Blank entry)
EE/456B:	05      	(Facing right)
EE/456C:	0B      	(Facing up and right)
EE/456D:	11      	(Facing down and right)
EE/456E:	00      	(Blank entry)
EE/456F:	03      	(Facing left)
EE/4570:	09      	(Facing up and left)
EE/4571:	0F      	(Facing down and left)
EE/4572:	00      	(Blank entry)
EE/4573:	00      	(Blank entry)
EE/4574:	00      	(Blank entry)
EE/4575:	00      	(Blank entry)

Unused function
EE/4576:	08      	PHP
EE/4577:	8B      	PHB
EE/4578:	E220    	SEP #$20       (8-bit A)
EE/457A:	A900    	LDA #$00
EE/457C:	48      	PHA
EE/457D:	AB      	PLB            (Set data bank to 00)
EE/457E:	A20100  	LDX #$0001
EE/4581:	A906    	LDA #$06
EE/4583:	8F54B67E	STA $7EB654
EE/4587:	AF52B67E	LDA $7EB652
EE/458B:	3A      	DEC A          (Decrease by one)
EE/458C:	F006    	BEQ $4594
EE/458E:	8F52B67E	STA $7EB652    (Save changes)
EE/4592:	8011    	BRA $45A5
EE/4594:	AF50B67E	LDA $7EB650
EE/4598:	3A      	DEC A          (Decrease by one)
EE/4599:	8F50B67E	STA $7EB650    (Save changes)
EE/459D:	AF54B67E	LDA $7EB654
EE/45A1:	8F52B67E	STA $7EB652
EE/45A5:	AF50B67E	LDA $7EB650
EE/45A9:	2901    	AND #$01       (0 or 1)
EE/45AB:	18      	CLC            (Clear Carry for addition)
EE/45AC:	7F6645EE	ADC $EE4566,X  (Add sprite number for flying airship)
EE/45B0:	8FD0B57E	STA $7EB5D0    (Save changes)
EE/45B4:	4A      	LSR A          (Divide by 2)
EE/45B5:	4A      	LSR A          (Divide by 4)
EE/45B6:	18      	CLC            (Clear Carry for addition)
EE/45B7:	6980    	ADC #$80       (Add 128)
EE/45B9:	8FD4B57E	STA $7EB5D4
EE/45BD:	A530    	LDA $30        (Vehicle height, high byte)
EE/45BF:	8D0242  	STA $4202      (Save as multiplicand)
EE/45C2:	A910    	LDA #$10
EE/45C4:	8D0342  	STA $4203      (Set multiplier to 16)
EE/45C7:	A5C2    	LDA $C2        (Tile properties, low byte)
EE/45C9:	290C    	AND #$0C       (Isolate size of shadow cast by airship)
EE/45CB:	4A      	LSR A          (Divide by 2)
EE/45CC:	8558    	STA $58        (Save it temporarily)
EE/45CE:	AD1742  	LDA $4217      (Load high byte of product)
EE/45D1:	29FE    	AND #$FE       (Clear bit 0)
EE/45D3:	18      	CLC            (Clear Carry for addition)
EE/45D4:	6928    	ADC #$28       (Add 40)
EE/45D6:	38      	SEC            (Set Carry for subtraction)
EE/45D7:	E558    	SBC $58
EE/45D9:	8F3A6B7E	STA $7E6B3A    (Set graphic of left portion of vehicle shadow)
EE/45DD:	8F3E6B7E	STA $7E6B3E    (Set graphic of right portion of vehicle shadow)
EE/45E1:	A974    	LDA #$74
EE/45E3:	8F386B7E	STA $7E6B38    (Set X position of left portion of vehicle shadow)
EE/45E7:	A97C    	LDA #$7C
EE/45E9:	8F3C6B7E	STA $7E6B3C    (Set X position of right portion of vehicle shadow)
EE/45ED:	A9C8    	LDA #$C8
EE/45EF:	8F396B7E	STA $7E6B39    (Set Y position of left portion of vehicle shadow)
EE/45F3:	8F3D6B7E	STA $7E6B3D    (Set Y position of right portion of vehicle shadow)
EE/45F7:	A910    	LDA #$10
EE/45F9:	8F3B6B7E	STA $7E6B3B
EE/45FD:	A950    	LDA #$50
EE/45FF:	8F3F6B7E	STA $7E6B3F
EE/4603:	AB      	PLB
EE/4604:	28      	PLP
EE/4605:	60      	RTS

Draw a chocobo and its rider
EE/4606:	08      	PHP
EE/4607:	8B      	PHB
EE/4608:	E220    	SEP #$20       (8-bit A)
EE/460A:	A900    	LDA #$00       (TDC...)
EE/460C:	48      	PHA
EE/460D:	AB      	PLB            (Set data bank to 00)
EE/460E:	C220    	REP #$20       (16-bit A)
EE/4610:	A529    	LDA $29        (Rotation speed)
EE/4612:	C9AA00  	CMP #$00AA     (Fast enough to use a left-facing chocobo sprite?)
EE/4615:	100A    	BPL $4621      (Branch if so)
EE/4617:	C956FF  	CMP #$FF56     (Fast enough to use a right-facing chocobo sprite?)
EE/461A:	300A    	BMI $4626      (Branch if so)
EE/461C:	A90000  	LDA #$0000     (Value for chocobo facing neither left nor right) (TDC...)
EE/461F:	8008    	BRA $4629      (Skip next three instructions)
EE/4621:	A90600  	LDA #$0006     (Value for chocobo facing left)
EE/4624:	8003    	BRA $4629      (Skip next instruction)
EE/4626:	A90C00  	LDA #$000C     (Value for chocobo facing right)
EE/4629:	855A    	STA $5A        (Save it temporarily)
EE/462B:	A529    	LDA $29        (Rotation speed)
EE/462D:	D00F    	BNE $463E      (Branch if not zero)
EE/462F:	A526    	LDA $26        (Vehicle speed)
EE/4631:	D00E    	BNE $4641      (Branch if not zero)
EE/4633:	A92500  	LDA #$0025
EE/4636:	8F50B67E	STA $7EB650    (Sprite number for when stationary)
EE/463A:	E220    	SEP #$20       (8-bit A)
EE/463C:	802A    	BRA $4668
EE/463E:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/4641:	0A      	ASL A          (Multiply by 2)
EE/4642:	0A      	ASL A          (Multiply by 4)
EE/4643:	8558    	STA $58        (Save it temporarily)
EE/4645:	E220    	SEP #$20       (8-bit A) (SEP #$21...)
EE/4647:	A907    	LDA #$07
EE/4649:	38      	SEC            (Set Carry for subtraction)
EE/464A:	E559    	SBC $59
EE/464C:	8F54B67E	STA $7EB654
EE/4650:	AF52B67E	LDA $7EB652
EE/4654:	3A      	DEC A          (Decrease by one)
EE/4655:	3006    	BMI $465D      (Branch if negative)
EE/4657:	8F52B67E	STA $7EB652    (Save changes)
EE/465B:	8022    	BRA $467F
EE/465D:	AF50B67E	LDA $7EB650    (Sprite number)
EE/4661:	1A      	INC A          (Add one)
EE/4662:	C919    	CMP #$19       (Time for the animation to loop?)
EE/4664:	9002    	BCC $4668      (Branch if not)
EE/4666:	A913    	LDA #$13       (First pose of animation)
EE/4668:	8F50B67E	STA $7EB650    (Save changes)
EE/466C:	AF50B67E	LDA $7EB650    (...)
EE/4670:	18      	CLC            (Clear Carry for addition)
EE/4671:	655A    	ADC $5A
EE/4673:	8FD0B57E	STA $7EB5D0
EE/4677:	AF54B67E	LDA $7EB654
EE/467B:	8F52B67E	STA $7EB652
EE/467F:	A9B8    	LDA #$B8
EE/4681:	8FD4B57E	STA $7EB5D4
EE/4685:	A980    	LDA #$80
EE/4687:	8FD2B57E	STA $7EB5D2
EE/468B:	AB      	PLB
EE/468C:	28      	PLP
EE/468D:	60      	RTS

Draw a map character and landed airship
EE/468E:	08      	PHP
EE/468F:	8B      	PHB
EE/4690:	E230    	SEP #$30       (8-bit A and indexes)
EE/4692:	A5E7    	LDA $E7
EE/4694:	8908    	BIT #$08
EE/4696:	D005    	BNE $469D
EE/4698:	20F347  	JSR $47F3
EE/469B:	8025    	BRA $46C2
EE/469D:	A902    	LDA #$02
EE/469F:	8F53B67E	STA $7EB653
EE/46A3:	AF52B67E	LDA $7EB652
EE/46A7:	18      	CLC            (Clear Carry for addition)
EE/46A8:	65F3    	ADC $F3        (Add to event speed of map character)
EE/46AA:	C980    	CMP #$80       (Compare to 128)
EE/46AC:	900D    	BCC $46BB      (Branch if smaller)
EE/46AE:	AF50B67E	LDA $7EB650
EE/46B2:	1A      	INC A          (Add one)
EE/46B3:	2903    	AND #$03
EE/46B5:	8F50B67E	STA $7EB650
EE/46B9:	A900    	LDA #$00
EE/46BB:	8F52B67E	STA $7EB652
EE/46BF:	20E347  	JSR $47E3      (Map character sprite updating)
EE/46C2:	C230    	REP #$30       (16-bit A and indexes)
EE/46C4:	AD641F  	LDA $1F64      (Map number and flags in SRAM variables)
EE/46C7:	29FF01  	AND #$01FF     (Isolate map number)
EE/46CA:	F007    	BEQ $46D3      (Branch if World of Balance)
EE/46CC:	A91D00  	LDA #$001D
EE/46CF:	8564    	STA $64
EE/46D1:	8002    	BRA $46D5      (Skip next instruction)
EE/46D3:	6464    	STZ $64
EE/46D5:	ADB71E  	LDA $1EB7      (Event bits)
EE/46D8:	890200  	BIT #$0002     (Is the airship visible?)
EE/46DB:	D003    	BNE $46E0      (Branch if so) (LSR A, LSR A...)
EE/46DD:	4CA947  	JMP $47A9
EE/46E0:	AD631F  	LDA $1F63      (Y position of landed airship)
EE/46E3:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/46E6:	0A      	ASL A          (Multiply by 2)
EE/46E7:	0A      	ASL A          (Multiply by 4)
EE/46E8:	0A      	ASL A          (Multiply by 8)
EE/46E9:	0A      	ASL A          (Multiply by 16, converting it into pixels)
EE/46EA:	38      	SEC            (Set Carry for subtraction)
EE/46EB:	E538    	SBC $38        (Subtract current Y position in pixels)
EE/46ED:	C986FF  	CMP #$FF86     (Is the landed airship beyond the top edge of the screen?)
EE/46F0:	1003    	BPL $46F5      (Branch if not)
EE/46F2:	4CA947  	JMP $47A9
EE/46F5:	C93800  	CMP #$0038     (Is the landed airship beyond the bottom edge of the screen?)
EE/46F8:	3003    	BMI $46FD      (Branch if not) (BPL $46F2...)
EE/46FA:	4CA947  	JMP $47A9
EE/46FD:	18      	CLC            (Clear Carry for addition)
EE/46FE:	697A00  	ADC #$007A     (Add 122)
EE/4701:	AA      	TAX            (Transfer A to X)
EE/4702:	BF5249EE	LDA $EE4952,X  (Load relative Y position for airship from table)
EE/4706:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/4709:	8558    	STA $58        (Save it temporarily)
EE/470B:	6460    	STZ $60
EE/470D:	AD621F  	LDA $1F62      (Coordinates of landed airship)
EE/4710:	29FF00  	AND #$00FF     (Isolate the X position)
EE/4713:	0A      	ASL A          (Multiply by 2)
EE/4714:	0A      	ASL A          (Multiply by 4)
EE/4715:	0A      	ASL A          (Multiply by 8)
EE/4716:	0A      	ASL A          (Multiply by 16, converting it into pixels)
EE/4717:	38      	SEC            (Set Carry for subtraction)
EE/4718:	E534    	SBC $34        (Subtract current X position in pixels)
EE/471A:	E90800  	SBC #$0008     (Subtract 8)
EE/471D:	1006    	BPL $4725
EE/471F:	C660    	DEC $60
EE/4721:	49FFFF  	EOR #$FFFF     (Toggle all bits)
EE/4724:	1A      	INC A          (Add one)
EE/4725:	855A    	STA $5A        (Save it temporarily)
EE/4727:	E220    	SEP #$20       (8-bit A)
EE/4729:	8D0242  	STA $4202      (Save as multiplicand)
EE/472C:	A9C7    	LDA #$C7
EE/472E:	8D0342  	STA $4203      (Set multiplier to 199)
EE/4731:	EA      	NOP
EE/4732:	EA      	NOP
EE/4733:	EA      	NOP
EE/4734:	AE1642  	LDX $4216      (Product)
EE/4737:	866A    	STX $6A        (Save it temporarily) (Pointless...)
EE/4739:	A558    	LDA $58
EE/473B:	8D0242  	STA $4202      (Save as multiplicand)
EE/473E:	A56A    	LDA $6A        (Temporarily saved product)
EE/4740:	8D0342  	STA $4203      (Save as multiplier)
EE/4743:	EA      	NOP
EE/4744:	EA      	NOP
EE/4745:	A56B    	LDA $6B
EE/4747:	AE1642  	LDX $4216      (Load X with the product)
EE/474A:	866A    	STX $6A        (Save it temporarily) (Pointless...)
EE/474C:	8D0342  	STA $4203      (Set A as multiplier)
EE/474F:	C221    	REP #$21       (16-bit A; clear Carry)
EE/4751:	A56B    	LDA $6B        (Load high byte of temporarily saved product)
EE/4753:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/4756:	6D1642  	ADC $4216      (Add to product)
EE/4759:	8D0442  	STA $4204      (Save as dividend)
EE/475C:	E220    	SEP #$20       (8-bit A)
EE/475E:	A9EB    	LDA #$EB
EE/4760:	8D0642  	STA $4206      (Set divisor to 235)
EE/4763:	EA      	NOP
EE/4764:	EA      	NOP
EE/4765:	EA      	NOP
EE/4766:	EA      	NOP
EE/4767:	EA      	NOP
EE/4768:	EA      	NOP
EE/4769:	C221    	REP #$21       (16-bit A; clear Carry)
EE/476B:	AD1442  	LDA $4214      (Quotient)
EE/476E:	29FF00  	AND #$00FF     (Discard the high byte)
EE/4771:	655A    	ADC $5A
EE/4773:	C9A000  	CMP #$00A0     (Compare to 160)
EE/4776:	B031    	BCS $47A9      (Branch if equal or greater)
EE/4778:	A660    	LDX $60
EE/477A:	1004    	BPL $4780
EE/477C:	49FFFF  	EOR #$FFFF     (Make value positive)
EE/477F:	1A      	INC A          (Add one)
EE/4780:	18      	CLC            (Clear Carry for addition)
EE/4781:	698000  	ADC #$0080     (Add 128)
EE/4784:	8FDAB57E	STA $7EB5DA    (Set onscreen X position of landed airship)
EE/4788:	E220    	SEP #$20       (8-bit A) (SEP #$21...)
EE/478A:	A558    	LDA $58
EE/478C:	38      	SEC            (Set Carry for subtraction)
EE/478D:	E908    	SBC #$08       (Subtract 8)
EE/478F:	8FDCB57E	STA $7EB5DC
EE/4793:	A558    	LDA $58
EE/4795:	A0FFFF  	LDY #$FFFF
EE/4798:	C8      	INY
EE/4799:	38      	SEC            (Set Carry for subtraction)
EE/479A:	E93C    	SBC #$3C       (Subtract 60)
EE/479C:	B0FA    	BCS $4798
EE/479E:	98      	TYA            (Transfer Y to A)
EE/479F:	6945    	ADC #$45       (Add 69)
EE/47A1:	6564    	ADC $64
EE/47A3:	8FD8B57E	STA $7EB5D8    (Set landed airship sprite)
EE/47A7:	800B    	BRA $47B4
EE/47A9:	E220    	SEP #$20       (8-bit A)
EE/47AB:	7B      	TDC            (Zero A)
EE/47AC:	8FD8B57E	STA $7EB5D8    (Clear landed airship OAM)
EE/47B0:	8FDBB57E	STA $7EB5DB
EE/47B4:	E230    	SEP #$30       (8-bit A and indexes)
EE/47B6:	A9E6    	LDA #$E6
EE/47B8:	48      	PHA
EE/47B9:	AB      	PLB            (Set data bank to E6)
EE/47BA:	A900    	LDA #$00       (TDC...)
EE/47BC:	EB      	XBA            (Exchange B and A)
EE/47BD:	AFFC1100	LDA $0011FC    (Palette number for map character)
EE/47C1:	2907    	AND #$07       (0 to 7)
EE/47C3:	0A      	ASL A          (Multiply by 2)
EE/47C4:	0A      	ASL A          (Multiply by 4)
EE/47C5:	0A      	ASL A          (Multiply by 8)
EE/47C6:	0A      	ASL A          (Multiply by 16)
EE/47C7:	0A      	ASL A          (Multiply by 32)
EE/47C8:	A8      	TAY            (Set as palette index)
EE/47C9:	A200    	LDX #$00
EE/47CB:	C220    	REP #$20       (16-bit A)
EE/47CD:	B90080  	LDA $8000,Y    (Load a character palette color)
EE/47D0:	9F00E17E	STA $7EE100,X  (Save to palette for opaque portions of map character)
EE/47D4:	9F80E17E	STA $7EE180,X  (Save to palette for transparent portions of map character)
EE/47D8:	C8      	INY
EE/47D9:	C8      	INY            (Point to next color in ROM)
EE/47DA:	E8      	INX
EE/47DB:	E8      	INX            (Point to next color in RAM)
EE/47DC:	E020    	CPX #$20       (Copied the entire palette?)
EE/47DE:	D0ED    	BNE $47CD      (Loop if not)
EE/47E0:	AB      	PLB
EE/47E1:	28      	PLP
EE/47E2:	60      	RTS

Map character sprite updating
EE/47E3:	A5F6    	LDA $F6        (Current direction)
EE/47E5:	0A      	ASL A          (Multiply by 2)
EE/47E6:	0A      	ASL A          (Multiply by 4)
EE/47E7:	18      	CLC            (Clear Carry for addition)
EE/47E8:	6F50B67E	ADC $7EB650
EE/47EC:	AA      	TAX            (Transfer A to X)
EE/47ED:	BF4248EE	LDA $EE4842,X  (Load a pose number from the table below)
EE/47F1:	85F7    	STA $F7        (Save as pose number of map character)
EE/47F3:	A5F7    	LDA $F7        (Pose number of map character; note that some functions jump here)
EE/47F5:	AA      	TAX            (Transfer A to X)
EE/47F6:	BF5248EE	LDA $EE4852,X  (Mirror upper half?)
EE/47FA:	D00E    	BNE $480A      (Branch if so)
EE/47FC:	BFD248EE	LDA $EE48D2,X  (Mirror lower half?)
EE/4800:	D004    	BNE $4806      (Branch if so)
EE/4802:	A926    	LDA #$26
EE/4804:	8010    	BRA $4816
EE/4806:	A927    	LDA #$27
EE/4808:	800C    	BRA $4816
EE/480A:	BFD248EE	LDA $EE48D2,X  (Mirror lower half?)
EE/480E:	D004    	BNE $4814      (Branch if so)
EE/4810:	A928    	LDA #$28
EE/4812:	8002    	BRA $4816      (Skip next instruction)
EE/4814:	A929    	LDA #$29
EE/4816:	8560    	STA $60
EE/4818:	A5E7    	LDA $E7
EE/481A:	8910    	BIT #$10       (Is the bottom half to be made transparent?)
EE/481C:	D004    	BNE $4822      (Branch if so)
EE/481E:	A560    	LDA $60
EE/4820:	8005    	BRA $4827      (Skip next three instructions)
EE/4822:	A560    	LDA $60
EE/4824:	18      	CLC            (Clear Carry for addition)
EE/4825:	6904    	ADC #$04       (Add 4)
EE/4827:	8FD0B57E	STA $7EB5D0
EE/482B:	A980    	LDA #$80
EE/482D:	8FD2B57E	STA $7EB5D2
EE/4831:	A5E7    	LDA $E7
EE/4833:	8920    	BIT #$20       (Is the character to be hidden?)
EE/4835:	D004    	BNE $483B      (Branch if so)
EE/4837:	A980    	LDA #$80
EE/4839:	8002    	BRA $483D      (Skip next instruction)
EE/483B:	A9F8    	LDA #$F8
EE/483D:	8FD4B57E	STA $7EB5D4
EE/4841:	60      	RTS

Sprites used for walking positions of map character
EE/4842:	04      	(Facing up with feet in same position)
EE/4843:	05      	(Facing up with left foot in front)
EE/4844:	04      	(Facing up with feet in same position)
EE/4845:	03      	(Facing up with right foot in front)
EE/4846:	47      	(Facing right with feet in same position)
EE/4847:	48      	(Facing right with left foot in front)
EE/4848:	47      	(Facing right with feet in same position)
EE/4849:	46      	(Facing right with right foot in front)
EE/484A:	01      	(Facing down with feet in same position)
EE/484B:	02      	(Facing down with left foot in front)
EE/484C:	01      	(Facing down with feet in same position)
EE/484D:	00      	(Facing down with right foot in front)
EE/484E:	07      	(Facing left with feet in same position)
EE/484F:	08      	(Facing left with right foot in front)
EE/4850:	07      	(Facing left with feet in same position)
EE/4851:	06      	(Facing left with left foot in front)

Parameters for mirroring the upper half of a sprite
EE/4852:	00      	(Pose 0: status quo)
EE/4853:	00      	(Pose 1: status quo)
EE/4854:	00      	(Pose 2: status quo)
EE/4855:	00      	(Pose 3: status quo)
EE/4856:	00      	(Pose 4: status quo)
EE/4857:	00      	(Pose 5: status quo)
EE/4858:	00      	(Pose 6: status quo)
EE/4859:	00      	(Pose 7: status quo)
EE/485A:	00      	(Pose 8: status quo)
EE/485B:	00      	(Pose 9: status quo)
EE/485C:	00      	(Pose 10: status quo)
EE/485D:	00      	(Pose 11: status quo)
EE/485E:	00      	(Pose 12: status quo)
EE/485F:	00      	(Pose 13: status quo)
EE/4860:	00      	(Pose 14: status quo)
EE/4861:	00      	(Pose 15: status quo)
EE/4862:	00      	(Pose 16: status quo)
EE/4863:	00      	(Pose 17: status quo)
EE/4864:	00      	(Pose 18: status quo)
EE/4865:	00      	(Pose 19: status quo)
EE/4866:	00      	(Pose 20: status quo)
EE/4867:	00      	(Pose 21: status quo)
EE/4868:	00      	(Pose 22: status quo)
EE/4869:	00      	(Pose 23: status quo)
EE/486A:	00      	(Pose 24: status quo)
EE/486B:	00      	(Pose 25: status quo)
EE/486C:	00      	(Pose 26: status quo)
EE/486D:	00      	(Pose 27: status quo)
EE/486E:	00      	(Pose 28: status quo)
EE/486F:	00      	(Pose 29: status quo)
EE/4870:	00      	(Pose 30: status quo)
EE/4871:	00      	(Pose 31: status quo)
EE/4872:	00      	(Pose 32: status quo)
EE/4873:	00      	(Pose 33: status quo)
EE/4874:	00      	(Pose 34: status quo)
EE/4875:	00      	(Pose 35: status quo)
EE/4876:	00      	(Pose 36: status quo)
EE/4877:	00      	(Pose 37: status quo)
EE/4878:	00      	(Pose 38: status quo)
EE/4879:	00      	(Pose 39: status quo)
EE/487A:	00      	(Pose 40: status quo)
EE/487B:	00      	(Pose 41: status quo)
EE/487C:	00      	(Pose 42: status quo)
EE/487D:	00      	(Pose 43: status quo)
EE/487E:	00      	(Pose 44: status quo)
EE/487F:	00      	(Pose 45: status quo)
EE/4880:	00      	(Pose 46: status quo)
EE/4881:	00      	(Pose 47: status quo)
EE/4882:	00      	(Pose 48: status quo)
EE/4883:	00      	(Pose 49: status quo)
EE/4884:	00      	(Pose 50: status quo)
EE/4885:	00      	(Pose 51: status quo)
EE/4886:	00      	(Pose 52: status quo)
EE/4887:	00      	(Pose 53: status quo)
EE/4888:	00      	(Pose 54: status quo)
EE/4889:	00      	(Pose 55: status quo)
EE/488A:	00      	(Pose 56: status quo)
EE/488B:	00      	(Pose 57: status quo)
EE/488C:	00      	(Pose 58: status quo)
EE/488D:	00      	(Pose 59: status quo)
EE/488E:	00      	(Pose 60: status quo)
EE/488F:	00      	(Pose 61: status quo)
EE/4890:	00      	(Pose 62: status quo)
EE/4891:	00      	(Pose 63: status quo)
EE/4892:	01      	(Pose 64: horizontal flip)
EE/4893:	01      	(Pose 65: horizontal flip)
EE/4894:	01      	(Pose 66: horizontal flip)
EE/4895:	01      	(Pose 67: horizontal flip)
EE/4896:	01      	(Pose 68: horizontal flip)
EE/4897:	01      	(Pose 69: horizontal flip)
EE/4898:	01      	(Pose 70: horizontal flip)
EE/4899:	01      	(Pose 71: horizontal flip)
EE/489A:	01      	(Pose 72: horizontal flip)
EE/489B:	01      	(Pose 73: horizontal flip)
EE/489C:	01      	(Pose 74: horizontal flip)
EE/489D:	01      	(Pose 75: horizontal flip)
EE/489E:	01      	(Pose 76: horizontal flip)
EE/489F:	01      	(Pose 77: horizontal flip)
EE/48A0:	01      	(Pose 78: horizontal flip)
EE/48A1:	01      	(Pose 79: horizontal flip)
EE/48A2:	01      	(Pose 80: horizontal flip)
EE/48A3:	01      	(Pose 81: horizontal flip)
EE/48A4:	01      	(Pose 82: horizontal flip)
EE/48A5:	01      	(Pose 83: horizontal flip)
EE/48A6:	01      	(Pose 84: horizontal flip)
EE/48A7:	01      	(Pose 85: horizontal flip)
EE/48A8:	01      	(Pose 86: horizontal flip)
EE/48A9:	01      	(Pose 87: horizontal flip)
EE/48AA:	01      	(Pose 88: horizontal flip)
EE/48AB:	01      	(Pose 89: horizontal flip)
EE/48AC:	01      	(Pose 90: horizontal flip)
EE/48AD:	01      	(Pose 91: horizontal flip)
EE/48AE:	01      	(Pose 92: horizontal flip)
EE/48AF:	01      	(Pose 93: horizontal flip)
EE/48B0:	01      	(Pose 94: horizontal flip)
EE/48B1:	01      	(Pose 95: horizontal flip)
EE/48B2:	01      	(Pose 96: horizontal flip)
EE/48B3:	01      	(Pose 97: horizontal flip)
EE/48B4:	01      	(Pose 98: horizontal flip)
EE/48B5:	01      	(Pose 99: horizontal flip)
EE/48B6:	01      	(Pose 100: horizontal flip)
EE/48B7:	01      	(Pose 101: horizontal flip)
EE/48B8:	01      	(Pose 102: horizontal flip)
EE/48B9:	01      	(Pose 103: horizontal flip)
EE/48BA:	01      	(Pose 104: horizontal flip)
EE/48BB:	01      	(Pose 105: horizontal flip)
EE/48BC:	01      	(Pose 106: horizontal flip)
EE/48BD:	01      	(Pose 107: horizontal flip)
EE/48BE:	01      	(Pose 108: horizontal flip)
EE/48BF:	01      	(Pose 109: horizontal flip)
EE/48C0:	01      	(Pose 110: horizontal flip)
EE/48C1:	01      	(Pose 111: horizontal flip)
EE/48C2:	01      	(Pose 112: horizontal flip)
EE/48C3:	01      	(Pose 113: horizontal flip)
EE/48C4:	01      	(Pose 114: horizontal flip)
EE/48C5:	01      	(Pose 115: horizontal flip)
EE/48C6:	01      	(Pose 116: horizontal flip)
EE/48C7:	01      	(Pose 117: horizontal flip)
EE/48C8:	01      	(Pose 118: horizontal flip)
EE/48C9:	01      	(Pose 119: horizontal flip)
EE/48CA:	01      	(Pose 120: horizontal flip)
EE/48CB:	01      	(Pose 121: horizontal flip)
EE/48CC:	01      	(Pose 122: horizontal flip)
EE/48CD:	01      	(Pose 123: horizontal flip)
EE/48CE:	01      	(Pose 124: horizontal flip)
EE/48CF:	01      	(Pose 125: horizontal flip)
EE/48D0:	01      	(Pose 126: horizontal flip)
EE/48D1:	01      	(Pose 127: horizontal flip)

Parameters for mirroring the lower half of a sprite
EE/48D2:	00      	(Pose 0: status quo)
EE/48D3:	00      	(Pose 1: status quo)
EE/48D4:	01      	(Pose 2: horizontal flip)
EE/48D5:	00      	(Pose 3: status quo)
EE/48D6:	00      	(Pose 4: status quo)
EE/48D7:	01      	(Pose 5: horizontal flip)
EE/48D8:	00      	(Pose 6: status quo)
EE/48D9:	00      	(Pose 7: status quo)
EE/48DA:	00      	(Pose 8: status quo)
EE/48DB:	00      	(Pose 9: status quo)
EE/48DC:	00      	(Pose 10: status quo)
EE/48DD:	00      	(Pose 11: status quo)
EE/48DE:	00      	(Pose 12: status quo)
EE/48DF:	00      	(Pose 13: status quo)
EE/48E0:	00      	(Pose 14: status quo)
EE/48E1:	00      	(Pose 15: status quo)
EE/48E2:	00      	(Pose 16: status quo)
EE/48E3:	00      	(Pose 17: status quo)
EE/48E4:	00      	(Pose 18: status quo)
EE/48E5:	00      	(Pose 19: status quo)
EE/48E6:	00      	(Pose 20: status quo)
EE/48E7:	00      	(Pose 21: status quo)
EE/48E8:	00      	(Pose 22: status quo)
EE/48E9:	00      	(Pose 23: status quo)
EE/48EA:	00      	(Pose 24: status quo)
EE/48EB:	00      	(Pose 25: status quo)
EE/48EC:	00      	(Pose 26: status quo)
EE/48ED:	00      	(Pose 27: status quo)
EE/48EE:	00      	(Pose 28: status quo)
EE/48EF:	00      	(Pose 29: status quo)
EE/48F0:	00      	(Pose 30: status quo)
EE/48F1:	00      	(Pose 31: status quo)
EE/48F2:	00      	(Pose 32: status quo)
EE/48F3:	00      	(Pose 33: status quo)
EE/48F4:	00      	(Pose 34: status quo)
EE/48F5:	00      	(Pose 35: status quo)
EE/48F6:	00      	(Pose 36: status quo)
EE/48F7:	00      	(Pose 37: status quo)
EE/48F8:	00      	(Pose 38: status quo)
EE/48F9:	00      	(Pose 39: status quo)
EE/48FA:	00      	(Pose 40: status quo)
EE/48FB:	00      	(Pose 41: status quo)
EE/48FC:	00      	(Pose 42: status quo)
EE/48FD:	00      	(Pose 43: status quo)
EE/48FE:	00      	(Pose 44: status quo)
EE/48FF:	00      	(Pose 45: status quo)
EE/4900:	00      	(Pose 46: status quo)
EE/4901:	00      	(Pose 47: status quo)
EE/4902:	00      	(Pose 48: status quo)
EE/4903:	00      	(Pose 49: status quo)
EE/4904:	00      	(Pose 50: status quo)
EE/4905:	00      	(Pose 51: status quo)
EE/4906:	00      	(Pose 52: status quo)
EE/4907:	00      	(Pose 53: status quo)
EE/4908:	00      	(Pose 54: status quo)
EE/4909:	00      	(Pose 55: status quo)
EE/490A:	00      	(Pose 56: status quo)
EE/490B:	00      	(Pose 57: status quo)
EE/490C:	00      	(Pose 58: status quo)
EE/490D:	00      	(Pose 59: status quo)
EE/490E:	00      	(Pose 60: status quo)
EE/490F:	00      	(Pose 61: status quo)
EE/4910:	00      	(Pose 62: status quo)
EE/4911:	00      	(Pose 63: status quo)
EE/4912:	01      	(Pose 64: horizontal flip)
EE/4913:	01      	(Pose 65: horizontal flip)
EE/4914:	01      	(Pose 66: horizontal flip)
EE/4915:	00      	(Pose 67: status quo)
EE/4916:	01      	(Pose 68: horizontal flip)
EE/4917:	00      	(Pose 69: status quo)
EE/4918:	01      	(Pose 70: horizontal flip)
EE/4919:	01      	(Pose 71: horizontal flip)
EE/491A:	01      	(Pose 72: horizontal flip)
EE/491B:	01      	(Pose 73: horizontal flip)
EE/491C:	01      	(Pose 74: horizontal flip)
EE/491D:	01      	(Pose 75: horizontal flip)
EE/491E:	01      	(Pose 76: horizontal flip)
EE/491F:	01      	(Pose 77: horizontal flip)
EE/4920:	01      	(Pose 78: horizontal flip)
EE/4921:	01      	(Pose 79: horizontal flip)
EE/4922:	01      	(Pose 80: horizontal flip)
EE/4923:	01      	(Pose 81: horizontal flip)
EE/4924:	01      	(Pose 82: horizontal flip)
EE/4925:	01      	(Pose 83: horizontal flip)
EE/4926:	01      	(Pose 84: horizontal flip)
EE/4927:	01      	(Pose 85: horizontal flip)
EE/4928:	01      	(Pose 86: horizontal flip)
EE/4929:	01      	(Pose 87: horizontal flip)
EE/492A:	01      	(Pose 88: horizontal flip)
EE/492B:	01      	(Pose 89: horizontal flip)
EE/492C:	01      	(Pose 90: horizontal flip)
EE/492D:	01      	(Pose 91: horizontal flip)
EE/492E:	01      	(Pose 92: horizontal flip)
EE/492F:	01      	(Pose 93: horizontal flip)
EE/4930:	01      	(Pose 94: horizontal flip)
EE/4931:	01      	(Pose 95: horizontal flip)
EE/4932:	01      	(Pose 96: horizontal flip)
EE/4933:	01      	(Pose 97: horizontal flip)
EE/4934:	01      	(Pose 98: horizontal flip)
EE/4935:	01      	(Pose 99: horizontal flip)
EE/4936:	01      	(Pose 100: horizontal flip)
EE/4937:	01      	(Pose 101: horizontal flip)
EE/4938:	01      	(Pose 102: horizontal flip)
EE/4939:	01      	(Pose 103: horizontal flip)
EE/493A:	01      	(Pose 104: horizontal flip)
EE/493B:	01      	(Pose 105: horizontal flip)
EE/493C:	01      	(Pose 106: horizontal flip)
EE/493D:	01      	(Pose 107: horizontal flip)
EE/493E:	01      	(Pose 108: horizontal flip)
EE/493F:	01      	(Pose 109: horizontal flip)
EE/4940:	01      	(Pose 100: horizontal flip)
EE/4941:	01      	(Pose 111: horizontal flip)
EE/4942:	01      	(Pose 112: horizontal flip)
EE/4943:	01      	(Pose 113: horizontal flip)
EE/4944:	01      	(Pose 114: horizontal flip)
EE/4945:	01      	(Pose 115: horizontal flip)
EE/4946:	01      	(Pose 116: horizontal flip)
EE/4947:	01      	(Pose 117: horizontal flip)
EE/4948:	01      	(Pose 118: horizontal flip)
EE/4949:	01      	(Pose 119: horizontal flip)
EE/494A:	01      	(Pose 120: horizontal flip)
EE/494B:	01      	(Pose 121: horizontal flip)
EE/494C:	01      	(Pose 122: horizontal flip)
EE/494D:	01      	(Pose 123: horizontal flip)
EE/494E:	01      	(Pose 124: horizontal flip)
EE/494F:	01      	(Pose 125: horizontal flip)
EE/4950:	01      	(Pose 126: horizontal flip)
EE/4951:	01      	(Pose 127: horizontal flip)

Y position of landed airship on screen
EE/4952:	00
EE/4953:	01
EE/4954:	02
EE/4955:	03
EE/4956:	04
EE/4957:	04
EE/4958:	05
EE/4959:	06
EE/495A:	06
EE/495B:	07
EE/495C:	08
EE/495D:	09
EE/495E:	0A
EE/495F:	0A
EE/4960:	0B
EE/4961:	0C
EE/4962:	0C
EE/4963:	0D
EE/4964:	0E
EE/4965:	0F
EE/4966:	10
EE/4967:	11
EE/4968:	12
EE/4969:	12
EE/496A:	13
EE/496B:	14
EE/496C:	15
EE/496D:	16
EE/496E:	16
EE/496F:	17
EE/4970:	18
EE/4971:	19
EE/4972:	1A
EE/4973:	1A
EE/4974:	1B
EE/4975:	1C
EE/4976:	1D
EE/4977:	1E
EE/4978:	1F
EE/4979:	20
EE/497A:	21
EE/497B:	22
EE/497C:	22
EE/497D:	23
EE/497E:	24
EE/497F:	25
EE/4980:	26
EE/4981:	27
EE/4982:	28
EE/4983:	29
EE/4984:	2A
EE/4985:	2B
EE/4986:	2C
EE/4987:	2D
EE/4988:	2E
EE/4989:	2F
EE/498A:	30
EE/498B:	31
EE/498C:	32
EE/498D:	33
EE/498E:	34
EE/498F:	35
EE/4990:	36
EE/4991:	37
EE/4992:	38
EE/4993:	39
EE/4994:	3A
EE/4995:	3B
EE/4996:	3C
EE/4997:	3D
EE/4998:	3E
EE/4999:	3F
EE/499A:	40
EE/499B:	41
EE/499C:	42
EE/499D:	43
EE/499E:	45
EE/499F:	46
EE/49A0:	47
EE/49A1:	48
EE/49A2:	49
EE/49A3:	4A
EE/49A4:	4B
EE/49A5:	4C
EE/49A6:	4E
EE/49A7:	4F
EE/49A8:	50
EE/49A9:	51
EE/49AA:	52
EE/49AB:	54
EE/49AC:	55
EE/49AD:	56
EE/49AE:	57
EE/49AF:	58
EE/49B0:	5A
EE/49B1:	5B
EE/49B2:	5C
EE/49B3:	5E
EE/49B4:	5F
EE/49B5:	60
EE/49B6:	61
EE/49B7:	63
EE/49B8:	64
EE/49B9:	65
EE/49BA:	66
EE/49BB:	68
EE/49BC:	69
EE/49BD:	6B
EE/49BE:	6C
EE/49BF:	6D
EE/49C0:	6F
EE/49C1:	70
EE/49C2:	71
EE/49C3:	73
EE/49C4:	74
EE/49C5:	76
EE/49C6:	77
EE/49C7:	78
EE/49C8:	7A
EE/49C9:	7C
EE/49CA:	7D
EE/49CB:	7E
EE/49CC:	80
EE/49CD:	81
EE/49CE:	83
EE/49CF:	85
EE/49D0:	86
EE/49D1:	88
EE/49D2:	89
EE/49D3:	8B
EE/49D4:	8C
EE/49D5:	8E
EE/49D6:	90
EE/49D7:	91
EE/49D8:	93
EE/49D9:	94
EE/49DA:	96
EE/49DB:	98
EE/49DC:	9A
EE/49DD:	9B
EE/49DE:	9D
EE/49DF:	9F
EE/49E0:	A0
EE/49E1:	A3
EE/49E2:	A4
EE/49E3:	A6
EE/49E4:	A8
EE/49E5:	A9
EE/49E6:	AB
EE/49E7:	AD
EE/49E8:	AF
EE/49E9:	B1
EE/49EA:	B3
EE/49EB:	B5
EE/49EC:	B7
EE/49ED:	B8
EE/49EE:	BB
EE/49EF:	BD
EE/49F0:	BE
EE/49F1:	C1
EE/49F2:	C3
EE/49F3:	C4
EE/49F4:	C7
EE/49F5:	C9
EE/49F6:	CB
EE/49F7:	CD
EE/49F8:	CF
EE/49F9:	D1
EE/49FA:	D3
EE/49FB:	D6
EE/49FC:	D8
EE/49FD:	DA
EE/49FE:	DC
EE/49FF:	DF
EE/4A00:	E2
EE/4A01:	E5
EE/4A02:	E8
EE/4A03:	EB

Draw the flashing arrows from the Serpent Trench
EE/4A04:	08      	PHP
EE/4A05:	E220    	SEP #$20       (8-bit A)
EE/4A07:	A5E8    	LDA $E8
EE/4A09:	8902    	BIT #$02       (Are the flashing arrows visible?)
EE/4A0B:	D00C    	BNE $4A19      (Branch if so)
EE/4A0D:	A900    	LDA #$00
EE/4A0F:	8FE0B57E	STA $7EB5E0
EE/4A13:	8FE8B57E	STA $7EB5E8
EE/4A17:	8072    	BRA $4A8B      (Exit)
EE/4A19:	AF61B67E	LDA $7EB661
EE/4A1D:	1A      	INC A
EE/4A1E:	8F61B67E	STA $7EB661    (Save changes)
EE/4A22:	C904    	CMP #$04
EE/4A24:	9015    	BCC $4A3B
EE/4A26:	A900    	LDA #$00
EE/4A28:	8F61B67E	STA $7EB661
EE/4A2C:	AF60B67E	LDA $7EB660
EE/4A30:	1A      	INC A
EE/4A31:	C904    	CMP #$04
EE/4A33:	9002    	BCC $4A37
EE/4A35:	A900    	LDA #$00
EE/4A37:	8F60B67E	STA $7EB660    (Save changes)
EE/4A3B:	ADB61E  	LDA $1EB6      (Event bits)
EE/4A3E:	8980    	BIT #$80       (Bearing left at the fork in the Serpent Trench?) (BMI...)
EE/4A40:	D01D    	BNE $4A5F      (Branch if so)
EE/4A42:	A960    	LDA #$60
EE/4A44:	8FEAB57E	STA $7EB5EA
EE/4A48:	A96B    	LDA #$6B
EE/4A4A:	8FE8B57E	STA $7EB5E8
EE/4A4E:	A998    	LDA #$98
EE/4A50:	8FE2B57E	STA $7EB5E2
EE/4A54:	AF60B67E	LDA $7EB660
EE/4A58:	F020    	BEQ $4A7A
EE/4A5A:	18      	CLC            (Clear Carry for addition)
EE/4A5B:	693E    	ADC #$3E       (Add 62)
EE/4A5D:	801B    	BRA $4A7A
EE/4A5F:	A998    	LDA #$98
EE/4A61:	8FEAB57E	STA $7EB5EA
EE/4A65:	A96A    	LDA #$6A
EE/4A67:	8FE8B57E	STA $7EB5E8
EE/4A6B:	A960    	LDA #$60
EE/4A6D:	8FE2B57E	STA $7EB5E2
EE/4A71:	AF60B67E	LDA $7EB660
EE/4A75:	F003    	BEQ $4A7A
EE/4A77:	18      	CLC            (Clear Carry for addition)
EE/4A78:	6941    	ADC #$41       (Add 65)
EE/4A7A:	8FE0B57E	STA $7EB5E0
EE/4A7E:	A9FF    	LDA #$FF
EE/4A80:	38      	SEC            (Set Carry for subtraction)
EE/4A81:	E585    	SBC $85
EE/4A83:	8FE4B57E	STA $7EB5E4
EE/4A87:	8FECB57E	STA $7EB5EC
EE/4A8B:	28      	PLP
EE/4A8C:	60      	RTS

Initialize flying Esper Terra
EE/4A8D:	08      	PHP
EE/4A8E:	8B      	PHB
EE/4A8F:	E220    	SEP #$20       (8-bit A)
EE/4A91:	C210    	REP #$10       (16-bit indexes)
EE/4A93:	A97E    	LDA #$7E
EE/4A95:	48      	PHA
EE/4A96:	AB      	PLB            (Set data bank to 7E)
EE/4A97:	AF3CB2EE	LDA $EEB23C    (Pointer to palette for Esper Terra, low byte)
EE/4A9B:	85D2    	STA $D2        (Set source address, low byte)
EE/4A9D:	AF3DB2EE	LDA $EEB23D    (Pointer to palette for Esper Terra, middle byte)
EE/4AA1:	85D3    	STA $D3        (Set source address, middle byte)
EE/4AA3:	AF3EB2EE	LDA $EEB23E    (Pointer to palette for Esper Terra, high byte)
EE/4AA7:	85D4    	STA $D4        (Set source address, high byte)
EE/4AA9:	A901    	LDA #$01
EE/4AAB:	8F60B67E	STA $7EB660
EE/4AAF:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/4AB2:	C220    	REP #$20       (16-bit A)
EE/4AB4:	B7D2    	LDA [$D2],Y    (Load a palette color from the ROM)
EE/4AB6:	9940E1  	STA $E140,Y    (Save to palette for Esper Terra)
EE/4AB9:	C8      	INY
EE/4ABA:	C8      	INY            (Point to next color)
EE/4ABB:	C02000  	CPY #$0020     (Copied the entire palette?)
EE/4ABE:	D0F4    	BNE $4AB4      (Loop if not)
EE/4AC0:	E220    	SEP #$20       (8-bit A)
EE/4AC2:	A90D    	LDA #$0D
EE/4AC4:	8FCA0000	STA $0000CA    (This will draw flying Esper Terra) ($CA...)
EE/4AC8:	A9E0    	LDA #$E0       (Line 225, which is off the screen)
EE/4ACA:	8F396B7E	STA $7E6B39    (Hide left portion of vehicle shadow)
EE/4ACE:	8F3D6B7E	STA $7E6B3D    (Hide right portion of vehicle shadow)
EE/4AD2:	8002    	BRA $4AD6      (Branch into the next function)

Draw flying Esper Terra
EE/4AD4:	08      	PHP
EE/4AD5:	8B      	PHB
EE/4AD6:	E220    	SEP #$20       (8-bit A)
EE/4AD8:	7B      	TDC            (Zero A)
EE/4AD9:	48      	PHA
EE/4ADA:	AB      	PLB            (Set data bank to 00)
EE/4ADB:	C220    	REP #$20       (16-bit A)
EE/4ADD:	A529    	LDA $29        (Rotation speed)
EE/4ADF:	C9AA00  	CMP #$00AA     (High enough to use a left-facing sprite?)
EE/4AE2:	100A    	BPL $4AEE      (Branch if so)
EE/4AE4:	C956FF  	CMP #$FF56     (High enough to use a right-facing sprite?)
EE/4AE7:	300A    	BMI $4AF3      (Branch if so)
EE/4AE9:	A94E00  	LDA #$004E     (Value for Terra facing neither left nor right)
EE/4AEC:	8008    	BRA $4AF6
EE/4AEE:	A95000  	LDA #$0050     (Value for airship facing left)
EE/4AF1:	8003    	BRA $4AF6      (Skip next instruction)
EE/4AF3:	A95200  	LDA #$0052     (Value for airship facing right)
EE/4AF6:	8558    	STA $58        (Save it temporarily)
EE/4AF8:	E220    	SEP #$20       (8-bit A) (SEP #$21...)
EE/4AFA:	A90C    	LDA #$0C
EE/4AFC:	38      	SEC            (Set Carry for subtraction)
EE/4AFD:	E527    	SBC $27        (Subtract high byte of vehicle speed)
EE/4AFF:	4A      	LSR A          (Divide by 2)
EE/4B00:	1A      	INC A
EE/4B01:	8F54B67E	STA $7EB654
EE/4B05:	AF52B67E	LDA $7EB652
EE/4B09:	3A      	DEC A          (Decrease by one)
EE/4B0A:	F006    	BEQ $4B12
EE/4B0C:	8F52B67E	STA $7EB652    (Save changes)
EE/4B10:	8011    	BRA $4B23
EE/4B12:	AF50B67E	LDA $7EB650
EE/4B16:	3A      	DEC A          (Decrease by one)
EE/4B17:	8F50B67E	STA $7EB650    (Save changes)
EE/4B1B:	AF54B67E	LDA $7EB654
EE/4B1F:	8F52B67E	STA $7EB652
EE/4B23:	AF50B67E	LDA $7EB650
EE/4B27:	2901    	AND #$01
EE/4B29:	18      	CLC            (Clear Carry for addition)
EE/4B2A:	6558    	ADC $58
EE/4B2C:	8FD0B57E	STA $7EB5D0
EE/4B30:	A530    	LDA $30        (Vehicle height, high byte)
EE/4B32:	8D0242  	STA $4202      (Save as multiplicand)
EE/4B35:	A951    	LDA #$51
EE/4B37:	8D0342  	STA $4203      (Set multiplier to 81)
EE/4B3A:	38      	SEC            (Set Carry for subtraction)
EE/4B3B:	A980    	LDA #$80
EE/4B3D:	8FD2B57E	STA $7EB5D2
EE/4B41:	ED1742  	SBC $4217      (Subtract high byte of product)
EE/4B44:	8FD4B57E	STA $7EB5D4
EE/4B48:	A5E7    	LDA $E7
EE/4B4A:	8920    	BIT #$20       (Is the "hide vehicle and map character" bit set?)
EE/4B4C:	F006    	BEQ $4B54      (Exit if not)
EE/4B4E:	A9F0    	LDA #$F0
EE/4B50:	8FD4B57E	STA $7EB5D4
EE/4B54:	AB      	PLB
EE/4B55:	28      	PLP
EE/4B56:	60      	RTS

Draw a ship
EE/4B57:	8B      	PHB
EE/4B58:	08      	PHP
EE/4B59:	E230    	SEP #$30       (8-bit A and indexes)
EE/4B5B:	A902    	LDA #$02
EE/4B5D:	8F53B67E	STA $7EB653
EE/4B61:	AF52B67E	LDA $7EB652
EE/4B65:	18      	CLC            (Clear Carry for addition)
EE/4B66:	65F3    	ADC $F3        (Add to event speed of map character)
EE/4B68:	C980    	CMP #$80       (Compare to 128)
EE/4B6A:	900D    	BCC $4B79      (Branch if smaller)
EE/4B6C:	AF50B67E	LDA $7EB650
EE/4B70:	1A      	INC A          (Add one)
EE/4B71:	2901    	AND #$01
EE/4B73:	8F50B67E	STA $7EB650    (Save changes)
EE/4B77:	A900    	LDA #$00       (TDC...)
EE/4B79:	8F52B67E	STA $7EB652
EE/4B7D:	A5F6    	LDA $F6        (Current direction)
EE/4B7F:	0A      	ASL A          (Multiply by 2)
EE/4B80:	18      	CLC            (Clear Carry for addition)
EE/4B81:	6F50B67E	ADC $7EB650    (Add 0 or 1, depending on the above)
EE/4B85:	6937    	ADC #$37       (Add 55 to reach the appropriate pose number)
EE/4B87:	8FD0B57E	STA $7EB5D0
EE/4B8B:	A980    	LDA #$80
EE/4B8D:	8FD2B57E	STA $7EB5D2
EE/4B91:	A980    	LDA #$80       (...)
EE/4B93:	8FD4B57E	STA $7EB5D4
EE/4B97:	A9E6    	LDA #$E6
EE/4B99:	48      	PHA
EE/4B9A:	AB      	PLB            (Set data bank to E6)
EE/4B9B:	A900    	LDA #$00       (TDC, TAX...)
EE/4B9D:	EB      	XBA            (Exchange B and A)
EE/4B9E:	A080    	LDY #$80       (Point to E6/8080)
EE/4BA0:	A200    	LDX #$00       (Zero X)
EE/4BA2:	C220    	REP #$20       (16-bit A)
EE/4BA4:	B90080  	LDA $8000,Y    (Load a character palette color)
EE/4BA7:	9F00E17E	STA $7EE100,X  (Save to palette for opaque portions of map character)
EE/4BAB:	9F80E17E	STA $7EE180,X  (Save to palette for transparent portions of map character)
EE/4BAF:	C8      	INY
EE/4BB0:	C8      	INY            (Point to next color in ROM)
EE/4BB1:	E8      	INX
EE/4BB2:	E8      	INX            (Point to next color in RAM)
EE/4BB3:	E020    	CPX #$20       (Copied the entire palette?)
EE/4BB5:	D0ED    	BNE $4BA4      (Loop if not)
EE/4BB7:	28      	PLP
EE/4BB8:	AB      	PLB
EE/4BB9:	60      	RTS

Draw an airship taking off
EE/4BBA:	08      	PHP
EE/4BBB:	C220    	REP #$20       (16-bit A)
EE/4BBD:	AD641F  	LDA $1F64      (Map number and flags in SRAM variables)
EE/4BC0:	29FF01  	AND #$01FF     (Isolate map number)
EE/4BC3:	F00C    	BEQ $4BD1      (Branch if World of Balance)
EE/4BC5:	A96400  	LDA #$0064
EE/4BC8:	855A    	STA $5A
EE/4BCA:	A90200  	LDA #$0002
EE/4BCD:	855C    	STA $5C        (BRA $4BD9...)
EE/4BCF:	800A    	BRA $4BDB      (Skip next four instructions)
EE/4BD1:	A94700  	LDA #$0047
EE/4BD4:	855A    	STA $5A
EE/4BD6:	A90600  	LDA #$0006
EE/4BD9:	855C    	STA $5C
EE/4BDB:	AF64B67E	LDA $7EB664    (Load waiting time)
EE/4BDF:	3A      	DEC A          (Decrease by one)
EE/4BE0:	D021    	BNE $4C03      (Branch if not zero)
EE/4BE2:	AF66B67E	LDA $7EB666
EE/4BE6:	F003    	BEQ $4BEB
EE/4BE8:	7B      	TDC            (Zero A)
EE/4BE9:	8002    	BRA $4BED      (Skip next instruction)
EE/4BEB:	A55C    	LDA $5C
EE/4BED:	8F66B67E	STA $7EB666    (Save changes)
EE/4BF1:	AF68B67E	LDA $7EB668
EE/4BF5:	C90200  	CMP #$0002
EE/4BF8:	9005    	BCC $4BFF
EE/4BFA:	3A      	DEC A
EE/4BFB:	8F68B67E	STA $7EB668    (Save changes)
EE/4BFF:	AF68B67E	LDA $7EB668
EE/4C03:	8F64B67E	STA $7EB664
EE/4C07:	AF68B67E	LDA $7EB668
EE/4C0B:	C90200  	CMP #$0002
EE/4C0E:	9006    	BCC $4C16
EE/4C10:	AF60B67E	LDA $7EB660
EE/4C14:	802C    	BRA $4C42
EE/4C16:	AF63B67E	LDA $7EB663
EE/4C1A:	29FF00  	AND #$00FF
EE/4C1D:	8558    	STA $58        (Save it temporarily)
EE/4C1F:	AF62B67E	LDA $7EB662
EE/4C23:	18      	CLC            (Clear Carry for addition)
EE/4C24:	692000  	ADC #$0020     (Add 32)
EE/4C27:	8F62B67E	STA $7EB662    (Save changes)
EE/4C2B:	AF60B67E	LDA $7EB660
EE/4C2F:	38      	SEC            (Set Carry for subtraction)
EE/4C30:	E558    	SBC $58
EE/4C32:	8F60B67E	STA $7EB660    (Save changes)
EE/4C36:	C9F8FF  	CMP #$FFF8
EE/4C39:	1007    	BPL $4C42
EE/4C3B:	A9F8FF  	LDA #$FFF8
EE/4C3E:	8F60B67E	STA $7EB660    (Save changes)
EE/4C42:	E220    	SEP #$20       (8-bit A)
EE/4C44:	8FD4B57E	STA $7EB5D4
EE/4C48:	A975    	LDA #$75
EE/4C4A:	8FD2B57E	STA $7EB5D2
EE/4C4E:	A55A    	LDA $5A
EE/4C50:	18      	CLC            (Clear Carry for addition)
EE/4C51:	6F66B67E	ADC $7EB666
EE/4C55:	8FD0B57E	STA $7EB5D0
EE/4C59:	28      	PLP
EE/4C5A:	60      	RTS

Initialize a flying airship after the airship has taken off
EE/4C5B:	08      	PHP
EE/4C5C:	C220    	REP #$20       (16-bit A)
EE/4C5E:	AF64B67E	LDA $7EB664
EE/4C62:	3A      	DEC A
EE/4C63:	D013    	BNE $4C78
EE/4C65:	AF66B67E	LDA $7EB666
EE/4C69:	F003    	BEQ $4C6E
EE/4C6B:	7B      	TDC            (Zero A)
EE/4C6C:	8003    	BRA $4C71      (Skip next instruction)
EE/4C6E:	A90100  	LDA #$0001     (TDC, INC A...)
EE/4C71:	8F66B67E	STA $7EB666
EE/4C75:	A90500  	LDA #$0005
EE/4C78:	8F64B67E	STA $7EB664
EE/4C7C:	AF62B67E	LDA $7EB662
EE/4C80:	38      	SEC            (Set Carry for subtraction)
EE/4C81:	E92000  	SBC #$0020     (Subtract 32)
EE/4C84:	8F62B67E	STA $7EB662    (Save changes)
EE/4C88:	AF63B67E	LDA $7EB663
EE/4C8C:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/4C8F:	8558    	STA $58        (Save it temporarily)
EE/4C91:	AF60B67E	LDA $7EB660
EE/4C95:	18      	CLC            (Clear Carry for addition)
EE/4C96:	6558    	ADC $58
EE/4C98:	8F60B67E	STA $7EB660    (Save changes)
EE/4C9C:	C98000  	CMP #$0080
EE/4C9F:	3008    	BMI $4CA9
EE/4CA1:	A90100  	LDA #$0001     (TDC, INC A...)
EE/4CA4:	85CA    	STA $CA        (This will animate the airship)
EE/4CA6:	A98000  	LDA #$0080
EE/4CA9:	E220    	SEP #$20       (8-bit A)
EE/4CAB:	8FD4B57E	STA $7EB5D4
EE/4CAF:	A980    	LDA #$80
EE/4CB1:	8FD2B57E	STA $7EB5D2
EE/4CB5:	A901    	LDA #$01
EE/4CB7:	18      	CLC            (Clear Carry for addition)
EE/4CB8:	6F66B67E	ADC $7EB666
EE/4CBC:	8FD0B57E	STA $7EB5D0
EE/4CC0:	28      	PLP
EE/4CC1:	60      	RTS

Draw a landing airship
EE/4CC2:	08      	PHP
EE/4CC3:	C220    	REP #$20       (16-bit A)
EE/4CC5:	AF64B67E	LDA $7EB664
EE/4CC9:	3A      	DEC A
EE/4CCA:	D013    	BNE $4CDF
EE/4CCC:	AF66B67E	LDA $7EB666
EE/4CD0:	F003    	BEQ $4CD5
EE/4CD2:	7B      	TDC            (Zero A)
EE/4CD3:	8003    	BRA $4CD8      (Skip next instruction)
EE/4CD5:	A90100  	LDA #$0001     (TDC, INC A...)
EE/4CD8:	8F66B67E	STA $7EB666    (Save changes)
EE/4CDC:	A90500  	LDA #$0005
EE/4CDF:	8F64B67E	STA $7EB664
EE/4CE3:	AF63B67E	LDA $7EB663
EE/4CE7:	29FF00  	AND #$00FF
EE/4CEA:	8558    	STA $58        (Save it temporarily)
EE/4CEC:	AF62B67E	LDA $7EB662
EE/4CF0:	18      	CLC            (Clear Carry for addition)
EE/4CF1:	692000  	ADC #$0020     (Add 32)
EE/4CF4:	8F62B67E	STA $7EB662    (Save changes)
EE/4CF8:	AF60B67E	LDA $7EB660
EE/4CFC:	38      	SEC            (Set Carry for subtraction)
EE/4CFD:	E558    	SBC $58
EE/4CFF:	8F60B67E	STA $7EB660    (Save changes)
EE/4D03:	C9F8FF  	CMP #$FFF8
EE/4D06:	1013    	BPL $4D1B
EE/4D08:	A9F8FF  	LDA #$FFF8
EE/4D0B:	8F60B67E	STA $7EB660
EE/4D0F:	A90900  	LDA #$0009
EE/4D12:	85CA    	STA $CA        (This will initialize and eventually draw the map character and landed airship)
EE/4D14:	A94006  	LDA #$0640
EE/4D17:	8F62B67E	STA $7EB662
EE/4D1B:	E220    	SEP #$20       (8-bit A)
EE/4D1D:	8FD4B57E	STA $7EB5D4
EE/4D21:	A980    	LDA #$80
EE/4D23:	8FD2B57E	STA $7EB5D2
EE/4D27:	A901    	LDA #$01
EE/4D29:	18      	CLC            (Clear Carry for addition)
EE/4D2A:	6F66B67E	ADC $7EB666
EE/4D2E:	8FD0B57E	STA $7EB5D0
EE/4D32:	28      	PLP
EE/4D33:	60      	RTS

Initialize the leader and landed airship after the airship has landed
EE/4D34:	08      	PHP
EE/4D35:	C220    	REP #$20       (16-bit A)
EE/4D37:	AD641F  	LDA $1F64      (Map number and flags in SRAM variables)
EE/4D3A:	29FF01  	AND #$01FF     (Isolate map number)
EE/4D3D:	F00C    	BEQ $4D4B      (Branch if World of Balance)
EE/4D3F:	A96400  	LDA #$0064
EE/4D42:	855A    	STA $5A
EE/4D44:	A90200  	LDA #$0002
EE/4D47:	855C    	STA $5C
EE/4D49:	800A    	BRA $4D55
EE/4D4B:	A94700  	LDA #$0047
EE/4D4E:	855A    	STA $5A
EE/4D50:	A90600  	LDA #$0006
EE/4D53:	855C    	STA $5C
EE/4D55:	AF64B67E	LDA $7EB664
EE/4D59:	3A      	DEC A
EE/4D5A:	D02D    	BNE $4D89
EE/4D5C:	AF66B67E	LDA $7EB666
EE/4D60:	F003    	BEQ $4D65
EE/4D62:	7B      	TDC            (Zero A)
EE/4D63:	800E    	BRA $4D73
EE/4D65:	AF68B67E	LDA $7EB668
EE/4D69:	C90F00  	CMP #$000F
EE/4D6C:	B004    	BCS $4D72
EE/4D6E:	A55C    	LDA $5C
EE/4D70:	8001    	BRA $4D73      (Skip next instruction)
EE/4D72:	7B      	TDC            (Zero A)
EE/4D73:	8F66B67E	STA $7EB666
EE/4D77:	AF68B67E	LDA $7EB668
EE/4D7B:	C91300  	CMP #$0013
EE/4D7E:	B005    	BCS $4D85
EE/4D80:	1A      	INC A
EE/4D81:	8F68B67E	STA $7EB668    (Save changes)
EE/4D85:	AF68B67E	LDA $7EB668
EE/4D89:	8F64B67E	STA $7EB664
EE/4D8D:	AF62B67E	LDA $7EB662
EE/4D91:	C91000  	CMP #$0010
EE/4D94:	1006    	BPL $4D9C
EE/4D96:	AF60B67E	LDA $7EB660
EE/4D9A:	8021    	BRA $4DBD
EE/4D9C:	AF62B67E	LDA $7EB662    (Save changes)
EE/4DA0:	38      	SEC            (Set Carry for subtraction)
EE/4DA1:	E90800  	SBC #$0008     (Subtract 8)
EE/4DA4:	8F62B67E	STA $7EB662
EE/4DA8:	AF62B67E	LDA $7EB662    (...)
EE/4DAC:	18      	CLC            (Clear Carry for addition)
EE/4DAD:	6F60B67E	ADC $7EB660
EE/4DB1:	8F60B67E	STA $7EB660
EE/4DB5:	C90078  	CMP #$7800
EE/4DB8:	3003    	BMI $4DBD
EE/4DBA:	A90078  	LDA #$7800
EE/4DBD:	E220    	SEP #$20       (8-bit A)
EE/4DBF:	EB      	XBA            (Exchange B and A)
EE/4DC0:	8FD4B57E	STA $7EB5D4
EE/4DC4:	A975    	LDA #$75
EE/4DC6:	8FD2B57E	STA $7EB5D2
EE/4DCA:	A55A    	LDA $5A
EE/4DCC:	18      	CLC            (Clear Carry for addition)
EE/4DCD:	6F66B67E	ADC $7EB666
EE/4DD1:	8FD0B57E	STA $7EB5D0
EE/4DD5:	AF68B67E	LDA $7EB668
EE/4DD9:	C911    	CMP #$11       (Compare to 17)
EE/4DDB:	D004    	BNE $4DE1      (Exit if equal)
EE/4DDD:	A903    	LDA #$03
EE/4DDF:	85CA    	STA $CA        (This will draw the map character and landed airship)
EE/4DE1:	28      	PLP
EE/4DE2:	60      	RTS

Sprites used for a departing chocobo
EE/4DE3:	49      	(Facing down with feet in same position)
EE/4DE4:	4A      	(Facing down with right foot in front)
EE/4DE5:	49      	(Facing down with feet in same position)
EE/4DE6:	4B      	(Facing down with left foot in front)
EE/4DE7:	4C      	(Facing down with an open beak)

Draw the dismounting from a chocobo
EE/4DE8:	08      	PHP
EE/4DE9:	8B      	PHB
EE/4DEA:	E220    	SEP #$20       (8-bit A)
EE/4DEC:	AF6CB67E	LDA $7EB66C    (Progress of animation)
EE/4DF0:	C928    	CMP #$28       (Reached point 40?)
EE/4DF2:	D00F    	BNE $4E03      (Branch if not)
EE/4DF4:	A980    	LDA #$80
EE/4DF6:	8D4221  	STA $2142      (Set normal speaker balance)
EE/4DF9:	A9D9    	LDA #$D9
EE/4DFB:	8D4121  	STA $2141      (Sound effect for a departing chocobo)
EE/4DFE:	A918    	LDA #$18
EE/4E00:	8D4021  	STA $2140      (APU I/O register 0)
EE/4E03:	C220    	REP #$20       (16-bit A)
EE/4E05:	AF6CB67E	LDA $7EB66C    (Progress of animation)
EE/4E09:	C92000  	CMP #$0020     (Compare to 32)
EE/4E0C:	903A    	BCC $4E48      (Branch if smaller)
EE/4E0E:	C93000  	CMP #$0030     (Compare to 48)
EE/4E11:	B009    	BCS $4E1C      (Branch if equal or greater)
EE/4E13:	A90400  	LDA #$0004
EE/4E16:	8F62B67E	STA $7EB662
EE/4E1A:	802C    	BRA $4E48
EE/4E1C:	AF62B67E	LDA $7EB662
EE/4E20:	1A      	INC A          (Add one)
EE/4E21:	290300  	AND #$0003
EE/4E24:	8F62B67E	STA $7EB662    (Save changes)
EE/4E28:	AF6EB67E	LDA $7EB66E
EE/4E2C:	18      	CLC            (Clear Carry for addition)
EE/4E2D:	696000  	ADC #$0060     (Add 96)
EE/4E30:	8F6EB67E	STA $7EB66E    (Save changes)
EE/4E34:	AF60B67E	LDA $7EB660
EE/4E38:	1A      	INC A          (Add one)
EE/4E39:	1A      	INC A          (Add one)
EE/4E3A:	8F60B67E	STA $7EB660    (Save changes)
EE/4E3E:	C9F000  	CMP #$00F0
EE/4E41:	3005    	BMI $4E48
EE/4E43:	A90B00  	LDA #$000B
EE/4E46:	85CA    	STA $CA        (This will finalize the dismounting)
EE/4E48:	AF68B67E	LDA $7EB668
EE/4E4C:	C9B800  	CMP #$00B8
EE/4E4F:	B01B    	BCS $4E6C      (Branch if equal or greater)
EE/4E51:	18      	CLC            (Clear Carry for addition)
EE/4E52:	6F66B67E	ADC $7EB666
EE/4E56:	8F68B67E	STA $7EB668    (Save changes)
EE/4E5A:	AF66B67E	LDA $7EB666
EE/4E5E:	1A      	INC A          (Add one)
EE/4E5F:	8F66B67E	STA $7EB666    (Save changes)
EE/4E63:	AF6AB67E	LDA $7EB66A
EE/4E67:	3A      	DEC A          (Decrease by one)
EE/4E68:	8F6AB67E	STA $7EB66A    (Save changes)
EE/4E6C:	AF6CB67E	LDA $7EB66C    (Progress of animation)
EE/4E70:	C90900  	CMP #$0009     (Compare to 9)
EE/4E73:	B005    	BCS $4E7A      (Branch if equal or greater)
EE/4E75:	A90F00  	LDA #$000F     (Pose of character facing left with both arms up)
EE/4E78:	800D    	BRA $4E87      (Branch to save the pose number)
EE/4E7A:	C91000  	CMP #$0010     (Compare progress to 16)
EE/4E7D:	B005    	BCS $4E84      (Branch if equal or greater)
EE/4E7F:	A90900  	LDA #$0009     (Pose of character facing left while kneeling)
EE/4E82:	8003    	BRA $4E87      (Skip next instruction)
EE/4E84:	A90100  	LDA #$0001     (Pose of character facing down) (TDC, INC A...)
EE/4E87:	E220    	SEP #$20       (8-bit A)
EE/4E89:	85F7    	STA $F7        (Set pose number of map character)
EE/4E8B:	AF60B67E	LDA $7EB660
EE/4E8F:	8FD4B57E	STA $7EB5D4
EE/4E93:	AF6FB67E	LDA $7EB66F
EE/4E97:	8FD2B57E	STA $7EB5D2
EE/4E9B:	AF62B67E	LDA $7EB662
EE/4E9F:	AA      	TAX            (Transfer A to X)
EE/4EA0:	BFE34DEE	LDA $EE4DE3,X  (Load a sprite number for the chocobo)
EE/4EA4:	8FD0B57E	STA $7EB5D0    (Set sprite)
EE/4EA8:	AF6AB67E	LDA $7EB66A
EE/4EAC:	8FDAB57E	STA $7EB5DA
EE/4EB0:	AF68B67E	LDA $7EB668
EE/4EB4:	8FDCB57E	STA $7EB5DC
EE/4EB8:	7B      	TDC            (Zero A)
EE/4EB9:	A5F7    	LDA $F7        (Pose number of map character)
EE/4EBB:	AA      	TAX            (Transfer A to X)
EE/4EBC:	BF5248EE	LDA $EE4852,X  (Mirror upper half?)
EE/4EC0:	D00E    	BNE $4ED0      (Branch if so)
EE/4EC2:	BFD248EE	LDA $EE48D2,X  (Mirror lower half?)
EE/4EC6:	D004    	BNE $4ECC      (Branch if so)
EE/4EC8:	A926    	LDA #$26
EE/4ECA:	8010    	BRA $4EDC
EE/4ECC:	A927    	LDA #$27
EE/4ECE:	800C    	BRA $4EDC
EE/4ED0:	BFD248EE	LDA $EE48D2,X  (Mirror lower half?)
EE/4ED4:	D004    	BNE $4EDA      (Branch if so)
EE/4ED6:	A928    	LDA #$28
EE/4ED8:	8002    	BRA $4EDC      (Skip next instruction)
EE/4EDA:	A929    	LDA #$29
EE/4EDC:	8FD8B57E	STA $7EB5D8
EE/4EE0:	C220    	REP #$20       (16-bit A)
EE/4EE2:	AF6CB67E	LDA $7EB66C    (Progress of animation)
EE/4EE6:	1A      	INC A          (Add one)
EE/4EE7:	8F6CB67E	STA $7EB66C    (Save changes)
EE/4EEB:	E230    	SEP #$30       (8-bit A and indexes)
EE/4EED:	A9E6    	LDA #$E6
EE/4EEF:	48      	PHA
EE/4EF0:	AB      	PLB            (Set data bank to E6)
EE/4EF1:	A900    	LDA #$00       (TDC...)
EE/4EF3:	EB      	XBA            (Exchange B and A)
EE/4EF4:	AFFC1100	LDA $0011FC    (Palette number for map character)
EE/4EF8:	2907    	AND #$07       (0 to 7)
EE/4EFA:	0A      	ASL A          (Multiply by 2)
EE/4EFB:	0A      	ASL A          (Multiply by 4)
EE/4EFC:	0A      	ASL A          (Multiply by 8)
EE/4EFD:	0A      	ASL A          (Multiply by 16)
EE/4EFE:	0A      	ASL A          (Multiply by 32)
EE/4EFF:	A8      	TAY            (Set as palette index)
EE/4F00:	A200    	LDX #$00       (Zero 8-bit X)
EE/4F02:	C220    	REP #$20       (16-bit A)
EE/4F04:	B90080  	LDA $8000,Y    (Load a character palette color)
EE/4F07:	9F00E17E	STA $7EE100,X  (Save in RAM)
EE/4F0B:	C8      	INY
EE/4F0C:	C8      	INY            (Point to next ROM byte)
EE/4F0D:	E8      	INX
EE/4F0E:	E8      	INX            (Point to next RAM byte)
EE/4F0F:	E020    	CPX #$20       (Copied the entire palette?)
EE/4F11:	D0F1    	BNE $4F04      (Loop if not)
EE/4F13:	AB      	PLB
EE/4F14:	28      	PLP
EE/4F15:	60      	RTS

Finalize the dismounting from a chocobo (clears OAM)
EE/4F16:	08      	PHP
EE/4F17:	C220    	REP #$20       (16-bit A)
EE/4F19:	A90000  	LDA #$0000     (Zero A) (LDA $00...)
EE/4F1C:	8FD0B57E	STA $7EB5D0
EE/4F20:	8FD8B57E	STA $7EB5D8
EE/4F24:	28      	PLP
EE/4F25:	60      	RTS

Initialize the airship emerging from the ocean
EE/4F26:	08      	PHP
EE/4F27:	8B      	PHB
EE/4F28:	E220    	SEP #$20       (8-bit A)
EE/4F2A:	C210    	REP #$10       (16-bit indexes)
EE/4F2C:	A97E    	LDA #$7E
EE/4F2E:	48      	PHA
EE/4F2F:	AB      	PLB            (Set data bank to 7E)
EE/4F30:	A9E0    	LDA #$E0       (Line 225 is off the screen)
EE/4F32:	8D396B  	STA $6B39      (Hide left portion of vehicle shadow)
EE/4F35:	8D3D6B  	STA $6B3D      (Hide right portion of vehicle shadow)
EE/4F38:	20BE40  	JSR $40BE      (Set $6D30-$6D34 to #$AA, and zero $6D35-$6D4F)
EE/4F3B:	A20080  	LDX #$8000
EE/4F3E:	8E50B6  	STX $B650
EE/4F41:	A200A7  	LDX #$A700
EE/4F44:	8E52B6  	STX $B652
EE/4F47:	A20001  	LDX #$0100
EE/4F4A:	8E5AB6  	STX $B65A
EE/4F4D:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/4F50:	8E5CB6  	STX $B65C
EE/4F53:	A20000  	LDX #$0000     (...)
EE/4F56:	7B      	TDC            (Zero A)
EE/4F57:	9D60B6  	STA $B660,X
EE/4F5A:	8A      	TXA            (Transfer X to A)
EE/4F5B:	18      	CLC            (Clear Carry for addition)
EE/4F5C:	6908    	ADC #$08       (Add 8)
EE/4F5E:	AA      	TAX            (Transfer A to X)
EE/4F5F:	C980    	CMP #$80       (Compare to 128)
EE/4F61:	D0F3    	BNE $4F56      (Loop if not)
EE/4F63:	A90F    	LDA #$0F
EE/4F65:	85CA    	STA $CA        (This will draw the airship and water objects)
EE/4F67:	8002    	BRA $4F6B      (Branch into the next function)

Draw an arship emerging from the ocean
EE/4F69:	08      	PHP
EE/4F6A:	8B      	PHB
EE/4F6B:	E220    	SEP #$20       (8-bit A)
EE/4F6D:	A97E    	LDA #$7E
EE/4F6F:	48      	PHA
EE/4F70:	AB      	PLB            (Set data bank to 7E)
EE/4F71:	AD5BB6  	LDA $B65B
EE/4F74:	3A      	DEC A
EE/4F75:	D00C    	BNE $4F83
EE/4F77:	AD5AB6  	LDA $B65A
EE/4F7A:	1A      	INC A
EE/4F7B:	1A      	INC A
EE/4F7C:	2902    	AND #$02
EE/4F7E:	8D5AB6  	STA $B65A      (Save changes)
EE/4F81:	A904    	LDA #$04
EE/4F83:	8D5BB6  	STA $B65B
EE/4F86:	AD51B6  	LDA $B651
EE/4F89:	8D02B6  	STA $B602
EE/4F8C:	AD53B6  	LDA $B653
EE/4F8F:	8D04B6  	STA $B604
EE/4F92:	A964    	LDA #$64       (100)
EE/4F94:	18      	CLC            (Clear Carry for addition)
EE/4F95:	6D5AB6  	ADC $B65A
EE/4F98:	8D00B6  	STA $B600
EE/4F9B:	C221    	REP #$21       (16-bit A; clear Carry)
EE/4F9D:	AD52B6  	LDA $B652
EE/4FA0:	E91F00  	SBC #$001F
EE/4FA3:	C90078  	CMP #$7800
EE/4FA6:	B003    	BCS $4FAB
EE/4FA8:	A90078  	LDA #$7800
EE/4FAB:	8D52B6  	STA $B652      (Save changes)
EE/4FAE:	E221    	SEP #$21       (8-bit A; set Carry)
EE/4FB0:	EB      	XBA            (Exchange B and A)
EE/4FB1:	E990    	SBC #$90
EE/4FB3:	B003    	BCS $4FB8      (Branch if no underflow)
EE/4FB5:	7B      	TDC            (Zero A)
EE/4FB6:	8006    	BRA $4FBE      (Skip next five instructions)
EE/4FB8:	4A      	LSR A          (Divide by 2)
EE/4FB9:	4A      	LSR A          (Divide by 4)
EE/4FBA:	4A      	LSR A          (Divide by 8)
EE/4FBB:	18      	CLC            (Clear Carry for addition)
EE/4FBC:	6967    	ADC #$67       (Add 103)
EE/4FBE:	8D54B6  	STA $B654
EE/4FC1:	AD53B6  	LDA $B653
EE/4FC4:	38      	SEC            (Set Carry for subtraction)
EE/4FC5:	E978    	SBC #$78       (Subtract 120)
EE/4FC7:	29F8    	AND #$F8
EE/4FC9:	4A      	LSR A          (Divide by 2)
EE/4FCA:	8558    	STA $58        (Save it temporarily)
EE/4FCC:	4A      	LSR A          (Divide by 2)
EE/4FCD:	18      	CLC            (Clear Carry for addition)
EE/4FCE:	6558    	ADC $58
EE/4FD0:	8D56B6  	STA $B656
EE/4FD3:	A9A7    	LDA #$A7
EE/4FD5:	38      	SEC            (Set Carry for subtraction)
EE/4FD6:	ED53B6  	SBC $B653
EE/4FD9:	E914    	SBC #$14
EE/4FDB:	8D58B6  	STA $B658
EE/4FDE:	AD51B6  	LDA $B651
EE/4FE1:	8DFAB5  	STA $B5FA
EE/4FE4:	A990    	LDA #$90
EE/4FE6:	8DFCB5  	STA $B5FC
EE/4FE9:	AD54B6  	LDA $B654
EE/4FEC:	8DF8B5  	STA $B5F8
EE/4FEF:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/4FF2:	AE5CB6  	LDX $B65C
EE/4FF5:	E220    	SEP #$20       (8-bit A)
EE/4FF7:	7B      	TDC            (Zero A)
EE/4FF8:	BD60B6  	LDA $B660,X
EE/4FFB:	F01C    	BEQ $5019
EE/4FFD:	BD62B6  	LDA $B662,X
EE/5000:	3A      	DEC A
EE/5001:	D010    	BNE $5013
EE/5003:	BD60B6  	LDA $B660,X
EE/5006:	1A      	INC A          (Add one)
EE/5007:	C907    	CMP #$07       (Compare to 7)
EE/5009:	9002    	BCC $500D      (Skip next instruction if smaller)
EE/500B:	A900    	LDA #$00       (TDC...)
EE/500D:	9D60B6  	STA $B660,X    (Save changes)
EE/5010:	BD61B6  	LDA $B661,X
EE/5013:	9D62B6  	STA $B662,X
EE/5016:	BD60B6  	LDA $B660,X
EE/5019:	DA      	PHX            (Save X)
EE/501A:	18      	CLC            (Clear Carry for addition)
EE/501B:	6D56B6  	ADC $B656
EE/501E:	AA      	TAX            (Transfer A to X)
EE/501F:	BF9651EE	LDA $EE5196,X  (Load a pose number for the water objects)
EE/5023:	FA      	PLX            (Restore X)
EE/5024:	99D0B5  	STA $B5D0,Y
EE/5027:	BD63B6  	LDA $B663,X
EE/502A:	99D4B5  	STA $B5D4,Y
EE/502D:	C221    	REP #$21       (16-bit A; clear Carry)
EE/502F:	BD64B6  	LDA $B664,X
EE/5032:	6D66B6  	ADC $B666
EE/5035:	9D64B6  	STA $B664,X    (Save changes)
EE/5038:	99D2B5  	STA $B5D2,Y
EE/503B:	8A      	TXA            (Transfer X to A)
EE/503C:	18      	CLC            (Clear Carry for addition)
EE/503D:	690800  	ADC #$0008     (Add 8)
EE/5040:	AA      	TAX            (Transfer A to X)
EE/5041:	98      	TYA            (Transfer Y to A)
EE/5042:	18      	CLC            (Clear Carry for addition)
EE/5043:	690800  	ADC #$0008     (Add 8)
EE/5046:	A8      	TAY            (Transfer A to Y)
EE/5047:	C92800  	CMP #$0028     (Compare to 40)
EE/504A:	D0A9    	BNE $4FF5      (Loop if not equal)
EE/504C:	AC5CB6  	LDY $B65C
EE/504F:	E220    	SEP #$20       (8-bit A)
EE/5051:	AF6D1F00	LDA $001F6D    (RNG index)
EE/5055:	1A      	INC A          (Add one)
EE/5056:	8F6D1F00	STA $001F6D    (Save changes)
EE/505A:	AA      	TAX            (Transfer A to X)
EE/505B:	865A    	STX $5A
EE/505D:	B960B6  	LDA $B660,Y
EE/5060:	F00B    	BEQ $506D
EE/5062:	98      	TYA            (Transfer Y to A)
EE/5063:	18      	CLC            (Clear Carry for addition)
EE/5064:	6908    	ADC #$08       (Add 8)
EE/5066:	A8      	TAY            (Transfer A to Y)
EE/5067:	C928    	CMP #$28       (Compare to 40)
EE/5069:	D0F2    	BNE $505D      (Loop if not equal)
EE/506B:	8040    	BRA $50AD
EE/506D:	E65A    	INC $5A
EE/506F:	A65A    	LDX $5A
EE/5071:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/5075:	2903    	AND #$03       (0 to 3)
EE/5077:	18      	CLC            (Clear Carry for addition)
EE/5078:	6906    	ADC #$06       (Add 6)
EE/507A:	8D66B6  	STA $B666
EE/507D:	E65A    	INC $5A
EE/507F:	A65A    	LDX $5A
EE/5081:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/5085:	2901    	AND #$01       (0 or 1)
EE/5087:	1A      	INC A          (Add one)
EE/5088:	9961B6  	STA $B661,Y
EE/508B:	9962B6  	STA $B662,Y
EE/508E:	E65A    	INC $5A
EE/5090:	A65A    	LDX $5A
EE/5092:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/5096:	2907    	AND #$07       (0 to 7)
EE/5098:	18      	CLC            (Clear Carry for addition)
EE/5099:	698C    	ADC #$8C       (Add 140)
EE/509B:	9963B6  	STA $B663,Y
EE/509E:	AD51B6  	LDA $B651
EE/50A1:	18      	CLC            (Clear Carry for addition)
EE/50A2:	6D58B6  	ADC $B658
EE/50A5:	9964B6  	STA $B664,Y
EE/50A8:	A901    	LDA #$01
EE/50AA:	9960B6  	STA $B660,Y
EE/50AD:	A928    	LDA #$28
EE/50AF:	38      	SEC            (Set Carry for subtraction)
EE/50B0:	ED5CB6  	SBC $B65C
EE/50B3:	8D5CB6  	STA $B65C
EE/50B6:	C220    	REP #$20       (16-bit A)
EE/50B8:	AD52B6  	LDA $B652
EE/50BB:	C90078  	CMP #$7800
EE/50BE:	D013    	BNE $50D3
EE/50C0:	9C5CB6  	STZ $B65C
EE/50C3:	9C54B6  	STZ $B654
EE/50C6:	9C56B6  	STZ $B656
EE/50C9:	9C58B6  	STZ $B658
EE/50CC:	A91400  	LDA #$0014
EE/50CF:	8FCA0000	STA $0000CA    (This will propel the airship leftward)
EE/50D3:	AB      	PLB
EE/50D4:	28      	PLP
EE/50D5:	60      	RTS

This function propels the airship leftward after it has emerged from the ocean
EE/50D6:	08      	PHP
EE/50D7:	8B      	PHB
EE/50D8:	E220    	SEP #$20       (8-bit A)
EE/50DA:	A97E    	LDA #$7E
EE/50DC:	48      	PHA
EE/50DD:	AB      	PLB            (Set data bank to 7E)
EE/50DE:	C220    	REP #$20       (16-bit A)
EE/50E0:	7B      	TDC            (Zero A)
EE/50E1:	AD5CB6  	LDA $B65C
EE/50E4:	C9B400  	CMP #$00B4     (Compare to 180)
EE/50E7:	B005    	BCS $50EE      (Branch if equal or greater)
EE/50E9:	1A      	INC A
EE/50EA:	1A      	INC A
EE/50EB:	8D5CB6  	STA $B65C
EE/50EE:	AA      	TAX            (Transfer A to X)
EE/50EF:	E220    	SEP #$20       (8-bit A)
EE/50F1:	BFF1FEEF	LDA $EFFEF1,X
EE/50F5:	8F024200	STA $004202    (Save as multiplicand)
EE/50F9:	A9C0    	LDA #$C0
EE/50FB:	8F034200	STA $004203    (Set multiplier to 192)
EE/50FF:	EA      	NOP
EE/5100:	EA      	NOP
EE/5101:	EA      	NOP
EE/5102:	AF174200	LDA $004217    (High byte of product)
EE/5106:	8558    	STA $58        (Save it temporarily)
EE/5108:	6459    	STZ $59        (Clear the next variable)
EE/510A:	C221    	REP #$21       (16-bit A; clear Carry)
EE/510C:	AD50B6  	LDA $B650
EE/510F:	6558    	ADC $58
EE/5111:	8D50B6  	STA $B650      (Save changes)
EE/5114:	AD58B6  	LDA $B658
EE/5117:	690000  	ADC #$0000     (Add one if Carry set) (ADC $00...)
EE/511A:	8D58B6  	STA $B658      (Save changes)
EE/511D:	AD5CB6  	LDA $B65C
EE/5120:	C9B400  	CMP #$00B4     (Compare to 180)
EE/5123:	D031    	BNE $5156      (Branch if not equal)
EE/5125:	C220    	REP #$20       (16-bit A)
EE/5127:	38      	SEC            (Set Carry for subtraction)
EE/5128:	AD50B6  	LDA $B650
EE/512B:	ED54B6  	SBC $B654
EE/512E:	8D50B6  	STA $B650      (Save changes)
EE/5131:	AD58B6  	LDA $B658
EE/5134:	E90000  	SBC #$0000     (Subtract one if Carry clear) (SBC $00...)
EE/5137:	8D58B6  	STA $B658      (Save changes)
EE/513A:	AD54B6  	LDA $B654
EE/513D:	691000  	ADC #$0010
EE/5140:	8D54B6  	STA $B654      (Save changes)
EE/5143:	AD52B6  	LDA $B652
EE/5146:	38      	SEC            (Set Carry for subtraction)
EE/5147:	ED56B6  	SBC $B656
EE/514A:	8D52B6  	STA $B652      (Save changes)
EE/514D:	AD56B6  	LDA $B656
EE/5150:	690400  	ADC #$0004
EE/5153:	8D56B6  	STA $B656      (Save changes)
EE/5156:	E220    	SEP #$20       (8-bit A)
EE/5158:	AD5BB6  	LDA $B65B
EE/515B:	3A      	DEC A
EE/515C:	D017    	BNE $5175
EE/515E:	AD5AB6  	LDA $B65A
EE/5161:	1A      	INC A
EE/5162:	1A      	INC A
EE/5163:	2902    	AND #$02
EE/5165:	8D5AB6  	STA $B65A      (Save changes)
EE/5168:	AD5CB6  	LDA $B65C
EE/516B:	C9B4    	CMP #$B4       (Compare to 180)
EE/516D:	F004    	BEQ $5173      (Branch if equal)
EE/516F:	A906    	LDA #$06
EE/5171:	8002    	BRA $5175      (Skip next instruction)
EE/5173:	A902    	LDA #$02
EE/5175:	8D5BB6  	STA $B65B
EE/5178:	AD51B6  	LDA $B651
EE/517B:	8D02B6  	STA $B602
EE/517E:	AD58B6  	LDA $B658
EE/5181:	8D03B6  	STA $B603
EE/5184:	AD53B6  	LDA $B653
EE/5187:	8D04B6  	STA $B604
EE/518A:	A964    	LDA #$64       (100)
EE/518C:	18      	CLC            (Clear Carry for addition)
EE/518D:	6D5AB6  	ADC $B65A
EE/5190:	8D00B6  	STA $B600
EE/5193:	AB      	PLB
EE/5194:	28      	PLP
EE/5195:	60      	RTS

Sprites used for water objects displayed below the airship in certain scenes
EE/5196:	00      	(Blank entry)
EE/5197:	00      	(Blank entry)
EE/5198:	00      	(Blank entry)
EE/5199:	00      	(Blank entry)
EE/519A:	00      	(Blank entry)
EE/519B:	00      	(Blank entry)
EE/519C:	00      	(Blank entry)
EE/519D:	56      	(Smallest)
EE/519E:	56      	(Smallest)
EE/519F:	56      	(Smallest)
EE/51A0:	56      	(Smallest)
EE/51A1:	56      	(Smallest)
EE/51A2:	00      	(Blank entry)
EE/51A3:	57      	(Small)
EE/51A4:	57      	(Small)
EE/51A5:	56      	(Smallest)
EE/51A6:	56      	(Smallest)
EE/51A7:	56      	(Smallest)

Sprites used for fire objects displayed when the world is getting zapped
EE/51A8:	00      	(Blank entry)
EE/51A9:	59      	(Largest)
EE/51AA:	58      	(Large)
EE/51AB:	57      	(Small)
EE/51AC:	56      	(Smallest)
EE/51AD:	56      	(Smallest)
EE/51AE:	00      	(Blank entry)
EE/51AF:	58      	(Large)
EE/51B0:	57      	(Small)
EE/51B1:	57      	(Small)
EE/51B2:	56      	(Smallest)
EE/51B3:	56      	(Smallest)
EE/51B4:	00      	(Blank entry)
EE/51B5:	57      	(Small)
EE/51B6:	57      	(Small)
EE/51B7:	56      	(Smallest)
EE/51B8:	56      	(Smallest)
EE/51B9:	56      	(Smallest)
EE/51BA:	00      	(Blank entry)
EE/51BB:	57      	(Small)
EE/51BC:	56      	(Smallest)
EE/51BD:	56      	(Smallest)
EE/51BE:	56      	(Smallest)
EE/51BF:	56      	(Smallest)
EE/51C0:	00      	(Blank entry)

Regarding the above, it is worth mentioning that both the water and the fire objects
are represented by the same sprites. The sole difference lies in the palettes.


Initialize a smoking airship
EE/51C1:	08      	PHP
EE/51C2:	8B      	PHB
EE/51C3:	E220    	SEP #$20       (8-bit A)
EE/51C5:	A97E    	LDA #$7E
EE/51C7:	48      	PHA
EE/51C8:	AB      	PLB            (Set data bank to 7E)
EE/51C9:	C230    	REP #$30       (16-bit A and indexes)
EE/51CB:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/51CE:	BDC0E1  	LDA $E1C0,X    (Palette color)
EE/51D1:	9D40E1  	STA $E140,X
EE/51D4:	E8      	INX
EE/51D5:	E8      	INX            (Point to next color)
EE/51D6:	E02000  	CPX #$0020     (Copied the entire palette?)
EE/51D9:	D0F3    	BNE $51CE      (Loop if not)
EE/51DB:	7B      	TDC            (Zero A)
EE/51DC:	8D5CB6  	STA $B65C      (Put STA $B658 after this...)
EE/51DF:	E220    	SEP #$20       (8-bit A)
EE/51E1:	A90A    	LDA #$0A
EE/51E3:	8D52B6  	STA $B652
EE/51E6:	7B      	TDC            (Zero A)
EE/51E7:	8D58B6  	STA $B658
EE/51EA:	8D59B6  	STA $B659
EE/51ED:	8D54B6  	STA $B654
EE/51F0:	A902    	LDA #$02
EE/51F2:	8D56B6  	STA $B656
EE/51F5:	A959    	LDA #$59
EE/51F7:	8D5BB6  	STA $B65B
EE/51FA:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/51FD:	7B      	TDC            (Zero A)
EE/51FE:	9D60B6  	STA $B660,X
EE/5201:	8A      	TXA            (Transfer X to A)
EE/5202:	18      	CLC            (Clear Carry for addition)
EE/5203:	6908    	ADC #$08       (Add 8)
EE/5205:	AA      	TAX            (Transfer A to X)
EE/5206:	E03000  	CPX #$0030     (Compare X to 48)
EE/5209:	D0F2    	BNE $51FD      (Loop if not equal)
EE/520B:	A911    	LDA #$11
EE/520D:	85CA    	STA $CA        (This will draw the smoking airship)
EE/520F:	8002    	BRA $5213      (Branch into the next function)

Draw a smoking airship
EE/5211:	08      	PHP
EE/5212:	8B      	PHB
EE/5213:	E220    	SEP #$20       (8-bit A)
EE/5215:	A97E    	LDA #$7E
EE/5217:	48      	PHA
EE/5218:	AB      	PLB            (Set data bank to 7E)
EE/5219:	AD56B6  	LDA $B656
EE/521C:	3A      	DEC A
EE/521D:	D031    	BNE $5250
EE/521F:	C220    	REP #$20       (16-bit A) (REP #$21...)
EE/5221:	AD5AB6  	LDA $B65A
EE/5224:	18      	CLC            (Clear Carry for addition)
EE/5225:	692000  	ADC #$0020     (Add 32)
EE/5228:	8D5AB6  	STA $B65A      (Save changes)
EE/522B:	AD54B6  	LDA $B654
EE/522E:	AA      	TAX            (Transfer A to X)
EE/522F:	1A      	INC A
EE/5230:	1A      	INC A
EE/5231:	8D54B6  	STA $B654      (Save changes)
EE/5234:	E220    	SEP #$20       (8-bit A)
EE/5236:	BF0000C5	LDA $C50000,X  (The initial portion of bank C5 is used as a table!)
EE/523A:	2903    	AND #$03       (0 to 3)
EE/523C:	38      	SEC            (Set Carry for subtraction)
EE/523D:	E901    	SBC #$01       (Subtract one)
EE/523F:	8D58B6  	STA $B658
EE/5242:	BF0100C5	LDA $C50001,X  (The initial portion of bank C5 is used as a table!)
EE/5246:	2903    	AND #$03       (0 to 3)
EE/5248:	38      	SEC            (Set Carry for subtraction)
EE/5249:	E901    	SBC #$01       (Subtract one)
EE/524B:	8D59B6  	STA $B659
EE/524E:	A903    	LDA #$03
EE/5250:	8D56B6  	STA $B656
EE/5253:	AD52B6  	LDA $B652
EE/5256:	3A      	DEC A
EE/5257:	F005    	BEQ $525E
EE/5259:	8D52B6  	STA $B652      (Save changes)
EE/525C:	800C    	BRA $526A
EE/525E:	AD50B6  	LDA $B650
EE/5261:	3A      	DEC A
EE/5262:	8D50B6  	STA $B650      (Save changes) (DEC $B65E...)
EE/5265:	A908    	LDA #$08
EE/5267:	8D52B6  	STA $B652
EE/526A:	AD50B6  	LDA $B650
EE/526D:	2901    	AND #$01
EE/526F:	1A      	INC A
EE/5270:	8D00B6  	STA $B600
EE/5273:	AD58B6  	LDA $B658
EE/5276:	18      	CLC            (Clear Carry for addition)
EE/5277:	6980    	ADC #$80       (Add 128)
EE/5279:	8D02B6  	STA $B602
EE/527C:	AD59B6  	LDA $B659
EE/527F:	18      	CLC            (Clear Carry for addition)
EE/5280:	6D5BB6  	ADC $B65B
EE/5283:	8D04B6  	STA $B604
EE/5286:	A00000  	LDY #$0000     (Zero Y) (TDC, TAY...)
EE/5289:	7B      	TDC            (Zero A)
EE/528A:	AD5CB6  	LDA $B65C
EE/528D:	AA      	TAX            (Transfer A to X)
EE/528E:	E220    	SEP #$20       (8-bit A)
EE/5290:	BD60B6  	LDA $B660,X
EE/5293:	F01C    	BEQ $52B1
EE/5295:	BD62B6  	LDA $B662,X
EE/5298:	3A      	DEC A
EE/5299:	D010    	BNE $52AB
EE/529B:	BD60B6  	LDA $B660,X
EE/529E:	1A      	INC A
EE/529F:	C95F    	CMP #$5F
EE/52A1:	9002    	BCC $52A5
EE/52A3:	A900    	LDA #$00       (TDC...)
EE/52A5:	9D60B6  	STA $B660,X
EE/52A8:	BD61B6  	LDA $B661,X
EE/52AB:	9D62B6  	STA $B662,X
EE/52AE:	BD60B6  	LDA $B660,X
EE/52B1:	99D0B5  	STA $B5D0,Y
EE/52B4:	BD67B6  	LDA $B667,X
EE/52B7:	18      	CLC            (Clear Carry for addition)
EE/52B8:	6903    	ADC #$03       (Add 3)
EE/52BA:	9D67B6  	STA $B667,X
EE/52BD:	99D4B5  	STA $B5D4,Y
EE/52C0:	C221    	REP #$21       (16-bit A; clear Carry)
EE/52C2:	BD63B6  	LDA $B663,X
EE/52C5:	7D65B6  	ADC $B665,X
EE/52C8:	9D65B6  	STA $B665,X
EE/52CB:	E220    	SEP #$20       (8-bit A)
EE/52CD:	EB      	XBA            (Exchange B and A)
EE/52CE:	99D2B5  	STA $B5D2,Y
EE/52D1:	C221    	REP #$21       (16-bit A; clear Carry)
EE/52D3:	8A      	TXA            (Transfer X to A)
EE/52D4:	690800  	ADC #$0008     (Add 8)
EE/52D7:	C92800  	CMP #$0028     (Compare to 40)
EE/52DA:	9001    	BCC $52DD      (Branch if smaller)
EE/52DC:	7B      	TDC            (Zero A)
EE/52DD:	AA      	TAX            (Transfer A to X)
EE/52DE:	98      	TYA            (Transfer Y to A)
EE/52DF:	18      	CLC            (Clear Carry for addition)
EE/52E0:	690800  	ADC #$0008     (Add 8)
EE/52E3:	A8      	TAY            (Transfer A to Y)
EE/52E4:	C92800  	CMP #$0028     (Compare to 40)
EE/52E7:	D0A5    	BNE $528E      (If not equal, loop)
EE/52E9:	AD5CB6  	LDA $B65C
EE/52EC:	18      	CLC            (Clear Carry for addition)
EE/52ED:	690800  	ADC #$0008     (Add 8)
EE/52F0:	C92800  	CMP #$0028     (Compare to 40)
EE/52F3:	9001    	BCC $52F6      (Branch if smaller)
EE/52F5:	7B      	TDC            (Zero A)
EE/52F6:	8D5CB6  	STA $B65C
EE/52F9:	AA      	TAX            (...)
EE/52FA:	8A      	TXA            (...)
EE/52FB:	38      	SEC            (Set Carry for subtraction)
EE/52FC:	E91000  	SBC #$0010     (Subtract 16)
EE/52FF:	1003    	BPL $5304
EE/5301:	A92000  	LDA #$0020
EE/5304:	A8      	TAY            (Transfer A to Y)
EE/5305:	E220    	SEP #$20       (8-bit A)
EE/5307:	B960B6  	LDA $B660,Y
EE/530A:	D041    	BNE $534D
EE/530C:	AE54B6  	LDX $B654
EE/530F:	BF0000C2	LDA $C20000,X  (The initial portion of bank C2 is used as a table!)
EE/5313:	C920    	CMP #$20       (Compare to 32)
EE/5315:	9036    	BCC $534D      (Exit if smaller)
EE/5317:	A95B    	LDA #$5B
EE/5319:	9960B6  	STA $B660,Y
EE/531C:	BF0000EE	LDA $EE0000,X  (The initial portion of bank EE is used as a table!)
EE/5320:	2903    	AND #$03       (0 to 3)
EE/5322:	1A      	INC A          (Add one)
EE/5323:	9961B6  	STA $B661,Y
EE/5326:	9962B6  	STA $B662,Y
EE/5329:	AE54B6  	LDX $B654
EE/532C:	C220    	REP #$20       (16-bit A)
EE/532E:	BF0000C1	LDA $C10000,X  (The initial portion of bank C1 is used as a table!)
EE/5332:	29FF01  	AND #$01FF
EE/5335:	8558    	STA $58        (Save it temporarily)
EE/5337:	A90001  	LDA #$0100
EE/533A:	E558    	SBC $58        (Subtract the temporarily saved value)
EE/533C:	9963B6  	STA $B663,Y
EE/533F:	A90084  	LDA #$8400
EE/5342:	9965B6  	STA $B665,Y
EE/5345:	E220    	SEP #$20       (8-bit A)
EE/5347:	AD04B6  	LDA $B604
EE/534A:	9967B6  	STA $B667,Y
EE/534D:	AB      	PLB
EE/534E:	28      	PLP
EE/534F:	60      	RTS

Sprites for a flying pigeon
EE/5350:	5F      	(Wings up)
EE/5351:	60      	(Wings centered)
EE/5352:	61      	(Wings down)
EE/5353:	60      	(Wings centered)

Initialize a flying pigeon
EE/5354:	8B      	PHB
EE/5355:	08      	PHP
EE/5356:	E220    	SEP #$20       (8-bit A)
EE/5358:	A9E6    	LDA #$E6
EE/535A:	48      	PHA
EE/535B:	AB      	PLB            (Set data bank to E6)
EE/535C:	A913    	LDA #$13
EE/535E:	8FCA0000	STA $0000CA    (This will draw the pigeon)
EE/5362:	A9E0    	LDA #$E0       (Line 225 is off the screen)
EE/5364:	8F396B7E	STA $7E6B39    (Hide left portion of vehicle shadow)
EE/5368:	8F3D6B7E	STA $7E6B3D    (Hide right portion of vehicle shadow)
EE/536C:	A08000  	LDY #$0080
EE/536F:	A20000  	LDX #$0000     (Zero X)
EE/5372:	C220    	REP #$20       (16-bit A)
EE/5374:	B90080  	LDA $8000,Y    (Color for pigeon)
EE/5377:	9F40E17E	STA $7EE140,X  (Save in RAM)
EE/537B:	C8      	INY
EE/537C:	C8      	INY            (Point to next color in ROM)
EE/537D:	E8      	INX
EE/537E:	E8      	INX            (Point to next color in RAM)
EE/537F:	E02000  	CPX #$0020     (Copied the entire palette?)
EE/5382:	D0F0    	BNE $5374      (Loop if not)
EE/5384:	A90000  	LDA #$0000     (Zero A)
EE/5387:	8F60B67E	STA $7EB660
EE/538B:	A90100  	LDA #$0001     (INC A...)
EE/538E:	8F62B67E	STA $7EB662
EE/5392:	8002    	BRA $5396      (Branch into the next function)

Draw a flying pigeon
EE/5394:	8B      	PHB
EE/5395:	08      	PHP
EE/5396:	E220    	SEP #$20       (8-bit A)
EE/5398:	7B      	TDC            (Zero A)
EE/5399:	48      	PHA
EE/539A:	AB      	PLB            (Set data bank to 00)
EE/539B:	AF62B67E	LDA $7EB662
EE/539F:	3A      	DEC A
EE/53A0:	D00D    	BNE $53AF
EE/53A2:	AF60B67E	LDA $7EB660
EE/53A6:	1A      	INC A
EE/53A7:	2903    	AND #$03
EE/53A9:	8F60B67E	STA $7EB660    (Save changes)
EE/53AD:	A903    	LDA #$03
EE/53AF:	8F62B67E	STA $7EB662
EE/53B3:	7B      	TDC            (Zero A)
EE/53B4:	AF60B67E	LDA $7EB660
EE/53B8:	AA      	TAX            (Transfer A to X)
EE/53B9:	BF5053EE	LDA $EE5350,X  (Sprites for pigeon)
EE/53BD:	8FD0B57E	STA $7EB5D0    (Set sprite)
EE/53C1:	A530    	LDA $30        (Vehicle height, high byte)
EE/53C3:	8D0242  	STA $4202      (Save as multiplicand)
EE/53C6:	A951    	LDA #$51
EE/53C8:	8D0342  	STA $4203      (Set multiplier to 81)
EE/53CB:	38      	SEC            (Set Carry for subtraction)
EE/53CC:	A980    	LDA #$80
EE/53CE:	8FD2B57E	STA $7EB5D2
EE/53D2:	ED1742  	SBC $4217      (Subtract high byte of product)
EE/53D5:	8FD4B57E	STA $7EB5D4
EE/53D9:	28      	PLP
EE/53DA:	AB      	PLB
EE/53DB:	60      	RTS

Initialize the fire objects displayed when the world is getting zapped
EE/53DC:	08      	PHP
EE/53DD:	8B      	PHB
EE/53DE:	E220    	SEP #$20       (8-bit A)
EE/53E0:	C210    	REP #$10       (16-bit indexes)
EE/53E2:	A97E    	LDA #$7E
EE/53E4:	48      	PHA
EE/53E5:	AB      	PLB            (Set data bank to 7E)
EE/53E6:	A9E0    	LDA #$E0       (Line 225 is off the screen)
EE/53E8:	8D396B  	STA $6B39      (Hide left portion of vehicle shadow)
EE/53EB:	8D3D6B  	STA $6B3D      (Hide right portion of vehicle shadow)
EE/53EE:	20BE40  	JSR $40BE      (Set $6D30-$6D34 to #$AA, and zero $6D35-$6D4F)
EE/53F1:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/53F4:	8E5CB6  	STX $B65C
EE/53F7:	7B      	TDC            (Zero A)
EE/53F8:	9D60B6  	STA $B660,X
EE/53FB:	9D65B6  	STA $B665,X
EE/53FE:	8A      	TXA            (Transfer X to A)
EE/53FF:	18      	CLC            (Clear Carry for addition)
EE/5400:	6908    	ADC #$08       (Add 8)
EE/5402:	AA      	TAX            (Transfer A to X)
EE/5403:	C980    	CMP #$80       (128?)
EE/5405:	D0F0    	BNE $53F7      (Loop if not)
EE/5407:	A916    	LDA #$16
EE/5409:	85CA    	STA $CA        (This will draw the fire objects)
EE/540B:	8002    	BRA $540F      (Branch into the next function)

Draw the fire objects displayed when the world is getting zapped
EE/540D:	08      	PHP
EE/540E:	8B      	PHB
EE/540F:	E220    	SEP #$20       (8-bit A)
EE/5411:	A97E    	LDA #$7E
EE/5413:	48      	PHA
EE/5414:	AB      	PLB            (Set data bank to 7E)
EE/5415:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/5418:	AE5CB6  	LDX $B65C
EE/541B:	E220    	SEP #$20       (8-bit A)
EE/541D:	7B      	TDC            (Zero A)
EE/541E:	BD60B6  	LDA $B660,X
EE/5421:	F01B    	BEQ $543E
EE/5423:	BD62B6  	LDA $B662,X
EE/5426:	3A      	DEC A
EE/5427:	D00F    	BNE $5438
EE/5429:	BD60B6  	LDA $B660,X
EE/542C:	1A      	INC A
EE/542D:	C907    	CMP #$07
EE/542F:	9001    	BCC $5432
EE/5431:	7B      	TDC            (Zero A)
EE/5432:	9D60B6  	STA $B660,X    (Save changes)
EE/5435:	BD61B6  	LDA $B661,X
EE/5438:	9D62B6  	STA $B662,X
EE/543B:	BD60B6  	LDA $B660,X
EE/543E:	DA      	PHX            (Save X)
EE/543F:	AA      	TAX            (Transfer A to X)
EE/5440:	BFA851EE	LDA $EE51A8,X  (Load a pose number for the fire objects)
EE/5444:	FA      	PLX            (Restore X)
EE/5445:	99D0B5  	STA $B5D0,Y
EE/5448:	A5E9    	LDA $E9
EE/544A:	8908    	BIT #$08
EE/544C:	D00E    	BNE $545C
EE/544E:	BD63B6  	LDA $B663,X
EE/5451:	18      	CLC            (Clear Carry for addition)
EE/5452:	6906    	ADC #$06       (Add 6)
EE/5454:	9D63B6  	STA $B663,X    (Save changes) (BRA $5462...)
EE/5457:	99D4B5  	STA $B5D4,Y
EE/545A:	800C    	BRA $5468
EE/545C:	BD63B6  	LDA $B663,X
EE/545F:	18      	CLC            (Clear Carry for addition)
EE/5460:	6904    	ADC #$04       (Add 4)
EE/5462:	9D63B6  	STA $B663,X    (Save changes)
EE/5465:	99D4B5  	STA $B5D4,Y
EE/5468:	C220    	REP #$20       (16-bit A)
EE/546A:	A5E9    	LDA $E9
EE/546C:	890800  	BIT #$0008
EE/546F:	D00F    	BNE $5480
EE/5471:	BD64B6  	LDA $B664,X
EE/5474:	38      	SEC            (Set Carry for subtraction)
EE/5475:	ED66B6  	SBC $B666
EE/5478:	9D64B6  	STA $B664,X    (Save changes) (BRA $5487...)
EE/547B:	99D2B5  	STA $B5D2,Y
EE/547E:	800D    	BRA $548D
EE/5480:	18      	CLC            (Clear Carry for addition)
EE/5481:	BD64B6  	LDA $B664,X
EE/5484:	6D66B6  	ADC $B666
EE/5487:	9D64B6  	STA $B664,X    (Save changes)
EE/548A:	99D2B5  	STA $B5D2,Y
EE/548D:	8A      	TXA            (Transfer X to A)
EE/548E:	18      	CLC            (Clear Carry for addition)
EE/548F:	690800  	ADC #$0008     (Add 8)
EE/5492:	AA      	TAX            (Transfer A to X)
EE/5493:	98      	TYA            (Transfer Y to A)
EE/5494:	18      	CLC            (Clear Carry for addition)
EE/5495:	690800  	ADC #$0008     (Add 8)
EE/5498:	A8      	TAY            (Transfer A to Y)
EE/5499:	C92800  	CMP #$0028     (Compare to 40)
EE/549C:	F003    	BEQ $54A1      (Break out of loop if equal)
EE/549E:	4C1B54  	JMP $541B      (Loop)
EE/54A1:	AC5CB6  	LDY $B65C
EE/54A4:	E220    	SEP #$20       (8-bit A)
EE/54A6:	AF6D1F00	LDA $001F6D    (RNG index)
EE/54AA:	3A      	DEC A          (Decrease by one)
EE/54AB:	8F6D1F00	STA $001F6D    (Save changes)
EE/54AF:	AA      	TAX            (Transfer A to X)
EE/54B0:	865A    	STX $5A
EE/54B2:	B960B6  	LDA $B660,Y
EE/54B5:	F00B    	BEQ $54C2
EE/54B7:	98      	TYA            (Transfer Y to A)
EE/54B8:	18      	CLC            (Clear Carry for addition)
EE/54B9:	6908    	ADC #$08       (Add 8)
EE/54BB:	A8      	TAY            (Transfer A to Y)
EE/54BC:	C928    	CMP #$28       (Compare to 40)
EE/54BE:	D0F2    	BNE $54B2      (Loop if not equal)
EE/54C0:	8061    	BRA $5523      (Branch to bottom of function)
EE/54C2:	C65A    	DEC $5A
EE/54C4:	A65A    	LDX $5A
EE/54C6:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/54CA:	2903    	AND #$03       (0 to 3)
EE/54CC:	18      	CLC            (Clear Carry for addition)
EE/54CD:	6905    	ADC #$05       (Add 5)
EE/54CF:	8D66B6  	STA $B666
EE/54D2:	C65A    	DEC $5A
EE/54D4:	A65A    	LDX $5A
EE/54D6:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/54DA:	2901    	AND #$01       (0 or 1)
EE/54DC:	1A      	INC A          (Add one)
EE/54DD:	9961B6  	STA $B661,Y
EE/54E0:	9962B6  	STA $B662,Y
EE/54E3:	C65A    	DEC $5A
EE/54E5:	A65A    	LDX $5A
EE/54E7:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/54EB:	2907    	AND #$07       (0 to 7)
EE/54ED:	18      	CLC            (Clear Carry for addition)
EE/54EE:	6907    	ADC #$07       (Add 7)
EE/54F0:	855C    	STA $5C
EE/54F2:	AD53B6  	LDA $B653
EE/54F5:	E55C    	SBC $5C
EE/54F7:	9963B6  	STA $B663,Y
EE/54FA:	C220    	REP #$20       (16-bit A)
EE/54FC:	A5E9    	LDA $E9
EE/54FE:	890800  	BIT #$0008
EE/5501:	D00C    	BNE $550F
EE/5503:	AD51B6  	LDA $B651
EE/5506:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/5509:	18      	CLC            (Clear Carry for addition)
EE/550A:	690800  	ADC #$0008     (Add 8)
EE/550D:	800A    	BRA $5519
EE/550F:	AD51B6  	LDA $B651
EE/5512:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/5515:	38      	SEC            (Set Carry for subtraction)
EE/5516:	E90800  	SBC #$0008     (Subtract 8)
EE/5519:	9964B6  	STA $B664,Y
EE/551C:	E220    	SEP #$20       (8-bit A)
EE/551E:	A901    	LDA #$01
EE/5520:	9960B6  	STA $B660,Y
EE/5523:	A928    	LDA #$28
EE/5525:	38      	SEC            (Set Carry for subtraction)
EE/5526:	ED5CB6  	SBC $B65C
EE/5529:	8D5CB6  	STA $B65C
EE/552C:	AB      	PLB
EE/552D:	28      	PLP
EE/552E:	60      	RTS

Initialize the airship for the scene from the ending
EE/552F:	08      	PHP
EE/5530:	8B      	PHB
EE/5531:	E220    	SEP #$20       (8-bit A)
EE/5533:	C210    	REP #$10       (16-bit indexes)
EE/5535:	A97E    	LDA #$7E
EE/5537:	48      	PHA
EE/5538:	AB      	PLB            (Set data bank to 7E)
EE/5539:	A9E0    	LDA #$E0       (Line 225 is off the screen)
EE/553B:	8D396B  	STA $6B39      (Hide left portion of vehicle shadow)
EE/553E:	8D3D6B  	STA $6B3D      (Hide right portion of vehicle shadow)
EE/5541:	20BE40  	JSR $40BE      (Set $6D30-$6D34 to #$AA, and zero $6D35-$6D4F)
EE/5544:	A200C0  	LDX #$C000
EE/5547:	8E50B6  	STX $B650
EE/554A:	A20080  	LDX #$8000
EE/554D:	8E52B6  	STX $B652
EE/5550:	A26000  	LDX #$0060
EE/5553:	8E54B6  	STX $B654
EE/5556:	A200FF  	LDX #$FF00
EE/5559:	8E56B6  	STX $B656
EE/555C:	A20001  	LDX #$0100
EE/555F:	8E5AB6  	STX $B65A
EE/5562:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/5565:	8E5CB6  	STX $B65C
EE/5568:	A20000  	LDX #$0000     (...)
EE/556B:	8E5EB6  	STX $B65E
EE/556E:	A20000  	LDX #$0000     (...)
EE/5571:	7B      	TDC            (Zero A)
EE/5572:	9D60B6  	STA $B660,X
EE/5575:	8A      	TXA            (Transfer X to A)
EE/5576:	18      	CLC            (Clear Carry for addition)
EE/5577:	6908    	ADC #$08       (Add 8)
EE/5579:	AA      	TAX            (Transfer A to X)
EE/557A:	C980    	CMP #$80       (Compare to 128)
EE/557C:	D0F3    	BNE $5571      (Loop if not equal)
EE/557E:	A918    	LDA #$18
EE/5580:	85CA    	STA $CA        (This will draw the airship)
EE/5582:	8002    	BRA $5586      (Branch into the next function)

Animate the airship for the scene from the ending
EE/5584:	08      	PHP
EE/5585:	8B      	PHB
EE/5586:	E220    	SEP #$20       (8-bit A)
EE/5588:	A97E    	LDA #$7E
EE/558A:	48      	PHA
EE/558B:	AB      	PLB            (Set data bank to 7E)
EE/558C:	C220    	REP #$20       (16-bit A)
EE/558E:	AD5EB6  	LDA $B65E
EE/5591:	1A      	INC A          (Add one)
EE/5592:	8D5EB6  	STA $B65E      (Save changes) (INC $B65E, LDA $B65E...)
EE/5595:	C99800  	CMP #$0098     (Compare to 152)
EE/5598:	9014    	BCC $55AE      (Branch if smaller)
EE/559A:	C9B800  	CMP #$00B8     (Compare to 184)
EE/559D:	B00F    	BCS $55AE      (Branch if equal or greater)
EE/559F:	38      	SEC            (Set Carry for subtraction)
EE/55A0:	E99800  	SBC #$0098     (Subtract 152)
EE/55A3:	0A      	ASL A          (Multiply by 2)
EE/55A4:	0A      	ASL A          (Multiply by 4)
EE/55A5:	0A      	ASL A          (Multiply by 8)
EE/55A6:	0A      	ASL A          (Multiply by 16)
EE/55A7:	0A      	ASL A          (Multiply by 32)
EE/55A8:	18      	CLC            (Clear Carry for addition)
EE/55A9:	690004  	ADC #$0400     (Add 768)
EE/55AC:	8526    	STA $26        (Save as vehicle speed)
EE/55AE:	E220    	SEP #$20       (8-bit A)
EE/55B0:	AD5BB6  	LDA $B65B
EE/55B3:	3A      	DEC A
EE/55B4:	D01E    	BNE $55D4
EE/55B6:	AD5AB6  	LDA $B65A
EE/55B9:	1A      	INC A
EE/55BA:	1A      	INC A
EE/55BB:	2902    	AND #$02
EE/55BD:	8D5AB6  	STA $B65A      (Save changes)
EE/55C0:	C220    	REP #$20       (16-bit A)
EE/55C2:	AD5EB6  	LDA $B65E
EE/55C5:	C99800  	CMP #$0098     (Compare to 152)
EE/55C8:	B006    	BCS $55D0      (Branch if equal or greater)
EE/55CA:	E220    	SEP #$20       (8-bit A)
EE/55CC:	A904    	LDA #$04
EE/55CE:	8004    	BRA $55D4      (Skip next two instructions)
EE/55D0:	E220    	SEP #$20       (8-bit A)
EE/55D2:	A902    	LDA #$02
EE/55D4:	8D5BB6  	STA $B65B
EE/55D7:	AD51B6  	LDA $B651
EE/55DA:	8D02B6  	STA $B602
EE/55DD:	AD53B6  	LDA $B653
EE/55E0:	8D04B6  	STA $B604
EE/55E3:	A964    	LDA #$64
EE/55E5:	18      	CLC            (Clear Carry for addition)
EE/55E6:	6D5AB6  	ADC $B65A
EE/55E9:	8D00B6  	STA $B600
EE/55EC:	C221    	REP #$21       (16-bit A; clear Carry)
EE/55EE:	AD50B6  	LDA $B650
EE/55F1:	6D54B6  	ADC $B654
EE/55F4:	8D50B6  	STA $B650      (Save changes)
EE/55F7:	AD52B6  	LDA $B652
EE/55FA:	18      	CLC            (Clear Carry for addition)
EE/55FB:	6D56B6  	ADC $B656
EE/55FE:	8D52B6  	STA $B652      (Save changes)
EE/5601:	AD54B6  	LDA $B654
EE/5604:	38      	SEC            (Set Carry for subtraction)
EE/5605:	E90100  	SBC #$0001
EE/5608:	8D54B6  	STA $B654      (Save changes)
EE/560B:	AD5EB6  	LDA $B65E
EE/560E:	C97800  	CMP #$0078     (Compare to 120)
EE/5611:	B01A    	BCS $562D      (Branch if equal or greater)
EE/5613:	AD52B6  	LDA $B652
EE/5616:	C90080  	CMP #$8000     (Is the highest bit set?) (BMI...)
EE/5619:	B009    	BCS $5624      (Branch if so)
EE/561B:	AD56B6  	LDA $B656
EE/561E:	18      	CLC            (Clear Carry for addition)
EE/561F:	690500  	ADC #$0005     (Add 5)
EE/5622:	801A    	BRA $563E
EE/5624:	AD56B6  	LDA $B656
EE/5627:	38      	SEC            (Set Carry for subtraction)
EE/5628:	E90200  	SBC #$0002     (Subtract 2)
EE/562B:	8011    	BRA $563E
EE/562D:	AD54B6  	LDA $B654
EE/5630:	38      	SEC            (Set Carry for subtraction)
EE/5631:	E90300  	SBC #$0003     (Subtract 3)
EE/5634:	8D54B6  	STA $B654      (Save changes)
EE/5637:	AD56B6  	LDA $B656
EE/563A:	38      	SEC            (Set Carry for subtraction)
EE/563B:	E90600  	SBC #$0006     (Subtract 6)
EE/563E:	8D56B6  	STA $B656      (Save changes)
EE/5641:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/5644:	AE5CB6  	LDX $B65C
EE/5647:	E220    	SEP #$20       (8-bit A)
EE/5649:	7B      	TDC            (Zero A)
EE/564A:	BD60B6  	LDA $B660,X
EE/564D:	F01C    	BEQ $566B
EE/564F:	BD62B6  	LDA $B662,X
EE/5652:	3A      	DEC A
EE/5653:	D010    	BNE $5665
EE/5655:	BD60B6  	LDA $B660,X
EE/5658:	1A      	INC A          (Add one)
EE/5659:	C907    	CMP #$07       (Compare to 7)
EE/565B:	9002    	BCC $565F      (Skip next instruction if smaller)
EE/565D:	A900    	LDA #$00
EE/565F:	9D60B6  	STA $B660,X    (Save changes)
EE/5662:	BD61B6  	LDA $B661,X
EE/5665:	9D62B6  	STA $B662,X
EE/5668:	BD60B6  	LDA $B660,X
EE/566B:	DA      	PHX            (Save X)
EE/566C:	AA      	TAX            (Transfer A to X)
EE/566D:	BF9651EE	LDA $EE5196,X  (Load a pose number for the water objects) (Always zero...)
EE/5671:	FA      	PLX            (Restore X)
EE/5672:	99D0B5  	STA $B5D0,Y
EE/5675:	BD63B6  	LDA $B663,X
EE/5678:	99D4B5  	STA $B5D4,Y
EE/567B:	C221    	REP #$21       (16-bit A; clear Carry)
EE/567D:	BD64B6  	LDA $B664,X
EE/5680:	6D66B6  	ADC $B666
EE/5683:	9D64B6  	STA $B664,X    (Save changes)
EE/5686:	99D2B5  	STA $B5D2,Y
EE/5689:	8A      	TXA            (Transfer X to A)
EE/568A:	18      	CLC            (Clear Carry for addition)
EE/568B:	690800  	ADC #$0008     (Add 8)
EE/568E:	AA      	TAX            (Transfer A to X)
EE/568F:	98      	TYA            (Transfer Y to A)
EE/5690:	18      	CLC            (Clear Carry for addition)
EE/5691:	690800  	ADC #$0008     (Add 8)
EE/5694:	A8      	TAY            (Transfer A to Y)
EE/5695:	C92800  	CMP #$0028     (Compare to 40)
EE/5698:	D0AD    	BNE $5647      (Loop if not equal)
EE/569A:	AC5CB6  	LDY $B65C
EE/569D:	E220    	SEP #$20       (8-bit A)
EE/569F:	AF6D1F00	LDA $001F6D    (RNG index)
EE/56A3:	1A      	INC A          (Add one)
EE/56A4:	8F6D1F00	STA $001F6D    (Save changes)
EE/56A8:	AA      	TAX            (Transfer A to X)
EE/56A9:	865A    	STX $5A
EE/56AB:	B960B6  	LDA $B660,Y
EE/56AE:	F00B    	BEQ $56BB
EE/56B0:	98      	TYA            (Transfer Y to A)
EE/56B1:	18      	CLC            (Clear Carry for addition)
EE/56B2:	6908    	ADC #$08       (Add 8)
EE/56B4:	A8      	TAY            (Transfer A to Y)
EE/56B5:	C928    	CMP #$28       (Compare to 40)
EE/56B7:	D0F2    	BNE $56AB      (Loop if not equal)
EE/56B9:	8040    	BRA $56FB
EE/56BB:	E65A    	INC $5A
EE/56BD:	A65A    	LDX $5A
EE/56BF:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/56C3:	2903    	AND #$03       (0 to 3)
EE/56C5:	18      	CLC            (Clear Carry for addition)
EE/56C6:	6906    	ADC #$06       (Add 6)
EE/56C8:	8D66B6  	STA $B666
EE/56CB:	E65A    	INC $5A
EE/56CD:	A65A    	LDX $5A
EE/56CF:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/56D3:	2901    	AND #$01       (0 or 1)
EE/56D5:	1A      	INC A          (Add one)
EE/56D6:	9961B6  	STA $B661,Y
EE/56D9:	9962B6  	STA $B662,Y
EE/56DC:	E65A    	INC $5A
EE/56DE:	A65A    	LDX $5A
EE/56E0:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/56E4:	2907    	AND #$07       (0 to 7)
EE/56E6:	18      	CLC            (Clear Carry for addition)
EE/56E7:	698C    	ADC #$8C       (Add 140)
EE/56E9:	9963B6  	STA $B663,Y
EE/56EC:	AD51B6  	LDA $B651
EE/56EF:	18      	CLC            (Clear Carry for addition)
EE/56F0:	6D58B6  	ADC $B658
EE/56F3:	9964B6  	STA $B664,Y
EE/56F6:	A901    	LDA #$01
EE/56F8:	9960B6  	STA $B660,Y
EE/56FB:	A928    	LDA #$28
EE/56FD:	38      	SEC            (Set Carry for subtraction)
EE/56FE:	ED5CB6  	SBC $B65C
EE/5701:	8D5CB6  	STA $B65C
EE/5704:	C220    	REP #$20       (...)
EE/5706:	AD52B6  	LDA $B652      (...)
EE/5709:	C90078  	CMP #$7800     (...)
EE/570C:	D000    	BNE $570E      (...)
EE/570E:	AB      	PLB
EE/570F:	28      	PLP
EE/5710:	60      	RTS

Copy object data to RAM
EE/5711:	08      	PHP
EE/5712:	8B      	PHB
EE/5713:	4B      	PHK
EE/5714:	AB      	PLB            (Set data bank to EE)
EE/5715:	C210    	REP #$10       (16-bit indexes) (REP #$30...)
EE/5717:	C220    	REP #$20       (16-bit A)
EE/5719:	A20000  	LDX #$0000     (Zero X)
EE/571C:	BD3E57  	LDA $573E,X    (Load a pointer from the table below)
EE/571F:	9FD0937E	STA $7E93D0,X  (Save in RAM)
EE/5723:	E8      	INX
EE/5724:	E8      	INX            (Move to the next word)
EE/5725:	E0D800  	CPX #$00D8     (Reached EE/5816?)
EE/5728:	D0F2    	BNE $571C      (Loop if not)
EE/572A:	A20000  	LDX #$0000     (Zero X)
EE/572D:	BD1658  	LDA $5816,X    (Load object data from the table at EE/5816)
EE/5730:	9FD0957E	STA $7E95D0,X  (Save in RAM)
EE/5734:	E8      	INX
EE/5735:	E8      	INX            (Move to the next word)
EE/5736:	E0D613  	CPX #$13D6     (Reached EE/6BEC?)
EE/5739:	D0F2    	BNE $572D      (Loop if not)
EE/573B:	AB      	PLB
EE/573C:	28      	PLP
EE/573D:	60      	RTS

Pointers to object data (7E/95D0+X)
EE/573E:	0000
EE/5740:	0000      	(Airship facing ahead, sprite 1)
EE/5742:	3100      	(Airship facing ahead, sprite 2)
EE/5744:	6200      	(Airship heading left, sprite 1)
EE/5746:	9300      	(Airship heading left, sprite 2)
EE/5748:	C400      	(Airship heading right, sprite 1)
EE/574A:	F500      	(Airship heading right, sprite 2)
EE/574C:	2601      	(Airship heading up, sprite 1)
EE/574E:	5701      	(Airship heading up, sprite 2)
EE/5750:	8801      	(Airship heading up and left, sprite 1)
EE/5752:	B901      	(Airship heading up and left, sprite 2)
EE/5754:	EA01      	(Airship heading up and right, sprite 1)
EE/5756:	1B02      	(Airship heading up and right, sprite 2)
EE/5758:	4C02      	(Airship heading down, sprite 1)
EE/575A:	7D02      	(Airship heading down, sprite 2)
EE/575C:	AE02      	(Airship heading down and left, sprite 1)
EE/575E:	DF02      	(Airship heading down and left, sprite 2)
EE/5760:	1003      	(Airship heading down and right, sprite 1)
EE/5762:	4103      	(Airship heading down and right, sprite 2)
EE/5764:	7203      	(Chocobo walking ahead, sprite 1)
EE/5766:	CB03      	(Chocobo walking ahead, sprite 2)
EE/5768:	2404      	(Chocobo walking ahead, sprite 3)
EE/576A:	7D04      	(Chocobo walking ahead, sprite 4)
EE/576C:	D604      	(Chocobo walking ahead, sprite 5)
EE/576E:	2F05      	(Chocobo walking ahead, sprite 6)
EE/5770:	8805      	(Chocobo walking left, sprite 1)
EE/5772:	F505      	(Chocobo walking left, sprite 2)
EE/5774:	6206      	(Chocobo walking left, sprite 3)
EE/5776:	CF06      	(Chocobo walking left, sprite 4)
EE/5778:	3C07      	(Chocobo walking left, sprite 5)
EE/577A:	A907      	(Chocobo walking left, sprite 6)
EE/577C:	1608      	(Chocobo walking right, sprite 1)
EE/577E:	8308      	(Chocobo walking right, sprite 2)
EE/5780:	F008      	(Chocobo walking right, sprite 3)
EE/5782:	5D09      	(Chocobo walking right, sprite 4)
EE/5784:	CA09      	(Chocobo walking right, sprite 5)
EE/5786:	370A      	(Chocobo walking right, sprite 6)
EE/5788:	A40A      	(Chocobo facing ahead)
EE/578A:	FD0A      	(Character model 1, without transparency)
EE/578C:	160B      	(Character model 2, without transparency)
EE/578E:	2F0B      	(Character model 3, without transparency)
EE/5790:	480B      	(Character model 4, without transparency)
EE/5792:	610B      	(Character model 1, with transparency)
EE/5794:	7A0B      	(Character model 2, with transparency)
EE/5796:	930B      	(Character model 3, with transparency)
EE/5798:	AC0B      	(Character model 4, with transparency)
EE/579A:	C50B      	(Figaro Castle, sprite 1)
EE/579C:	220C      	(Figaro Castle, sprite 2)
EE/579E:	6B0C      	(Figaro Castle, sprite 3)
EE/57A0:	A00C      	(Figaro Castle, sprite 4)
EE/57A2:	C10C      	(Figaro Castle, sprite 5)
EE/57A4:	CE0C      	(Sand around Figaro Castle, sprite 1)
EE/57A6:	DF0C      	(Sand around Figaro Castle, sprite 2)
EE/57A8:	F00C      	(Sand around Figaro Castle, sprite 3)
EE/57AA:	010D      	(Sand around Figaro Castle, sprite 4)
EE/57AC:	120D      	(Ship sailing northward, sprite 1)
EE/57AE:	230D      	(Ship sailing northward, sprite 2)
EE/57B0:	340D      	(Ship sailing eastward, sprite 1)
EE/57B2:	450D      	(Ship sailing eastward, sprite 2)
EE/57B4:	560D      	(Ship sailing southward, sprite 1)
EE/57B6:	670D      	(Ship sailing southward, sprite 2)
EE/57B8:	780D      	(Ship sailing westward, sprite 1)
EE/57BA:	890D      	(Ship sailing westward, sprite 2)
EE/57BC:	9A0D      	(Right-pointing yellow arrow from the Serpent Trench, sprite 1)
EE/57BE:	AB0D      	(Right-pointing yellow arrow from the Serpent Trench, sprite 2)
EE/57C0:	BC0D      	(Right-pointing yellow arrow from the Serpent Trench, sprite 3)
EE/57C2:	CD0D      	(Left-pointing yellow arrow from the Serpent Trench, sprite 1)
EE/57C4:	DE0D      	(Left-pointing yellow arrow from the Serpent Trench, sprite 2)
EE/57C6:	EF0D      	(Left-pointing yellow arrow from the Serpent Trench, sprite 3)
EE/57C8:	000E      	(Smallest Blackjack sprite)
EE/57CA:	1D0E      	(Small Blackjack sprite)
EE/57CC:	4E0E      	(Normal Blackjack sprite 1)
EE/57CE:	870E      	(Large Blackjack sprite)
EE/57D0:	D00E      	(Chocobo facing down)
EE/57D2:	110F      	(Chocobo walking down, sprite 1)
EE/57D4:	520F      	(Chocobo walking down, sprite 2)
EE/57D6:	930F      	(Chocobo facing down with an open beak)
EE/57D8:	D40F      	(Normal Blackjack sprite 2)
EE/57DA:	0D10      	(Flying Esper Terra facing ahead, sprite 1)
EE/57DC:	2610      	(Flying Esper Terra facing ahead, sprite 2)
EE/57DE:	3F10      	(Flying Esper Terra heading left, sprite 1)
EE/57E0:	5810      	(Flying Esper Terra heading left, sprite 2)
EE/57E2:	7110      	(Flying Esper Terra heading right, sprite 1)
EE/57E4:	8A10      	(Flying Esper Terra heading right, sprite 2)
EE/57E6:	A310      	(Unused garbage graphics)
EE/57E8:	AC10      	(Unused garbage graphics)
EE/57EA:	B510      	(Water/Fire sprite 1)
EE/57EC:	CE10      	(Water/Fire sprite 2)
EE/57EE:	FF10      	(Water/Fire sprite 3)
EE/57F0:	4811      	(Water/Fire sprite 4)
EE/57F2:	9911
EE/57F4:	9911      	(Airship smoke, sprite 1)
EE/57F6:	9E11      	(Airship smoke, sprite 2)
EE/57F8:	AB11      	(Airship smoke, sprite 3)
EE/57FA:	BC11      	(Airship smoke, sprite 4)
EE/57FC:	CD11      	(Flying pigeon, sprite 1)
EE/57FE:	DE11      	(Flying pigeon, sprite 2)
EE/5800:	E711      	(Flying pigeon, sprite 3)
EE/5802:	F011      	(Smallest Falcon sprite)
EE/5804:	1D12      	(Small Falcon sprite)
EE/5806:	5612      	(Normal Falcon sprite 1)
EE/5808:	9312      	(Large Falcon sprite)
EE/580A:	EC12      	(Normal Falcon sprite 2)
EE/580C:	2913      	(Small-sized transparent box used to partially hide the airship emerging from the ocean)
EE/580E:	3E13      	(Medium-sized transparent box used to partially hide the airship emerging from the ocean)
EE/5810:	6713      	(Large-sized transparent box used to partially hide the airship emerging from the ocean)
EE/5812:	A413      	(Right-pointing grey arrows from the Serpent Trench)
EE/5814:	BD13      	(Left-pointing grey arrows from the Serpent Trench)


Below lies OAM data. The first byte specifies the number of tiles. Four bytes are allocated to
each tile. The first word indicates the relative coordinates. The last word is defined as follows:

edccbbba aaaaaaaa

a: Tile number
b: Palette number (high bit basically enables transparency)
c: Priority
d: Horizontal mirroring
e: Vertical mirroring


Airship facing ahead, sprite 1 (7E/95D0)
EE/5816:	0CF4F04010FCF0411004F04050F4F85010FCF8511004F85050F4004210FC00431004004250F4085210FC08531004085250

Airship facing ahead, sprite 2 (7E/9601)
EE/5847:	0CF4F04410FCF0451004F04450F4F85410FCF8551004F85450F4004610FC00471004004650F4085610FC08571004085650

Airship heading left, sprite 1 (7E/9632)
EE/5878:	0CF4F04810FCF0491004F04C10F4F85810FCF8591004F85C10F4004A10FC004B1004004D10F4085A10FC085B1004085D10

Airship heading left, sprite 2 (7E/9663)
EE/58A9:	0CF4F04E10FCF04F1004F06210F4F85E10FCF85F1004F87210F4006010FC00611004006310F4087010FC08711004087310

Airship heading right, sprite 1 (7E/9694)
EE/58DA:	0CF4F04C50FCF0495004F04850F4F85C50FCF8595004F85850F4004D50FC004B5004004A50F4085D50FC085B5004085A50

Airship heading right, sprite 2 (7E/96C5)
EE/590B:	0CF4F06250FCF04F5004F04E50F4F87250FCF85F5004F85E50F4006350FC00615004006050F4087350FC08715004087050

Airship heading up, sprite 1 (7E/96F6)
EE/593C:	0CF4F06410FCF0651004F06450F4F87410FCF8751004F87450F4006610FC00671004006650F4087610FC08771004087650

Airship heading up, sprite 2 (7E/9727)
EE/596D:	0CF4F06810FCF0691004F06850F4F87810FCF8791004F87850F4006A10FC006B1004006A50F4087A10FC087B1004087A50

Airship heading up and left, sprite 1 (7E/9758)
EE/599E:	0CF4F06C10FCF06D1004F08010F4F87C10FCF87D1004F89010F4006E10FC006F1004008110F4087E10FC087F1004089110

Airship heading up and left, sprite 2 (7E/9789)
EE/59CF:	0CF4F08210FCF0831004F08610F4F89210FCF8931004F89610F4008410FC00851004008710F4089410FC08951004089710

Airship heading up and right, sprite 1 (7E/97BA)
EE/5A00:	0CF4F08050FCF06D5004F06C50F4F89050FCF87D5004F87C50F4008150FC006F5004006E50F4089150FC087F5004087E50

Airship heading up and right, sprite 2 (7E/97EB)
EE/5A31:	0CF4F08650FCF0835004F08250F4F89650FCF8935004F89250F4008750FC00855004008450F4089750FC08955004089450

Airship heading down, sprite 1 (7E/981C)
EE/5A62:	0CF4F08810FCF0891004F08850F4F89810FCF8991004F89850F4008A10FC008B1004008A50F4089A10FC089B1004089A50

Airship heading down, sprite 2 (7E/984D)
EE/5A93:	0CF4F08C10FCF08D1004F08C50F4F89C10FCF89D1004F89C50F4008E10FC008F1004008E50F4089E10FC089F1004089E50

Airship heading down and left, sprite 1 (7E/987E)
EE/5AC4:	0CF4F0A010FCF0A11004F0A410F4F8B010FCF8B11004F8B410F400A210FC00A3100400A510F408B210FC08B3100408B510

Airship heading down and left, sprite 2 (7E/98AF)
EE/5AF5:	0CF4F0A610FCF0A71004F0AA10F4F8B610FCF8B71004F8BA10F400A810FC00A9100400AB10F408B810FC08B9100408BB10

Airship heading down and right, sprite 1 (7E/98E0)
EE/5B26:	0CF4F0A450FCF0A15004F0A050F4F8B450FCF8B15004F8B050F400A550FC00A3500400A250F408B550FC08B3500408B250

Airship heading down and right, sprite 2 (7E/9911)
EE/5B57:	0CF4F0AA50FCF0A75004F0A650F4F8BA50FCF8B75004F8B650F400AB50FC00A9500400A850F408BB50FC08B9500408B850

Chocobo walking ahead, sprite 1 (7E/9942)
EE/5B88:	16F800BC130000BD13F808CC130008CD13F8F3AC1400F3AD14F8FBBC1400FBBD14F8ECC01200ECC112F8F4D01200F4D112F8FCE01200FCE112F804D2120004D312F80CE212000CE312F80AA013000AA053F812A0930012A0D3

Chocobo walking ahead, sprite 2 (7E/999B)
EE/5BE1:	16F801DC130001DD13F809EC130009ED13F8F1AC1400F1AD14F8F9BC1400F9BD14F8ECD41200ECD512F8F4E41200F4E512F8FC841300FC8513F804941300049513F80CA413000CA513F80AA013000AA053F812A0930012A0D3

Chocobo walking ahead, sprite 3 (7E/99F4)
EE/5C3A:	16F801DE130001DF13F809EE130009EF13F8F2AC1400F2AD14F8FABC1400FABD14F8ECD61200ECD712F8F4E61200F4E712F8FC861300FC8713F804961300049713F80CA613000CA713F80AA013000AA053F812A0930012A0D3

Chocobo walking ahead, sprite 4 (7E/9A4D)
EE/5C93:	16F800BE130000BF13F808CE130008CF13F8F3AC1400F3AD14F8FBBC1400FBBD14F8ECD81200ECD912F8F4E81200F4E912F8FC881300FC8913F804981300049913F80CA813000CA913F80AA013000AA053F812A0930012A0D3

Chocobo walking ahead, sprite 5 (7E/9AA6)
EE/5CEC:	160001DC53F801DD530009EC53F809ED53F8F1AC1400F1AD14F8F9BC1400F9BD1400ECD452F8ECD55200F4E452F8F4E55200FC8453F8FC855300049453F8049553000CA453F80CA553F80AA013000AA053F812A0930012A0D3

Chocobo walking ahead, sprite 6 (7E/9AFF)
EE/5D45:	160001DE53F801DF530009EE53F809EF53F8F2AC1400F2AD14F8FABC1400FABD1400ECD652F8ECD75200F4E652F8F4E75200FC8653F8FC875300049653F8049753000CA653F80CA753F80AA013000AA053F812A0930012A0D3

Chocobo walking left, sprite 1 (7E/9B58)
EE/5D9E:	1BFCFEBC1304FEBD13FC06CC130406CD13FAF3AC1402F3AD14FAFBBC1402FBBD14F4ECDA12FCECDB1204ECDC12F4F4EA12FCF4EB1204F4EC12F4FC8A13FCFC8B1304FC8C13F4049A13FC049B1304049C13F40CAA13FC0CAB13040CAC13F80AA013000AA053F812A0930012A0D3

Chocobo walking left, sprite 2 (7E/9BC5)
EE/5E0B:	1BFCFFDC1304FFDD13FC07EC130407ED13FAF1AC1402F1AD14FAF9BC1402F9BD14F4ECDD12FCECDE1204ECDF12F4F4ED12FCF4EE1204F4EF12F4FC8D13FCFC8E1304FC8F13F4049D13FC049E1304049F13F40CAD13FC0CAE13040CAF13F80AA013000AA053F812A0930012A0D3

Chocobo walking left, sprite 3 (7E/9C32)
EE/5E78:	1BFCFFDE1304FFDF13FC07EE130407EF13FAF2AC1402F2AD14FAFABC1402FABD14F4ECB013FCECB11304ECB213F4F4C013FCF4C11304F4C213F4FCD013FCFCD11304FCD213F404E013FC04E1130404E213F40CF013FC0CF113040CF213F80AA013000AA053F812A0930012A0D3

Chocobo walking left, sprite 4 (7E/9C9F)
EE/5EE5:	1BFCFEBE1304FEBF13FC06CE130406CF13FAF3AC1402F3AD14FAFBBC1402FBBD14F4ECB313FCECB41304ECB513F4F4C313FCF4C41304F4C513F4FCD313FCFCD41304FCD513F404E313FC04E4130404E513F40CF313FC0CF413040CF513F80AA013000AA053F812A0930012A0D3

Chocobo walking left, sprite 5 (7E/9D0C)
EE/5F52:	1B04FFDC53FCFFDD530407EC53FC07ED53FAF1AC1402F1AD14FAF9BC1402F9BD14F4ECB613FCECB71304ECB813F4F4C613FCF4C71304F4C813F4FCD613FCFCD71304FCD813F404E613FC04E7130404E813F40CF613FC0CF713040CF813F80AA013000AA053F812A0930012A0D3

Chocobo walking left, sprite 6 (7E/9D79)
EE/5FBF:	1B04FFDE53FCFFDF530407EE53FC07EF53FAF2AC1402F2AD14FAFABC1402FABD14F4ECB913FCECBA1304ECBB13F4F4C913FCF4CA1304F4CB13F4FCD913FCFCDA1304FCDB13F404E913FC04EA130404EB13F40CF913FC0CFA13040CFB13F80AA013000AA053F812A0930012A0D3

Chocobo walking right, sprite 1 (7E/9DE6)
EE/602C:	1BFCFEBC53F4FEBD53FC06CC53F406CD53F6F3AC14FEF3AD14F6FBBC14FEFBBD1404ECDA52FCECDB52F4ECDC5204F4EA52FCF4EB52F4F4EC5204FC8A53FCFC8B53F4FC8C5304049A53FC049B53F4049C53040CAA53FC0CAB53F40CAC53F80AA013000AA053F812A0930012A0D3

Chocobo walking right, sprite 2 (7E/9E53)
EE/6099:	1BFCFFDC53F4FFDD53FC07EC53F407ED53F6F1AC14FEF1AD14F6F9BC14FEF9BD1404ECDD52FCECDE52F4ECDF5204F4ED52FCF4EE52F4F4EF5204FC8D53FCFC8E53F4FC8F5304049D53FC049E53F4049F53040CAD53FC0CAE53F40CAF53F80AA013000AA053F812A0930012A0D3

Chocobo walking right, sprite 3 (7E/9EC0)
EE/6106:	1BFCFFDE53F4FFDF53FC07EE53F407EF53F6F2AC14FEF2AD14F6FABC14FEFABD1404ECB053FCECB153F4ECB25304F4C053FCF4C153F4F4C25304FCD053FCFCD153F4FCD2530404E053FC04E153F404E253040CF053FC0CF153F40CF253F80AA013000AA053F812A0930012A0D3

Chocobo walking right, sprite 4 (7E/9F2D)
EE/6173:	1BFCFEBE53F4FEBF53FC06CE53F406CF53F6F3AC14FEF3AD14F6FBBC14FEFBBD1404ECB353FCECB453F4ECB55304F4C353FCF4C453F4F4C55304FCD353FCFCD453F4FCD5530404E353FC04E453F404E553040CF353FC0CF453F40CF553F80AA013000AA053F812A0930012A0D3

Chocobo walking right, sprite 5 (7E/9F9A)
EE/61E0:	1BF4FFDC13FCFFDD13F407EC13FC07ED13F6F1AC14FEF1AD14F6F9BC14FEF9BD1404ECB653FCECB753F4ECB85304F4C653FCF4C753F4F4C85304FCD653FCFCD753F4FCD8530404E653FC04E753F404E853040CF653FC0CF753F40CF853F80AA013000AA053F812A0930012A0D3

Chocobo walking right, sprite 6 (7E/A007)
EE/624D:	1BF4FFDE13FCFFDF13F407EE13FC07EF13F6F2AC14FEF2AD14F6FABC14FEFABD1404ECB953FCECBA53F4ECBB5304F4C953FCF4CA53F4F4CB5304FCD953FCFCDA53F4FCDB530404E953FC04EA53F404EB53040CF953FC0CFA53F40CFB53F80AA013000AA053F812A0930012A0D3

Chocobo facing ahead (7E/A074)
EE/62BA:	16F800CC120000CD12F808CE120008CF12F8F3AC1400F3AD14F8FBBC1400FBBD14F8ECC21200ECC312F8F4C41200F4C512F8FCC61200FCC712F804C8120004C912F80CCA12000CCB12F80AA013000AA053F812A0930012A0D3

Character model 1, without transparency (7E/A0CD)
EE/6315:	06F8E8F01000E8F110F8F0F21000F0F310F8F8F41000F8F510

Character model 2, without transparency (7E/A0E6)
EE/632C:	06F8E8F01000E8F110F8F0F21000F0F31000F8F450F8F8F550

Character model 3, without transparency (7E/A0FF)
EE/6345:	0600E8F050F8E8F15000F0F250F8F0F350F8F8F41000F8F510

Character model 4, without transparency (7E/A118)
EE/635E:	0600E8F050F8E8F15000F0F250F8F0F35000F8F450F8F8F550

Character model 1, with transparency (7E/A131)
EE/6377:	06F8E8F01000E8F110F8F0F21000F0F310F8F8F40800F8F508

Character model 2, with transparency (7E/A14A)
EE/6390:	06F8E8F01000E8F110F8F0F21000F0F31000F8F448F8F8F548

Character model 3, with transparency (7E/A163)
EE/63A9:	0600E8F050F8E8F15000F0F250F8F0F350F8F8F40800F8F508

Character model 4, with transparency (7E/A17C)
EE/63C2:	0600E8F050F8E8F15000F0F250F8F0F35000F8F448F8F8F548

Figaro Castle, sprite 1 (7E/A195)
EE/63DD:	17080041151000421518004315000850150808511510085215180853152008541500106015081061151010621518106315201064150018701508187115101872151818731520187415002048150820491510204A1518204B1520204C15

Figaro Castle, sprite 2 (7E/A1F2)
EE/6438:	12080041151000421518004315000850150808511510085215180853152008541500106015081061151010621518106315201064150018701508187115101872151818731520187415

Figaro Castle, sprite 3 (7E/A23B)
EE/6481:	0D08004115100042151800431500085015080851151008521518085315200854150010601508106115101062151810631520106415

Figaro Castle, sprite 4 (7E/A270)
EE/64B6:	080800411510004215180043150008501508085115100852151808531520085415

Figaro Castle, sprite 5 (7E/A291)
EE/64D7:	03080041151000421518004315

Sand around Figaro Castle, sprite 1 (7E/A29E)
EE/64E4:	0400006515080066150008751508087615

Sand around Figaro Castle, sprite 2 (7E/A2AF)
EE/64F5:	04080865D5000866D5080075D5000076D5

Sand around Figaro Castle, sprite 3 (7E/A2C0)
EE/6506:	0400004515080046150008551508085615

Sand around Figaro Castle, sprite 4 (7E/A2D1)
EE/6517:	04080845D5000846D5080055D5000056D5

Ship sailing northward, sprite 1 (7E/A2E2)
EE/6528:	04F8F05C1100F05D11F8F86C1100F86D11

Ship sailing northward, sprite 2 (7E/A2F3)
EE/6539:	04F9F0781101F07911F9F87A1101F87B11

Ship sailing eastward, sprite 1 (7E/A303)
EE/654A:	04F8F0595100F05851F8F8695100F86851

Ship sailing eastward, sprite 2 (7E/A315)
EE/655B:	04F8F14F5100F14E51F8F95F5100F95E51

Ship sailing southward, sprite 1 (7E/A326)
EE/656C:	04F8F05A1100F05B11F8F86A1100F86B11

Ship sailing southward, sprite 2 (7E/A337)
EE/657D:	04F9F06E1101F06F11F9F87E1101F87F11

Ship sailing westward, sprite 1 (7E/A348)
EE/658E:	04F8F0581100F05911F8F8681100F86911

Ship sailing westward, sprite 2 (7E/A359)
EE/659F:	04F8F14E1100F14F11F8F95E1100F95F11

Right-pointing yellow arrow from the Serpent Trench, sprite 1 (7E/A36A)
EE/65B0:	0200F87C1300007C93

Unused; this would have caused the above to display an additional arrow (7E/A373)
EE/65B9:	0AF87C130A007C93

Right-pointing yellow arrow from the Serpent Trench, sprite 2 (7E/A37B)
EE/65C1:	020AF87C130A007C93

Right-pointing yellow arrow from the Serpent Trench, sprite 3 (7E/A38C)
EE/65D2:	0214F87C1314007C9300F87C1300007C93

Left-pointing yellow arrow from the Serpent Trench, sprite 1 (7E/A39D)
EE/65E3:	0200F87C5300007CD3

Unused; this would have caused the above to display an additional arrow (7E/A3A6)
EE/65EC:	F6F87C53F6007CD3

Left-pointing yellow arrow from the Serpent Trench, sprite 2 (7E/A3AE)
EE/65F4:	02F6F87C53F6007CD3

Unused; this would have caused the above to display an additional arrow (7E/A3C0)
EE/65FD:	ECF87C53EC007CD3

Left-pointing yellow arrow from the Serpent Trench, sprite 3 (7E/A3BF)
EE/6605:	02ECF87C53EC007CD3

Unused; this would have caused the above to display an additional arrow (7E/A3C8)
EE/660E:	00F87C5300007CD3

Smallest Blackjack sprite (7E/A3D0)
EE/6616:	07F7F4EA12FFF4EB1207F4EC120FF4ED12FFFCEE1207FCEF120FFCBF12

Small Blackjack sprite (7E/A3ED)
EE/6633:	0CF8F0E01200F0E11208F0E21210F0E31218F0AE12F8F8E41200F8E51208F8E61210F8E71218F8BE120000E8120800E912

Normal Blackjack sprite 1 (7E/A41E)
EE/6664:	0EF6EDD212FEEDD31206EDD4120EEDD51216EDD612F6F5D712FEF5D81206F5D9120EF5DA1216F5DB12FEFDDC1206FDDD120EFDDE1216FDDF12

Large Blackjack sprite (7E/A457)
EE/669D:	12F8E8C01200E8C11208E8C21210E8C31218E8C412F0F0C512F8F0C61200F0C71208F0C81210F0C91218F0CA12F8F8CB1200F8CC1208F8CD1210F8CE1218F8CF120000D0120800D112

Chocobo facing down (7E/A4A0)
EE/66E6:	10F8F8A01200F8A112F800B0120000B112F8F0A21200F0A312F8F8B21200F8B312F800A4120000A512F808B4120008B512F804A0130004A053F80CA093000CA0D3

Chocobo walking down, sprite 1 (7E/A4E1)
EE/6727:	10F9F8A01201F8A112F900B0120100B112F8F0A61200F0A712F8F8B61200F8B712F800A8120000A912F808B8120008B912F804A0130004A053F80CA093000CA0D3

Chocobo walking down, sprite 2 (7E/A522)
EE/6768:	10F7F8A012FFF8A112F700B012FF00B112F8F0A75200F0A652F8F8B75200F8B652F800A9520000A852F808B9520008B852F804A0130004A053F80CA093000CA0D3

Chocobo facing down with an open beak (7E/A563)
EE/67A9:	10F8F8981200F89912F8009A1200009B12F8F0A21200F0A312F8F8B21200F8B312F800A4120000A512F808B4120008B512F804A0130004A053F80CA093000CA0D3

Normal Blackjack sprite 2 (7E/A5A4)
EE/67EA:	0EF6EDD212FEEDD31206EDD4120EEDAC1216EDAD12F6F5D712FEF5D81206F5D9120EF5BC1216F5BD12FEFDDC1206FDDD120EFDDE1216FDDF12

Flying Esper Terra facing ahead, sprite 1 (7E/A5DD)
EE/6823:	06F8F4841500F48515F8FC941500FC9515F804A4150004A515

Flying Esper Terra facing ahead, sprite 2 (7E/A5F6)
EE/683C:	06F8F4861500F48715F8FC961500FC9715F804A6150004A715

Flying Esper Terra heading left, sprite 1 (7E/A60F)
EE/6855:	06F8F4881500F48915F8FC981500FC9915F804A8150004A915

Flying Esper Terra heading left, sprite 2 (7E/A628)
EE/686E:	06F8F48A1500F48B15F8FC9A1500FC9B15F804AA150004AB15

Flying Esper Terra heading right, sprite 1 (7E/A641)
EE/6887:	06F8F4895500F48855F8FC995500FC9855F804A9550004A855

Flying Esper Terra heading right, sprite 2 (7E/A65A)
EE/68A0:	06F8F48B5500F48A55F8FC9B5500FC9A55F804AB550004AA55

Unused garbage graphics (7E/A673)
EE/68B9:	02FBFB0F0704041F07

Unused garbage graphics (7E/A67C)
EE/68C2:	02FBFB1F0704040F07

Water/Fire sprite 1 (7E/A685)
EE/68CB:	06F8F8B11500F8B155F000C015F800C1150000C1550800C055

Water/Fire sprite 2 (7E/A69E)
EE/68E4:	0CF0F0D015F8F0D11500F0D15508F0D055F0F8B215F8F8B31500F8B35508F8B255F000C215F800C3150000C3550800C255

Water/Fire sprite 3 (7E/A6CF)
EE/6915:	12F8E0D31500E0D355F0E8B415F8E8B51500E8B55508E8B455F0F0C415F8F0C51500F0C55508F0C455F0F8D415F8F8D51500F8D55508F8D455F000B615F800B7150000B7550800B655

Water/Fire sprite 4 (7E/A718)
EE/695E:	14F8D8C71500D8C755F8E0D71500E0D755F0E8B815F8E8B91500E8B95508E8B855F0F0C815F8F0C91500F0C95508F0C855F0F8D815F8F8D91500F8D95508F8D855F000BA15F800BB150000BB550800BA55

Airship smoke, sprite 1 (7E/A769)
EE/69AF:	0100009F15

Airship smoke, sprite 2 (7E/A76E)
EE/69B4:	03FBFB8E1503FB8F15FB039E15

Airship smoke, sprite 3 (7E/A77B)
EE/69C1:	04F9F98C1501F98D15F9019C1501019D15

Airship smoke, sprite 4 (7E/A78C)
EE/69D2:	04F8F8AC1500F8AD15F800AE150000AF15

Flying pigeon, sprite 1 (7E/A79D)
EE/69E3:	04F8F8CA1500F8CA55F800DA150000DA55

Flying pigeon, sprite 2 (7E/A7AE)
EE/69F4:	02F800CB150000CB55

Flying pigeon, sprite 3 (7E/A7B7)
EE/69FD:	02F800DB150000DB55

Smallest Falcon sprite (7E/A7C0)
EE/6A06:	0BFAF0F91202F0FA120AF0FB1212F0FC12FAF8FD1202F8FE120AF8FF1212F8AE120200BC120A00BD121200BE12

Small Falcon sprite (7E/A7ED)
EE/6A33:	0EF6EFE512FEEFE61206EFE7120EEFE81216EFE912F6F7EA12FEF7EB1206F7EC120EF7ED1216F7EE12FEFFEF1206FFF6120EFFF71216FFF812

Normal Falcon sprite 1 (7E/A826)
EE/6A6C:	0FF4EAD612FCEAD71204EAD8120CEAD91214EADA12F4F2DB12FCF2DC1204F2DD120CF2DE1214F2DF12F4FAE012FCFAE11204FAE2120CFAE31214FAE412

Large Falcon sprite (7E/A863)
EE/6AA9:	16F6E8C012FEE8C11206E8C2120EE8C31216E8C412EEF0C512F6F0C612FEF0C71206F0C8120EF0C91216F0CA12EEF8CB12F6F8CC12FEF8CD1206F8CE120EF8CF1216F8D012F600D112FE00D2120600D3120E00D4121600D512

Normal Falcon sprite 2 (7E/A8BC)
EE/6B02:	0FF4EAD612FCEAD71204EAD8120CEAD91214EADA12F4F2DB12FCF2DC1204F2DD120CF2DE1214F2AF12F4FAE012FCFAE11204FAE2120CFAE31214FABF12

Small-sized transparent box used to partially hide the airship emerging from the ocean (7E/A8F9)
EE/6B3F:	05F4020400FC020400040204000C02040014020400

Medium-sized transparent box used to partially hide the airship emerging from the ocean (7E/A90E)
EE/6B54:	0AF4020400FC020400040204000C02040014020400F40A0400FC0A0400040A04000C0A0400140A0400

Large-sized transparent box used to partially hide the airship emerging from the ocean (7E/A937)
EE/6B7D:	0FF4020400FC020400040204000C02040014020400F40A0400FC0A0400040A04000C0A0400140A0400F4120400FC120400041204000C12040014120400

Right-pointing grey arrows from the Serpent Trench (7E/A974)
EE/6BBA:	0400F87C1500007C950AF87C150A007C95

Unused; this would have caused the above to display an additional arrow (7E/A985)
EE/6BCB:	14F87C1514007C95

Left-pointing grey arrows from the Serpent Trench (7E/A98D)
EE/6BD3:	0400F87C5500007CD5F6F87C55F6007CD5

Unused; this would have caused the above to display an additional arrow (7E/A99E)
EE/6BE4:	ECF87C55EC007CD5


Joypad interpretation for vehicle mode
EE/6BEC:	08      	PHP
EE/6BED:	E220    	SEP #$20       (8-bit A)
EE/6BEF:	A520    	LDA $20        (Map mode)
EE/6BF1:	C902    	CMP #$02       (Chocobo mode?)
EE/6BF3:	D003    	BNE $6BF8      (Branch if not)
EE/6BF5:	4C6D6F  	JMP $6F6D      (Joypad interpretation for chocobo mode)
EE/6BF8:	E220    	SEP #$20       (...)
EE/6BFA:	C210    	REP #$10       (16-bit indexes) (X and Y are never used in this routine...)
EE/6BFC:	A505    	LDA $05        (Shared controller bits)
EE/6BFE:	8940    	BIT #$40       (Is anyone pressing Y?)
EE/6C00:	F003    	BEQ $6C05      (Branch if not) (ASL A, BPL...)
EE/6C02:	4C456D  	JMP $6D45      (Joypad interpretation for airship mode, including straffing mechanics)
EE/6C05:	E220    	SEP #$20       (...)
EE/6C07:	C210    	REP #$10       (...)
EE/6C09:	A505    	LDA $05        (...)
EE/6C0B:	8901    	BIT #$01       (Is anyone pressing right?)
EE/6C0D:	F01F    	BEQ $6C2E      (Branch if not) (LSR A, BCC...)
EE/6C0F:	C220    	REP #$20       (16-bit A)
EE/6C11:	A529    	LDA $29        (Rotation speed)
EE/6C13:	38      	SEC            (Set Carry for subtraction)
EE/6C14:	E92000  	SBC #$0020     (Move the "slider" right by 32)
EE/6C17:	8529    	STA $29        (Save changes)
EE/6C19:	A52B    	LDA $2B
EE/6C1B:	E90000  	SBC #$0000     (Subtract one if an underflow occurred) ($00...)
EE/6C1E:	852B    	STA $2B        (Save changes) (BCS, DEC $2B...)
EE/6C20:	A900FE  	LDA #$FE00     (Maximum speed for right turns)
EE/6C23:	C529    	CMP $29        (Compare to rotation speed)
EE/6C25:	3053    	BMI $6C7A      (Branch if greater)
EE/6C27:	A900FE  	LDA #$FE00     (...)
EE/6C2A:	8529    	STA $29        (Enforce maximum rotation speed)
EE/6C2C:	804C    	BRA $6C7A      (Skip code for other rotation scenarios)
EE/6C2E:	E220    	SEP #$20       (8-bit A)
EE/6C30:	A505    	LDA $05        (Shared controller bits)
EE/6C32:	8902    	BIT #$02       (Is anyone pressing left?)
EE/6C34:	F020    	BEQ $6C56      (Branch if not)
EE/6C36:	C220    	REP #$20       (...)
EE/6C38:	C221    	REP #$21       (16-bit A; clear Carry)
EE/6C3A:	A529    	LDA $29        (Rotation speed)
EE/6C3C:	692000  	ADC #$0020     (Move the "slider" left by 32)
EE/6C3F:	8529    	STA $29        (Save changes)
EE/6C41:	A52B    	LDA $2B
EE/6C43:	690000  	ADC #$0000     (Add one if an overflow occcurred) ($00...)
EE/6C46:	852B    	STA $2B        (Save changes) (BCC, INC $2B...)
EE/6C48:	A90102  	LDA #$0201     (Maximum speed for left turns, plus one)
EE/6C4B:	C529    	CMP $29        (Compare to rotation speed)
EE/6C4D:	102B    	BPL $6C7A      (Branch if greater)
EE/6C4F:	A90002  	LDA #$0200     (DEC A...)
EE/6C52:	8529    	STA $29        (Cap rotation speed)
EE/6C54:	8024    	BRA $6C7A      (Skip the code for when pressing neither left nor right)
EE/6C56:	C220    	REP #$20       (16-bit A)
EE/6C58:	A529    	LDA $29        (Rotation speed)
EE/6C5A:	F01E    	BEQ $6C7A      (Branch if not turning)
EE/6C5C:	300F    	BMI $6C6D      (Branch if turning right)
EE/6C5E:	38      	SEC            (Set Carry for subtraction)
EE/6C5F:	E91000  	SBC #$0010     (Decrease the speed of left turns by 16)
EE/6C62:	8529    	STA $29        (Save changes)
EE/6C64:	A52B    	LDA $2B
EE/6C66:	E90000  	SBC #$0000     (Subtract one if an underflow occurred) ($00...)
EE/6C69:	852B    	STA $2B        (Save changes) (BRA $6C78...)
EE/6C6B:	800D    	BRA $6C7A      (Skip the code for deceleration of right turns)
EE/6C6D:	18      	CLC            (Clear Carry for addition)
EE/6C6E:	691000  	ADC #$0010     (Decrease the speed of right turns by 16)
EE/6C71:	8529    	STA $29        (Save changes)
EE/6C73:	A52B    	LDA $2B
EE/6C75:	690000  	ADC #$0000     (Add one if an overflow occurred) ($00...)
EE/6C78:	852B    	STA $2B        (Save changes)
EE/6C7A:	C220    	REP #$20       (16-bit A)
EE/6C7C:	A504    	LDA $04        (Shared controller bits)
EE/6C7E:	898000  	BIT #$0080     (Is anyone pressing A?)
EE/6C81:	F00F    	BEQ $6C92      (Branch if not) (LDA $03, BPL...)
EE/6C83:	A526    	LDA $26        (Vehicle speed)
EE/6C85:	18      	CLC            (Clear Carry for addition)
EE/6C86:	694000  	ADC #$0040     (Add 64)
EE/6C89:	C90108  	CMP #$0801     (Beyond the maximum speed?)
EE/6C8C:	1014    	BPL $6CA2      (Branch if so)
EE/6C8E:	8526    	STA $26        (Save changes) (BRA $6CA0...)
EE/6C90:	8010    	BRA $6CA2      (Skip the decelaration code)
EE/6C92:	A526    	LDA $26        (Vehicle speed)
EE/6C94:	38      	SEC            (Set Carry for subtraction)
EE/6C95:	E98000  	SBC #$0080     (Subtract 128)
EE/6C98:	C90000  	CMP #$0000     (Superfluous...)
EE/6C9B:	1003    	BPL $6CA0      (Branch if the difference is positive)
EE/6C9D:	A90000  	LDA #$0000     (Set speed to zero) (TDC...)
EE/6CA0:	8526    	STA $26        (Save changes)
EE/6CA2:	E220    	SEP #$20       (8-bit A)
EE/6CA4:	A505    	LDA $05        (Shared controller bits)
EE/6CA6:	8908    	BIT #$08       (Is anyone pressing up?)
EE/6CA8:	F011    	BEQ $6CBB      (Branch if not)
EE/6CAA:	C220    	REP #$20       (16-bit A)
EE/6CAC:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/6CAE:	38      	SEC            (Set Carry for subtraction)
EE/6CAF:	E92000  	SBC #$0020     (Move the "slider" down by 32)
EE/6CB2:	C900FE  	CMP #$FE00     (Beyond the maximum descension speed?)
EE/6CB5:	3033    	BMI $6CEA      (Branch if so)
EE/6CB7:	852D    	STA $2D        (Save changes) (BRA $6CE8...)
EE/6CB9:	802F    	BRA $6CEA      (Skip the ascension code)
EE/6CBB:	E220    	SEP #$20       (8-bit A)
EE/6CBD:	A505    	LDA $05        (Shared controller bits)
EE/6CBF:	8904    	BIT #$04       (Is anyone pressing down?)
EE/6CC1:	F011    	BEQ $6CD4      (Branch if not)
EE/6CC3:	C220    	REP #$20       (16-bit A) (REP #$21...)
EE/6CC5:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/6CC7:	18      	CLC            (Clear Carry for addition)
EE/6CC8:	692000  	ADC #$0020     (Move the "slider" up by 32)
EE/6CCB:	C90102  	CMP #$0201     (Beyond the maximum ascension speed?)
EE/6CCE:	101A    	BPL $6CEA      (Branch if so)
EE/6CD0:	852D    	STA $2D        (Save changes) (BRA $6CE8...)
EE/6CD2:	8016    	BRA $6CEA      (Skip the deceleration code)
EE/6CD4:	C220    	REP #$20       (16-bit A)
EE/6CD6:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/6CD8:	300A    	BMI $6CE4      (Branch if descending)
EE/6CDA:	38      	SEC            (Set Carry for subtraction)
EE/6CDB:	E91000  	SBC #$0010     (Decrease ascension speed by 16)
EE/6CDE:	900A    	BCC $6CEA      (Branch if the difference is negative)
EE/6CE0:	852D    	STA $2D        (Save changes) (BRA $6CE8...)
EE/6CE2:	8006    	BRA $6CEA      (Skip next three instructions)
EE/6CE4:	18      	CLC            (Clear Carry for addition)
EE/6CE5:	691000  	ADC #$0010     (Decrease the descension speed by 16)
EE/6CE8:	852D    	STA $2D        (Save changes)
EE/6CEA:	C220    	REP #$20       (16-bit A)
EE/6CEC:	A504    	LDA $04        (Shared controller bits)
EE/6CEE:	292002  	AND #$0220     (Isolate the "left" and "L" bits)
EE/6CF1:	C92002  	CMP #$0220     (Are both bits set?)
EE/6CF4:	D011    	BNE $6D07      (Branch if not)
EE/6CF6:	AD7300  	LDA $0073      (Vehicle direction)
EE/6CF9:	1A      	INC A          (Rotate counterclockwise by a degree)
EE/6CFA:	1A      	INC A          (Rotate counterclockwise by a degree)
EE/6CFB:	C96801  	CMP #$0168     (Compare to 360)
EE/6CFE:	3004    	BMI $6D04      (Branch if smaller)
EE/6D00:	38      	SEC            (Carry is already set...)
EE/6D01:	E96801  	SBC #$0168     (Subtract 360)
EE/6D04:	8D7300  	STA $0073      (Save changes)
EE/6D07:	A504    	LDA $04        (Shared controller bits)
EE/6D09:	291001  	AND #$0110     (Isolate the "right" and "R" bits)
EE/6D0C:	C91001  	CMP #$0110     (Are both bits set?)
EE/6D0F:	D011    	BNE $6D22      (Branch if not)
EE/6D11:	AD7300  	LDA $0073      (Vehicle direction)
EE/6D14:	3A      	DEC A          (Rotate clockwise by a degree)
EE/6D15:	3A      	DEC A          (Rotate clockwise by a degree)
EE/6D16:	C90000  	CMP #$0000     (Superfluous...)
EE/6D19:	1004    	BPL $6D1F      (Branch if the difference is positive)
EE/6D1B:	18      	CLC            (Clear Carry for addition)
EE/6D1C:	696801  	ADC #$0168     (Add 360)
EE/6D1F:	8D7300  	STA $0073      (Save changes)
EE/6D22:	A505    	LDA $05        (Controller bits)
EE/6D24:	898000  	BIT #$0080     (Is anyone pressing B?)
EE/6D27:	F003    	BEQ $6D2C      (Branch if not) (LDA $04, BPL...)
EE/6D29:	206E93  	JSR $936E      (Land airship if tile permits that)
EE/6D2C:	4C7E6E  	JMP $6E7E      (Joypad interpretation for airship mode, excluding straffing mechanics)

Directions in degrees associated with direction keys
EE/6D2F:	0000    	(Blank entry)
EE/6D31:	0E01    	(Right)
EE/6D33:	5A00    	(Left)
EE/6D35:	0000    	(Blank entry)
EE/6D37:	B400    	(Down)
EE/6D39:	E100    	(Down and right)
EE/6D3B:	8700    	(Down and left)
EE/6D3D:	0000    	(Blank entry)
EE/6D3F:	0000    	(Up)
EE/6D41:	3B01    	(Up and right)
EE/6D43:	2D00    	(Up and left)

Joypad interpretation for airship mode (straffing mechanics up until EE/6E7C)
EE/6D45:	C220    	REP #$20       (16-bit A)
EE/6D47:	A505    	LDA $05        (Controller bits)
EE/6D49:	290F00  	AND #$000F     (Isolate directional keys)
EE/6D4C:	D003    	BNE $6D51      (Branch if anyone is pressing any such key)
EE/6D4E:	4C386E  	JMP $6E38
EE/6D51:	0A      	ASL A          (Multiply by 2)
EE/6D52:	AA      	TAX            (Transfer A to X)
EE/6D53:	BF2F6DEE	LDA $EE6D2F,X  (Load a value from the table above)
EE/6D57:	18      	CLC            (Clear Carry for addition)
EE/6D58:	6573    	ADC $73        (Add to vehicle's direction)
EE/6D5A:	C96801  	CMP #$0168     (Compare to 360)
EE/6D5D:	9003    	BCC $6D62      (Branch if smaller)
EE/6D5F:	E96801  	SBC #$0168     (Subtract 360)
EE/6D62:	8558    	STA $58        (Save it temporarily)
EE/6D64:	C9B400  	CMP #$00B4     (Compare to 180, the south direction)
EE/6D67:	9003    	BCC $6D6C      (Branch if smaller, meaning we're facing the western hemisphere)
EE/6D69:	E9B400  	SBC #$00B4     (Subtract 180)
EE/6D6C:	AA      	TAX            (Transfer A to X)
EE/6D6D:	BFF1FEEF	LDA $EFFEF1,X
EE/6D71:	855E    	STA $5E
EE/6D73:	BF4BFFEF	LDA $EFFF4B,X
EE/6D77:	8560    	STA $60
EE/6D79:	C220    	REP #$20       (...)
EE/6D7B:	E210    	SEP #$10       (8-bit indexes)
EE/6D7D:	A558    	LDA $58
EE/6D7F:	C9B400  	CMP #$00B4     (Compare to 180, the south direction)
EE/6D82:	9015    	BCC $6D99      (Branch if smaller, meaning we're facing the western hemisphere)
EE/6D84:	A200    	LDX #$00
EE/6D86:	865B    	STX $5B
EE/6D88:	C90E01  	CMP #$010E     (Compare to 270, the east direction)
EE/6D8B:	9006    	BCC $6D93      (Branch if smaller, meaning we're facing southeast)
EE/6D8D:	A201    	LDX #$01
EE/6D8F:	865A    	STX $5A        (Save it temporarily) (BRA $6D95...)
EE/6D91:	8011    	BRA $6DA4
EE/6D93:	A200    	LDX #$00
EE/6D95:	865A    	STX $5A        (Save it temporarily)
EE/6D97:	800B    	BRA $6DA4
EE/6D99:	A201    	LDX #$01
EE/6D9B:	865B    	STX $5B
EE/6D9D:	C95A00  	CMP #$005A     (Compare to 90, the west direction)
EE/6DA0:	90EB    	BCC $6D8D      (Branch if smaller, meaning we're facing northwest)
EE/6DA2:	80EF    	BRA $6D93      (Loop)
EE/6DA4:	646B    	STZ $6B
EE/6DA6:	A660    	LDX $60
EE/6DA8:	8E0242  	STX $4202      (Save as multiplicand)
EE/6DAB:	A202    	LDX #$02
EE/6DAD:	8E0342  	STX $4203      (Set multiplier to 2)
EE/6DB0:	EA      	NOP
EE/6DB1:	EA      	NOP
EE/6DB2:	EA      	NOP
EE/6DB3:	AD1642  	LDA $4216      (Product)
EE/6DB6:	856A    	STA $6A        (Save it temporarily)
EE/6DB8:	A65A    	LDX $5A
EE/6DBA:	D015    	BNE $6DD1
EE/6DBC:	18      	CLC            (Clear Carry for addition)
EE/6DBD:	6537    	ADC $37
EE/6DBF:	8537    	STA $37
EE/6DC1:	A539    	LDA $39        (Current Y position in pixels, high byte; $3A is unknown)
EE/6DC3:	690000  	ADC #$0000     (Add one if Carry set) ($00...)
EE/6DC6:	8539    	STA $39        (Save changes)
EE/6DC8:	18      	CLC            (Clear Carry for addition)
EE/6DC9:	A540    	LDA $40
EE/6DCB:	656A    	ADC $6A
EE/6DCD:	8540    	STA $40        (Save changes) (BRA $6DE6...)
EE/6DCF:	8017    	BRA $6DE8
EE/6DD1:	856A    	STA $6A        (EE/6DB6 did that already...)
EE/6DD3:	A537    	LDA $37        (Current Y position in pixels, bottom two bytes)
EE/6DD5:	38      	SEC            (Set Carry for subtraction)
EE/6DD6:	E56A    	SBC $6A
EE/6DD8:	8537    	STA $37        (Save changes)
EE/6DDA:	A539    	LDA $39        (Current Y position in pixels, high byte; $3A is unknown)
EE/6DDC:	E90000  	SBC #$0000     (Subtract one if an underflow occurred) ($00...)
EE/6DDF:	8539    	STA $39        (Save changes) (BCS $6DE1, DEC $39...)
EE/6DE1:	38      	SEC            (Set Carry for subtraction)
EE/6DE2:	A540    	LDA $40
EE/6DE4:	E56A    	SBC $6A
EE/6DE6:	8540    	STA $40        (Save changes)
EE/6DE8:	A65E    	LDX $5E
EE/6DEA:	8E0242  	STX $4202      (Set multiplicand)
EE/6DED:	A202    	LDX #$02
EE/6DEF:	8E0342  	STX $4203      (Set multiplier to 2)
EE/6DF2:	EA      	NOP
EE/6DF3:	EA      	NOP
EE/6DF4:	EA      	NOP
EE/6DF5:	AD1642  	LDA $4216      (Product)
EE/6DF8:	856A    	STA $6A        (Save it temporarily)
EE/6DFA:	A65B    	LDX $5B
EE/6DFC:	D015    	BNE $6E13
EE/6DFE:	18      	CLC            (Clear Carry for addition)
EE/6DFF:	6533    	ADC $33        (Add to current X position in pixels, bottom two bytes)
EE/6E01:	8533    	STA $33        (Save as current X position in pixels, bottom two bytes)
EE/6E03:	A535    	LDA $35        (Current X position in pixels, high byte)
EE/6E05:	690000  	ADC #$0000     (Add one if an overflow occurred) ($00...)
EE/6E08:	8535    	STA $35        (Save changes) (BCC, INC $35...)
EE/6E0A:	18      	CLC            (Clear Carry for addition)
EE/6E0B:	A53C    	LDA $3C
EE/6E0D:	656A    	ADC $6A
EE/6E0F:	853C    	STA $3C        (Save changes)
EE/6E11:	8017    	BRA $6E2A
EE/6E13:	856A    	STA $6A
EE/6E15:	A533    	LDA $33        (Current X position in pixels, bottom two bytes)
EE/6E17:	38      	SEC            (Set Carry for subtraction)
EE/6E18:	E56A    	SBC $6A
EE/6E1A:	8533    	STA $33        (Save changes)
EE/6E1C:	A535    	LDA $35        (Current X position in pixels, high byte)
EE/6E1E:	E90000  	SBC #$0000     (Subtract one if Carry clear) ($00...)
EE/6E21:	8535    	STA $35        (Save changes) (BCS, DEC $35...)
EE/6E23:	38      	SEC            (Set Carry for subtraction)
EE/6E24:	A53C    	LDA $3C
EE/6E26:	E56A    	SBC $6A
EE/6E28:	853C    	STA $3C        (Save changes)
EE/6E2A:	A534    	LDA $34        (Current X position in pixels)
EE/6E2C:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/6E2F:	8534    	STA $34        (Save changes)
EE/6E31:	A538    	LDA $38        (Current Y position in pixels)
EE/6E33:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/6E36:	8538    	STA $38        (Save changes) (LDA #$F000, TRB $34, TRB $38...)
EE/6E38:	A529    	LDA $29        (Rotation speed)
EE/6E3A:	F01E    	BEQ $6E5A      (Branch if not turning)
EE/6E3C:	300F    	BMI $6E4D      (Branch if turning right)
EE/6E3E:	38      	SEC            (Set Carry for subtraction)
EE/6E3F:	E91000  	SBC #$0010     (Decrease left-rotation speed by 16)
EE/6E42:	8529    	STA $29        (Save changes)
EE/6E44:	A52B    	LDA $2B
EE/6E46:	E90000  	SBC #$0000     (Subtract one if an underflow occurred) ($00...)
EE/6E49:	852B    	STA $2B        (Save changes) (BRA $6E58...)
EE/6E4B:	800D    	BRA $6E5A      (Skip the code for when turning right)
EE/6E4D:	18      	CLC            (Clear Carry for addition)
EE/6E4E:	691000  	ADC #$0010     (Decrease right-rotation speed by 16)
EE/6E51:	8529    	STA $29        (Save changes)
EE/6E53:	A52B    	LDA $2B
EE/6E55:	690000  	ADC #$0000     (Add one if an overflow occurred) ($00...)
EE/6E58:	852B    	STA $2B        (Save changes) (BCC, INC $2B...)
EE/6E5A:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/6E5C:	300A    	BMI $6E68      (Branch if descending)
EE/6E5E:	38      	SEC            (Set Carry for subtraction)
EE/6E5F:	E91000  	SBC #$0010     (Decrease ascension speed by 16)
EE/6E62:	900A    	BCC $6E6E      (Branch if the difference is negative)
EE/6E64:	852D    	STA $2D        (Save changes) (BRA $6E6C...)
EE/6E66:	8006    	BRA $6E6E      (Skip next three instructions)
EE/6E68:	18      	CLC            (Clear Carry for addition)
EE/6E69:	691000  	ADC #$0010     (Decrease the descension speed by 16)
EE/6E6C:	852D    	STA $2D        (Save changes)
EE/6E6E:	A526    	LDA $26        (Vehicle speed)
EE/6E70:	38      	SEC            (Set Carry for subtraction)
EE/6E71:	E98000  	SBC #$0080     (Subtract 128)
EE/6E74:	C90000  	CMP #$0000     (Superfluous...)
EE/6E77:	1003    	BPL $6E7C      (Branch if the difference is positive)
EE/6E79:	A90000  	LDA #$0000     (Set speed to zero) (TDC...)
EE/6E7C:	8526    	STA $26        (Save changes)
EE/6E7E:	C220    	REP #$20       (16-bit A)
EE/6E80:	A532    	LDA $32        (Backup of shared controller bits created at EE/6EAF)
EE/6E82:	891000  	BIT #$0010     (Was anyone pressing Start when this function last executed?)
EE/6E85:	D026    	BNE $6EAD      (Branch if so)
EE/6E87:	A505    	LDA $05        (Controller bits)
EE/6E89:	891000  	BIT #$0010     (Is anyone pressing Start?)
EE/6E8C:	F01F    	BEQ $6EAD      (Branch if not)
EE/6E8E:	ADF611  	LDA $11F6
EE/6E91:	890100  	BIT #$0001     (Minimap is disabled?)
EE/6E94:	D00E    	BNE $6EA4      (Branch if so) (LSR A, BCS...)
EE/6E96:	090100  	ORA #$0001     (Set the "hide minimap" bit)
EE/6E99:	8DF611  	STA $11F6      (Save changes) (INC $11F6...)
EE/6E9C:	208F41  	JSR $418F      (Hide minimap)
EE/6E9F:	206C42  	JSR $426C      (Hide both minimap dots)
EE/6EA2:	8009    	BRA $6EAD      (Skip next three instructions)
EE/6EA4:	29FEFF  	AND #$FFFE     (Clear the "hide minimap" bit)
EE/6EA7:	8DF611  	STA $11F6      (Save changes) (DEC $11F6...)
EE/6EAA:	202D41  	JSR $412D      (Show minimap)
EE/6EAD:	A504    	LDA $04        (Shared controller bits)
EE/6EAF:	8531    	STA $31        (Make a copy for use at EE/6E80)
EE/6EB1:	A519    	LDA $19
EE/6EB3:	D033    	BNE $6EE8      (Branch if the airship is in the process of landing)
EE/6EB5:	A508    	LDA $08        (Controller 1 buttons that just got pushed)
EE/6EB7:	894000  	BIT #$0040     (Pressed X?)
EE/6EBA:	F02C    	BEQ $6EE8      (Branch if not)
EE/6EBC:	64ED    	STZ $ED        (Zero event queue)
EE/6EBE:	A52F    	LDA $2F        (Vehicle height)
EE/6EC0:	8DF411  	STA $11F4      (Make a backup copy)
EE/6EC3:	A573    	LDA $73        (Vehicle direction)
EE/6EC5:	090080  	ORA #$8000     (Set the vehicle mode flag)
EE/6EC8:	8DF211  	STA $11F2      (Save as backup of direction, including flags)
EE/6ECB:	E220    	SEP #$20       (8-bit A) (This could have waited...)
EE/6ECD:	AF69B2EE	LDA $EEB269    (Pointer to event for going amidship, low byte)
EE/6ED1:	85EA    	STA $EA        (Set event address, low byte)
EE/6ED3:	AF6AB2EE	LDA $EEB26A    (Pointer to event for going amidship, middle byte)
EE/6ED7:	85EB    	STA $EB        (Set event address, middle byte)
EE/6ED9:	AF6BB2EE	LDA $EEB26B    (Pointer to event for going amidship, high byte)
EE/6EDD:	18      	CLC            (Clear Carry for addition)
EE/6EDE:	69CA    	ADC #$CA       (Add base bank)
EE/6EE0:	85EC    	STA $EC        (Set event address, high byte)
EE/6EE2:	A5E7    	LDA $E7
EE/6EE4:	0941    	ORA #$41
EE/6EE6:	85E7    	STA $E7        (Save changes) (LDA #$41, TSB $E7...)
EE/6EE8:	E220    	SEP #$20       (8-bit A)
EE/6EEA:	AD641F  	LDA $1F64      (Map number from SRAM, low byte)
EE/6EED:	C901    	CMP #$01       (World of Ruin?)
EE/6EEF:	D07A    	BNE $6F6B      (Exit if not)
EE/6EF1:	A504    	LDA $04        (Shared controller bits)
EE/6EF3:	8980    	BIT #$80       (Is anyone pressing A?) (BPL...)
EE/6EF5:	F074    	BEQ $6F6B      (Exit if not)
EE/6EF7:	ADD21D  	LDA $1DD2      (Battle event byte)
EE/6EFA:	8901    	BIT #$01       (Is Doom Gaze dead?)
EE/6EFC:	D06D    	BNE $6F6B      (Branch if so) (LSR A, BCS...)
EE/6EFE:	C230    	REP #$30       (16-bit A and indexes)
EE/6F00:	A534    	LDA $34        (Current X position in pixels)
EE/6F02:	4A      	LSR A          (Divide by 2)
EE/6F03:	4A      	LSR A          (Divide by 4)
EE/6F04:	4A      	LSR A          (Divide by 8)
EE/6F05:	4A      	LSR A          (Divide by 16)
EE/6F06:	4A      	LSR A          (Divide by 32)
EE/6F07:	4A      	LSR A          (Divide by 64, determine what 4x4 block you are on)
EE/6F08:	29FF00  	AND #$00FF     (Remain between 0 and 255)
EE/6F0B:	8558    	STA $58        (Save current X 4x4 block temporarily)
EE/6F0D:	A538    	LDA $38        (Current Y position in pixels)
EE/6F0F:	4A      	LSR A          (Divide by 2)
EE/6F10:	4A      	LSR A          (Divide by 4)
EE/6F11:	4A      	LSR A          (Divide by 8)
EE/6F12:	4A      	LSR A          (Divide by 16)
EE/6F13:	4A      	LSR A          (Divide by 32)
EE/6F14:	4A      	LSR A          (Divide by 64, determine what 4x4 block you are on)
EE/6F15:	29FF00  	AND #$00FF     (Remain between 0 and 255)
EE/6F18:	855A    	STA $5A        (Save current Y 4x4 block temporarily)
EE/6F1A:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/6F1D:	BF000B00	LDA $000B00,X  (Load X position of Doom Gaze's 4x4 block) ($0B00,X...)
EE/6F21:	C558    	CMP $58        (Does it match that of the current 4x4 block?)
EE/6F23:	D00A    	BNE $6F2F      (Branch if not)
EE/6F25:	BF020B00	LDA $000B02,X  (Load Y position of Doom Gaze's 4x4 block) ($0B02,X...)
EE/6F29:	C55A    	CMP $5A        (Does it match that of the current 4x4 block?)
EE/6F2B:	D002    	BNE $6F2F      (Branch if not) (BEQ $6F3A...)
EE/6F2D:	800B    	BRA $6F3A      (You're here if both matched, proceed to fight Doom Gaze)
EE/6F2F:	E8      	INX
EE/6F30:	E8      	INX
EE/6F31:	E8      	INX
EE/6F32:	E8      	INX            (Point to next 4x4 block)
EE/6F33:	E00800  	CPX #$0008     (Tested both blocks?)
EE/6F36:	D0E5    	BNE $6F1D      (Loop if not)
EE/6F38:	8031    	BRA $6F6B      (Exit)
EE/6F3A:	6426    	STZ $26        (Set vehicle speed to zero)
EE/6F3C:	6428    	STZ $28
EE/6F3E:	642A    	STZ $2A
EE/6F40:	642C    	STZ $2C
EE/6F42:	642D    	STZ $2D        (Zero speed of ascent or descent)
EE/6F44:	C210    	REP #$10       (16-bit indexes)
EE/6F46:	A27401  	LDX #$0174     (If the event was loading it, this would be 2-pack $5D)
EE/6F49:	BF0050CF	LDA $CF5000,X  (Monster formations for events)
EE/6F4D:	8DE011  	STA $11E0      (Save Doom Gaze's formation)
EE/6F50:	A92900  	LDA #$0029
EE/6F53:	8DE211  	STA $11E2      (Set background as WoR airship view, ship on right side)
EE/6F56:	E220    	SEP #$20       (8-bit A)
EE/6F58:	9CE411  	STZ $11E4      (Clear various battle flags)
EE/6F5B:	ADF611  	LDA $11F6
EE/6F5E:	0922    	ORA #$22       (Set a battle to occur; remember that it involved Doom Gaze)
EE/6F60:	8DF611  	STA $11F6      (Save changes) (LDA #$22, TSB $11F6...)
EE/6F63:	ADFA11  	LDA $11FA
EE/6F66:	0901    	ORA #$01       (Set bit to maintain airship mode after the battle)
EE/6F68:	8DFA11  	STA $11FA      (Save changes) (LDA #$01, TSB $11FA...)
EE/6F6B:	28      	PLP
EE/6F6C:	60      	RTS

Joypad interpretation for chocobo mode
EE/6F6D:	E220    	SEP #$20       (8-bit A)
EE/6F6F:	C210    	REP #$10       (16-bit indexes)
EE/6F71:	A505    	LDA $05        (Shared controller bits)
EE/6F73:	8901    	BIT #$01       (Is anyone pressing right?)
EE/6F75:	F01F    	BEQ $6F96      (Branch if not) (LSR A, BCC...)
EE/6F77:	C220    	REP #$20       (16-bit A)
EE/6F79:	A529    	LDA $29        (Rotation speed)
EE/6F7B:	38      	SEC            (Set Carry for subtraction)
EE/6F7C:	E92000  	SBC #$0020     (Move the "slider" right by 32)
EE/6F7F:	8529    	STA $29        (Save changes)
EE/6F81:	A52B    	LDA $2B
EE/6F83:	E90000  	SBC #$0000     (Subtract one if underflow occurred) ($00...)
EE/6F86:	852B    	STA $2B        (Save changes)
EE/6F88:	A900FE  	LDA #$FE00     (Maximum speed for right turns)
EE/6F8B:	C529    	CMP $29        (Compare to rotation speed)
EE/6F8D:	3051    	BMI $6FE0      (Branch if greater)
EE/6F8F:	A900FE  	LDA #$FE00     (...)
EE/6F92:	8529    	STA $29        (Cap rotation speed) (BRA $6FB8...)
EE/6F94:	804A    	BRA $6FE0      (Skip the code for other rotation cases)
EE/6F96:	E220    	SEP #$20       (8-bit A)
EE/6F98:	A505    	LDA $05        (Shared controller bits)
EE/6F9A:	8902    	BIT #$02       (Is anyone pressing left?)
EE/6F9C:	F01E    	BEQ $6FBC      (Branch if not)
EE/6F9E:	C221    	REP #$21       (16-bit A; clear Carry)
EE/6FA0:	A529    	LDA $29        (Rotation speed)
EE/6FA2:	692000  	ADC #$0020     (Move the "slider" left by 32)
EE/6FA5:	8529    	STA $29        (Save changes)
EE/6FA7:	A52B    	LDA $2B
EE/6FA9:	690000  	ADC #$0000     (Add one if Carry set) ($00...)
EE/6FAC:	852B    	STA $2B        (Save changes)
EE/6FAE:	A90102  	LDA #$0201     (Maximum speed for left turns, plus one)
EE/6FB1:	C529    	CMP $29        (Compare to rotation speed)
EE/6FB3:	102B    	BPL $6FE0      (Branch if greater)
EE/6FB5:	A90002  	LDA #$0200     (Maximum speed for left turns) (DEC A...)
EE/6FB8:	8529    	STA $29        (Enfore maximum rotation speed)
EE/6FBA:	8024    	BRA $6FE0      (Skip code for when pressing neither left nor right)
EE/6FBC:	C220    	REP #$20       (16-bit A)
EE/6FBE:	A529    	LDA $29        (Rotation speed)
EE/6FC0:	F01E    	BEQ $6FE0      (Branch if not turning)
EE/6FC2:	300F    	BMI $6FD3      (Branch if turning right)
EE/6FC4:	38      	SEC            (Set Carry for subtraction)
EE/6FC5:	E92000  	SBC #$0020     (Decrease the speed of left turns by 32)
EE/6FC8:	8529    	STA $29        (Save changes)
EE/6FCA:	A52B    	LDA $2B
EE/6FCC:	E90000  	SBC #$0000     (Subtract one if Carry clear) ($00...)
EE/6FCF:	852B    	STA $2B        (Save changes)
EE/6FD1:	800D    	BRA $6FE0      (Skip code for deceleration of right turns)
EE/6FD3:	18      	CLC            (Clear Carry for addition)
EE/6FD4:	692000  	ADC #$0020     (Decrease the speed of right turns by 32)
EE/6FD7:	8529    	STA $29        (Save changes)
EE/6FD9:	A52B    	LDA $2B
EE/6FDB:	690000  	ADC #$0000     (Add one if an overflow occurred) ($00...)
EE/6FDE:	852B    	STA $2B        (Save changes)
EE/6FE0:	C220    	REP #$20       (16-bit A)
EE/6FE2:	A504    	LDA $04        (Shared controller bits)
EE/6FE4:	890008  	BIT #$0800     (Is anyone pressing up?)
EE/6FE7:	D005    	BNE $6FEE      (Branch if so)
EE/6FE9:	898000  	BIT #$0080     (Is anyone pressing A?)
EE/6FEC:	F00F    	BEQ $6FFD      (Branch if not)
EE/6FEE:	A526    	LDA $26        (Vehicle speed)
EE/6FF0:	18      	CLC            (Clear Carry for addition)
EE/6FF1:	694000  	ADC #$0040     (Add 64)
EE/6FF4:	C90101  	CMP #$0101     (Beyond the maximum speed?)
EE/6FF7:	1014    	BPL $700D      (Branch if so)
EE/6FF9:	8526    	STA $26        (Save changes)
EE/6FFB:	8010    	BRA $700D      (Skip decelaration code)
EE/6FFD:	A526    	LDA $26        (Vehicle speed)
EE/6FFF:	38      	SEC            (Set Carry for subtraction)
EE/7000:	E98000  	SBC #$0080     (Subtract 128)
EE/7003:	C90000  	CMP #$0000     (Superfluous...)
EE/7006:	1003    	BPL $700B      (Branch if difference is positive)
EE/7008:	A90000  	LDA #$0000     (Set speed to zero) (TDC...)
EE/700B:	8526    	STA $26        (Save changes)
EE/700D:	C220    	REP #$20       (16-bit A)
EE/700F:	A504    	LDA $04        (Shared controller bits)
EE/7011:	292002  	AND #$0220     (Isolate the "left" and "L" bits)
EE/7014:	C92002  	CMP #$0220     (Are both bits set?)
EE/7017:	D011    	BNE $702A      (Branch if not)
EE/7019:	AD7300  	LDA $0073      (Vehicle direction)
EE/701C:	1A      	INC A          (Rotate counterclockwise by a degree)
EE/701D:	1A      	INC A          (Rotate counterclockwise by a degree)
EE/701E:	C96801  	CMP #$0168     (Compare to 360)
EE/7021:	3004    	BMI $7027      (Branch if smaller)
EE/7023:	38      	SEC            (Carry is already set...)
EE/7024:	E96801  	SBC #$0168     (Subtract 360)
EE/7027:	8D7300  	STA $0073      (Save changes)
EE/702A:	A504    	LDA $04        (Shared controller bits)
EE/702C:	291001  	AND #$0110     (Isolate the "right" and "R" bits)
EE/702F:	C91001  	CMP #$0110     (Are both bits set?)
EE/7032:	D011    	BNE $7045      (Branch if not)
EE/7034:	AD7300  	LDA $0073      (Vehicle direction)
EE/7037:	3A      	DEC A          (Rotate clockwise by a degree)
EE/7038:	3A      	DEC A          (Rotate clockwise by a degree)
EE/7039:	C90000  	CMP #$0000     (Superfluous...)
EE/703C:	1004    	BPL $7042      (Branch if the difference is positive)
EE/703E:	18      	CLC            (Clear Carry for addition)
EE/703F:	696801  	ADC #$0168     (Add 360)
EE/7042:	8D7300  	STA $0073      (Save changes)
EE/7045:	A505    	LDA $05        (Controller bits)
EE/7047:	898000  	BIT #$0080     (Is anyone pressing B?)
EE/704A:	F003    	BEQ $704F      (Branch if not) (LDA $04, BPL...)
EE/704C:	206E93  	JSR $936E      (Dismount from chocobo)
EE/704F:	C220    	REP #$20       (16-bit A)
EE/7051:	A532    	LDA $32        (Backup of shared controller bits created at EE/7080)
EE/7053:	891000  	BIT #$0010     (Anyone pressed Start when this function last executed?)
EE/7056:	D026    	BNE $707E      (Branch if so)
EE/7058:	A505    	LDA $05        (Controller bits)
EE/705A:	891000  	BIT #$0010     (Is anyone pressing Start?)
EE/705D:	F01F    	BEQ $707E      (Branch if not)
EE/705F:	ADF611  	LDA $11F6
EE/7062:	890100  	BIT #$0001     (Minimap disabled?)
EE/7065:	D00E    	BNE $7075      (Branch if so) (LSR A, BCS...)
EE/7067:	090100  	ORA #$0001     (Set the "hide minimap" bit)
EE/706A:	8DF611  	STA $11F6      (Save changes) (INC $11F6...)
EE/706D:	208F41  	JSR $418F      (Hide minimap)
EE/7070:	206C42  	JSR $426C      (Hide both minimap dots)
EE/7073:	8009    	BRA $707E      (Skip next three instructions)
EE/7075:	29FEFF  	AND #$FFFE     (Clear the "hide minimap" bit)
EE/7078:	8DF611  	STA $11F6      (Save changes) (DEC $11F6...)
EE/707B:	202D41  	JSR $412D      (Show minimap)
EE/707E:	A504    	LDA $04        (Shared controller bits)
EE/7080:	8531    	STA $31        (Make a copy for use at EE/7051)
EE/7082:	28      	PLP
EE/7083:	60      	RTS

Vehicle script routine
EE/7084:	08      	PHP
EE/7085:	E220    	SEP #$20       (8-bit A)
EE/7087:	C210    	REP #$10       (16-bit indexes)
EE/7089:	A5E7    	LDA $E7
EE/708B:	8904    	BIT #$04       (Reiterate the previous command?)
EE/708D:	F004    	BEQ $7093      (Branch if not)
EE/708F:	A5F0    	LDA $F0        (Vehicle command)
EE/7091:	8009    	BRA $709C      (Execute it again)
EE/7093:	A4ED    	LDY $ED        (Event queue)
EE/7095:	B7EA    	LDA [$EA],Y    (Load vehicle command from event script)
EE/7097:	85F0    	STA $F0        (Set current vehicle command)
EE/7099:	C8      	INY
EE/709A:	84ED    	STY $ED        (Advance event queue by a byte)
EE/709C:	C220    	REP #$20       (16-bit A)
EE/709E:	29FF00  	AND #$00FF     (Zero the high byte)
EE/70A1:	0A      	ASL A          (Multiply by 2)
EE/70A2:	AA      	TAX            (Transfer A to X)
EE/70A3:	7CFB76  	JMP ($76FB,X)

A multitude of vehicle commands jump here when they finish; this is a mere waste of space
EE/70A6:	28      	PLP
EE/70A7:	60      	RTS

Vehicle commands 00-7F, move vehicle
EE/70A8:	E220    	SEP #$20       (8-bit A)
EE/70AA:	C210    	REP #$10       (16-bit indexes)
EE/70AC:	A5E7    	LDA $E7
EE/70AE:	8904    	BIT #$04       (Repeated vehicle command?)
EE/70B0:	D00F    	BNE $70C1      (Branch if so)
EE/70B2:	A4ED    	LDY $ED        (Event queue)
EE/70B4:	B7EA    	LDA [$EA],Y    (Unit parameter)
EE/70B6:	85EF    	STA $EF
EE/70B8:	C8      	INY
EE/70B9:	84ED    	STY $ED        (Advance event queue by a byte)
EE/70BB:	A5E7    	LDA $E7
EE/70BD:	0904    	ORA #$04       (Set vehicle command to repeat)
EE/70BF:	85E7    	STA $E7        (Save changes) (LDA #$04, TSB $E7...)
EE/70C1:	6460    	STZ $60        (Clear movement bits for vehicle script, low byte)
EE/70C3:	6461    	STZ $61        (Clear movement bits for vehicle script, high byte)
EE/70C5:	A5F0    	LDA $F0        (Vehicle command)
EE/70C7:	8901    	BIT #$01       (Double speed of turns?)
EE/70C9:	F006    	BEQ $70D1      (Branch if not) (LSR A, BCC...)
EE/70CB:	A930    	LDA #$30
EE/70CD:	0560    	ORA $60        (Set "L" and "R" bits)
EE/70CF:	8560    	STA $60        (Movement bits for vehicle script, low byte) (LDA #$30, TSB $60...)
EE/70D1:	A5F0    	LDA $F0        (Vehicle command)
EE/70D3:	8902    	BIT #$02       (Decrease speed by 128?)
EE/70D5:	F006    	BEQ $70DD      (Branch if not)
EE/70D7:	A980    	LDA #$80
EE/70D9:	0561    	ORA $61        (Set "decelerate" bit)
EE/70DB:	8561    	STA $61        (Movement bits for vehicle script, high byte) (LDA #$80, TSB $61...)
EE/70DD:	A5F0    	LDA $F0        (Vehicle command)
EE/70DF:	8904    	BIT #$04       (Increase speed by 64?)
EE/70E1:	F006    	BEQ $70E9      (Branch if not)
EE/70E3:	A980    	LDA #$80
EE/70E5:	0560    	ORA $60        (Set "accelerate" bit)
EE/70E7:	8560    	STA $60        (Movement bits for vehicle script, high byte) (LDA #$80, TSB $60...)
EE/70E9:	A5F0    	LDA $F0        (Vehicle command)
EE/70EB:	4A      	LSR A          (Divide by 2)
EE/70EC:	4A      	LSR A          (Divide by 4)
EE/70ED:	4A      	LSR A          (Divide by 8)
EE/70EE:	290F    	AND #$0F       (Superfluous...)
EE/70F0:	0561    	ORA $61        (Set direction bits) (TSB $61...)
EE/70F2:	8561    	STA $61        (Movement bits for vehicle script, high byte)
EE/70F4:	A5EF    	LDA $EF        (Load the saved unit parameter)
EE/70F6:	F006    	BEQ $70FE      (Branch if zero)
EE/70F8:	3A      	DEC A          (Decrease by one)
EE/70F9:	85EF    	STA $EF        (Save changes) (DEC $EF...)
EE/70FB:	4CA670  	JMP $70A6      (PLP, RTS...)
EE/70FE:	A5E7    	LDA $E7
EE/7100:	29FB    	AND #$FB       (Disable reiteration of command)
EE/7102:	85E7    	STA $E7        (Save changes) (LDA #$04, TRB $E7...)
EE/7104:	4CA670  	JMP $70A6      (PLP, RTS...)

Vehicle commands 80-B7, branch if any of the selected event bits is set/clear
EE/7107:	E220    	SEP #$20       (8-bit A)
EE/7109:	A5F0    	LDA $F0        (Vehicle command)
EE/710B:	2907    	AND #$07       (Isolate number of conditions, minus one)
EE/710D:	1A      	INC A          (Add one)
EE/710E:	8558    	STA $58        (Save it temporarily)
EE/7110:	A4ED    	LDY $ED        (Event queue)
EE/7112:	C220    	REP #$20       (16-bit A)
EE/7114:	A5F0    	LDA $F0        (Vehicle command)
EE/7116:	290700  	AND #$0007     (Isolate number of conditions, minus one)
EE/7119:	1A      	INC A          (Add one)
EE/711A:	0A      	ASL A          (Double it)
EE/711B:	18      	CLC            (Clear Carry for addition) (Superfluous...)
EE/711C:	65ED    	ADC $ED
EE/711E:	85ED    	STA $ED        (Advance event queue by two bytes for each tested bit)
EE/7120:	C220    	REP #$20       (16-bit A)
EE/7122:	B7EA    	LDA [$EA],Y    (Bit parameter, including a flag)
EE/7124:	C8      	INY
EE/7125:	C8      	INY            (Point to next bit parameter)
EE/7126:	855A    	STA $5A        (Save it temporarily)
EE/7128:	290700  	AND #$0007     (Isolate 0-7 bit number)
EE/712B:	AA      	TAX            (Transfer A to X)
EE/712C:	BFFA7CEE	LDA $EE7CFA,X  (Bitfield)
EE/7130:	855C    	STA $5C        (Save it temporarily)
EE/7132:	A55A    	LDA $5A        (Temporarily saved bit parameter, including a flag)
EE/7134:	29FF7F  	AND #$7FFF     (Isolate the bit number)
EE/7137:	4A      	LSR A          (Divide by 2)
EE/7138:	4A      	LSR A          (Divide by 4)
EE/7139:	4A      	LSR A          (Divide by 8)
EE/713A:	AA      	TAX            (Transfer A to X)
EE/713B:	E220    	SEP #$20       (8-bit A)
EE/713D:	A55B    	LDA $5B        (Temporarily saved bit parameter, high byte)
EE/713F:	3009    	BMI $714A      (Branch if condition requires bit to be set)
EE/7141:	BD801E  	LDA $1E80,X    (Event bits)
EE/7144:	255C    	AND $5C        (Isolate the selected bit)
EE/7146:	F017    	BEQ $715F      (Branch if clear)
EE/7148:	8007    	BRA $7151      (Skip next three instructions)
EE/714A:	BD801E  	LDA $1E80,X    (Event bits)
EE/714D:	255C    	AND $5C        (Isolate the selected bit)
EE/714F:	D00E    	BNE $715F      (Branch if set)
EE/7151:	C658    	DEC $58        (One less bit to test)
EE/7153:	D0CB    	BNE $7120      (Loop if more remain)
EE/7155:	A4ED    	LDY $ED        (Event queue)
EE/7157:	C8      	INY
EE/7158:	C8      	INY
EE/7159:	C8      	INY
EE/715A:	84ED    	STY $ED        (Advance event queue by three bytes)
EE/715C:	4C9370  	JMP $7093      (Jump back to vehicle script routine) (BRA $717E...)
EE/715F:	A4ED    	LDY $ED        (Event queue)
EE/7161:	B7EA    	LDA [$EA],Y    (Address parameter, low byte)
EE/7163:	18      	CLC            (...)
EE/7164:	6900    	ADC #$00       (...)
EE/7166:	856A    	STA $6A        (Save temporarily...)
EE/7168:	C8      	INY            (Point to next parameter byte)
EE/7169:	B7EA    	LDA [$EA],Y    (Address parameter, middle byte)
EE/716B:	6900    	ADC #$00       (...)
EE/716D:	856B    	STA $6B        (Save temporarily...)
EE/716F:	C8      	INY            (Point to next parameter byte)
EE/7170:	B7EA    	LDA [$EA],Y    (Address parameter, high byte)
EE/7172:	69CA    	ADC #$CA       (Add base bank)
EE/7174:	85EC    	STA $EC        (Set event address, high byte)
EE/7176:	A46A    	LDY $6A        (Temporarily saved address)
EE/7178:	84EA    	STY $EA        (Set event address, bottom two bytes)
EE/717A:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/717C:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/717E:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle commands B8-BF, branch if all of the selected event bits are set/clear
EE/7181:	E220    	SEP #$20       (8-bit A)
EE/7183:	A5F0    	LDA $F0        (Vehicle command)
EE/7185:	2907    	AND #$07       (Isolate number of conditions, minus one)
EE/7187:	1A      	INC A          (Add one)
EE/7188:	8558    	STA $58        (Save it temporarily)
EE/718A:	A4ED    	LDY $ED        (Event queue)
EE/718C:	C220    	REP #$20       (16-bit A)
EE/718E:	A5F0    	LDA $F0        (Vehicle command)
EE/7190:	290700  	AND #$0007     (Isolate number of conditions, minus one)
EE/7193:	1A      	INC A          (Add one)
EE/7194:	0A      	ASL A          (Multiply by 2)
EE/7195:	18      	CLC            (Clear Carry for addition) (Superfluous...)
EE/7196:	65ED    	ADC $ED
EE/7198:	85ED    	STA $ED        (Advance event queue by two bytes for each tested bit)
EE/719A:	C220    	REP #$20       (16-bit A)
EE/719C:	B7EA    	LDA [$EA],Y    (Bit parameter, including a flag)
EE/719E:	C8      	INY
EE/719F:	C8      	INY            (Point to next bit parameter)
EE/71A0:	855A    	STA $5A        (Save it temporarily)
EE/71A2:	290700  	AND #$0007     (Isolate 0-7 bit number)
EE/71A5:	AA      	TAX            (Transfer A to X)
EE/71A6:	BFFA7CEE	LDA $EE7CFA,X  (Bitfield)
EE/71AA:	855C    	STA $5C        (Save it temporarily)
EE/71AC:	A55A    	LDA $5A        (Temporarily saved bit parameter, including a flag)
EE/71AE:	29FF7F  	AND #$7FFF     (Isolate the bit number)
EE/71B1:	4A      	LSR A          (Divide by 2)
EE/71B2:	4A      	LSR A          (Divide by 4)
EE/71B3:	4A      	LSR A          (Divide by 8)
EE/71B4:	AA      	TAX            (Transfer A to X)
EE/71B5:	E220    	SEP #$20       (8-bit A)
EE/71B7:	A55B    	LDA $5B        (Temporarily saved bit parameter, high byte)
EE/71B9:	3009    	BMI $71C4      (Branch if condition requires bit to be set)
EE/71BB:	BD801E  	LDA $1E80,X    (Event bits)
EE/71BE:	255C    	AND $5C        (Isolate desired bit)
EE/71C0:	D02F    	BNE $71F1      (Branch if set)
EE/71C2:	8007    	BRA $71CB      (Skip next three instructions)
EE/71C4:	BD801E  	LDA $1E80,X    (Event bits)
EE/71C7:	255C    	AND $5C        (Isolate desired bit)
EE/71C9:	F026    	BEQ $71F1      (Branch if clear)
EE/71CB:	C658    	DEC $58        (One less bit to test)
EE/71CD:	D0CB    	BNE $719A      (Loop if more remain)
EE/71CF:	A4ED    	LDY $ED        (Event queue)
EE/71D1:	B7EA    	LDA [$EA],Y    (Address parameter, low byte)
EE/71D3:	18      	CLC            (...)
EE/71D4:	6900    	ADC #$00       (...)
EE/71D6:	856A    	STA $6A        (Save temporarily...)
EE/71D8:	C8      	INY            (Point to next parameter byte)
EE/71D9:	B7EA    	LDA [$EA],Y    (Address parameter, middle byte)
EE/71DB:	6900    	ADC #$00       (...)
EE/71DD:	856B    	STA $6B        (Save temporarily...)
EE/71DF:	C8      	INY            (Point to next parameter byte)
EE/71E0:	B7EA    	LDA [$EA],Y    (Address parameter, high byte)
EE/71E2:	69CA    	ADC #$CA       (Add base bank)
EE/71E4:	85EC    	STA $EC        (Set event address, high byte)
EE/71E6:	A46A    	LDY $6A        (Temporarily saved address)
EE/71E8:	84EA    	STY $EA        (Set event address, bottom two bytes)
EE/71EA:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/71EC:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/71EE:	4C9370  	JMP $7093      (Jump back to vehicle script routine)
EE/71F1:	A4ED    	LDY $ED        (Event queue)
EE/71F3:	C8      	INY
EE/71F4:	C8      	INY
EE/71F5:	C8      	INY
EE/71F6:	84ED    	STY $ED        (Advance event queue by three bytes)
EE/71F8:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command C0, modify vehicle behavior
EE/71FB:	E220    	SEP #$20       (8-bit A)
EE/71FD:	A4ED    	LDY $ED        (Event queue)
EE/71FF:	B7EA    	LDA [$EA],Y    (Behavior parameter)
EE/7201:	851E    	STA $1E        (Save as vehicle behavior)
EE/7203:	C8      	INY
EE/7204:	84ED    	STY $ED        (Advance event queue by a byte)
EE/7206:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command C1, set vehicle's direction
EE/7209:	E220    	SEP #$20       (8-bit A)
EE/720B:	A4ED    	LDY $ED        (Event queue)
EE/720D:	B7EA    	LDA [$EA],Y    (Direction parameter, low byte)
EE/720F:	8573    	STA $73        (Save as vehicle's direction, low byte)
EE/7211:	C8      	INY
EE/7212:	B7EA    	LDA [$EA],Y    (Direction parameter, high byte)
EE/7214:	8574    	STA $74        (Save as vehicle's direction, high byte)
EE/7216:	C8      	INY
EE/7217:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/7219:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command C2, set vehicle's propulsion direction
EE/721C:	E220    	SEP #$20       (8-bit A)
EE/721E:	A4ED    	LDY $ED        (Event queue)
EE/7220:	B7EA    	LDA [$EA],Y    (Direction parameter, low byte)
EE/7222:	8575    	STA $75        (Save as propulsion direction)
EE/7224:	C8      	INY
EE/7225:	B7EA    	LDA [$EA],Y    (Direction parameter, high byte)
EE/7227:	8576    	STA $76        (Save as propulsion direction)
EE/7229:	C8      	INY
EE/722A:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/722C:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command C3, rotate the sky (unused, and probably ineffective)
EE/722F:	E220    	SEP #$20       (8-bit A)
EE/7231:	A4ED    	LDY $ED        (Event queue)
EE/7233:	B7EA    	LDA [$EA],Y    (Rotation parameter, low byte)
EE/7235:	8583    	STA $83        (Save as sky rotation variable, low byte)
EE/7237:	C8      	INY
EE/7238:	B7EA    	LDA [$EA],Y    (Rotation parameter, high byte)
EE/723A:	8584    	STA $84        (Save as sky rotation variable, high byte)
EE/723C:	C8      	INY
EE/723D:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/723F:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command C4 (unused; affects the Mode 7 BG)
EE/7242:	E220    	SEP #$20       (8-bit A)
EE/7244:	A4ED    	LDY $ED        (Event queue)
EE/7246:	B7EA    	LDA [$EA],Y    (First parameter)
EE/7248:	8585    	STA $85
EE/724A:	C8      	INY
EE/724B:	B7EA    	LDA [$EA],Y    (Second parameter)
EE/724D:	8586    	STA $86
EE/724F:	C8      	INY
EE/7250:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/7252:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command C5, set vehicle height to X
EE/7255:	E220    	SEP #$20       (8-bit A)
EE/7257:	A4ED    	LDY $ED        (Event queue)
EE/7259:	B7EA    	LDA [$EA],Y    (Height parameter, low byte)
EE/725B:	852F    	STA $2F        (Set vehicle height, low byte)
EE/725D:	C8      	INY
EE/725E:	B7EA    	LDA [$EA],Y    (Height parameter, high byte)
EE/7260:	8530    	STA $30        (Set vehicle height, high byte)
EE/7262:	C8      	INY
EE/7263:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/7265:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command C6, propel vehicle at speed X
EE/7268:	E220    	SEP #$20       (8-bit A)
EE/726A:	A4ED    	LDY $ED        (Event queue)
EE/726C:	B7EA    	LDA [$EA],Y    (Speed parameter, low byte)
EE/726E:	8526    	STA $26        (Set vehicle speed, low byte)
EE/7270:	C8      	INY
EE/7271:	B7EA    	LDA [$EA],Y    (Speed parameter, high byte)
EE/7273:	8527    	STA $27        (Set vehicle speed, high byte)
EE/7275:	C8      	INY
EE/7276:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/7278:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command C7, relocate the airship
EE/727B:	E220    	SEP #$20       (8-bit A)
EE/727D:	A4ED    	LDY $ED        (Event queue)
EE/727F:	B7EA    	LDA [$EA],Y    (X-position parameter)
EE/7281:	8F621F00	STA $001F62    (Set X position of landed airship)
EE/7285:	C8      	INY
EE/7286:	B7EA    	LDA [$EA],Y    (Y-position parameter)
EE/7288:	8F631F00	STA $001F63    (Set Y position of landed airship)
EE/728C:	C8      	INY
EE/728D:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/728F:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command C8, set event bit
EE/7292:	C230    	REP #$30       (16-bit A and indexes)
EE/7294:	A4ED    	LDY $ED        (Event queue)
EE/7296:	B7EA    	LDA [$EA],Y    (Bit parameter)
EE/7298:	C8      	INY
EE/7299:	C8      	INY
EE/729A:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/729C:	855A    	STA $5A        (Save the parameter temporarily)
EE/729E:	290700  	AND #$0007     (Isolate 0-7 bit number)
EE/72A1:	AA      	TAX            (Transfer A to X)
EE/72A2:	BFFA7CEE	LDA $EE7CFA,X  (Bitfield)
EE/72A6:	855C    	STA $5C        (Save it temporarily)
EE/72A8:	A55A    	LDA $5A        (Temporarily saved bit parameter)
EE/72AA:	4A      	LSR A          (Divide by 2)
EE/72AB:	4A      	LSR A          (Divide by 4)
EE/72AC:	4A      	LSR A          (Divide by 8)
EE/72AD:	AA      	TAX            (Transfer A to X)
EE/72AE:	E220    	SEP #$20       (8-bit A)
EE/72B0:	BD801E  	LDA $1E80,X    (Event bits)
EE/72B3:	055C    	ORA $5C        (Set the selected bit)
EE/72B5:	9D801E  	STA $1E80,X    (Save changes)
EE/72B8:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command C9, clear event bit
EE/72BB:	C230    	REP #$30       (16-bit A and indexes)
EE/72BD:	A4ED    	LDY $ED        (Event queue)
EE/72BF:	B7EA    	LDA [$EA],Y    (Bit parameter)
EE/72C1:	C8      	INY
EE/72C2:	C8      	INY
EE/72C3:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/72C5:	855A    	STA $5A        (Save the bit parameter temporarily)
EE/72C7:	290700  	AND #$0007     (Isolate 0-7 bit number)
EE/72CA:	AA      	TAX            (Transfer A to X)
EE/72CB:	BFFA7CEE	LDA $EE7CFA,X  (Bitfield)
EE/72CF:	855C    	STA $5C        (Save it temporarily)
EE/72D1:	A55A    	LDA $5A        (Temporarily saved parameter)
EE/72D3:	4A      	LSR A          (Divide by 2)
EE/72D4:	4A      	LSR A          (Divide by 4)
EE/72D5:	4A      	LSR A          (Divide by 8)
EE/72D6:	AA      	TAX            (Transfer A to X)
EE/72D7:	E220    	SEP #$20       (8-bit A)
EE/72D9:	A55C    	LDA $5C        (Temporarily saved bitfield)
EE/72DB:	49FF    	EOR #$FF       (Toggle all bits)
EE/72DD:	855C    	STA $5C        (Save changes)
EE/72DF:	BD801E  	LDA $1E80,X    (Event bits)
EE/72E2:	255C    	AND $5C        (Clear the selected bit)
EE/72E4:	9D801E  	STA $1E80,X    (Save changes)
EE/72E7:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle commands CA-CF, invoke battle
EE/72EA:	E220    	SEP #$20       (8-bit A)
EE/72EC:	7B      	TDC            (Zero A)
EE/72ED:	A4ED    	LDY $ED        (Event queue)
EE/72EF:	B7EA    	LDA [$EA],Y    (Enemy-set parameter)
EE/72F1:	C220    	REP #$20       (16-bit A)
EE/72F3:	0A      	ASL A          (Multiply by 2)
EE/72F4:	0A      	ASL A          (Multiply by 4)
EE/72F5:	AA      	TAX            (Transfer A to X)
EE/72F6:	E220    	SEP #$20       (8-bit A)
EE/72F8:	AD1E02  	LDA $021E      (Frame counter)
EE/72FB:	C92D    	CMP #$2D       (Below 45?)
EE/72FD:	9002    	BCC $7301      (Branch if so)
EE/72FF:	E8      	INX
EE/7300:	E8      	INX            (Increase formation index)
EE/7301:	BF0050CF	LDA $CF5000,X  (Monster formations for events, low byte)
EE/7305:	8FE01100	STA $0011E0    (Set formation)
EE/7309:	BF0150CF	LDA $CF5001,X  (Monster formations for events, high byte)
EE/730D:	8FE11100	STA $0011E1    (Set formation)
EE/7311:	C8      	INY            (Point to next parameter)
EE/7312:	B7EA    	LDA [$EA],Y    (Background parameter)
EE/7314:	8FE21100	STA $0011E2    (Set background)
EE/7318:	C8      	INY
EE/7319:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/731B:	7B      	TDC            (Zero A)
EE/731C:	8FE31100	STA $0011E3
EE/7320:	8FE41100	STA $0011E4    (Clear various battle flags)
EE/7324:	ADF611  	LDA $11F6
EE/7327:	0902    	ORA #$02       (Set a battle to occur)
EE/7329:	8DF611  	STA $11F6      (Save changes) (LDA #$02, TSB $11F6...)
EE/732C:	4CA670  	JMP $70A6      (PLP, RTS...)

Vehicle command D0, show vehicle
EE/732F:	E220    	SEP #$20       (8-bit A)
EE/7331:	A5E7    	LDA $E7
EE/7333:	29DF    	AND #$DF       (Clear "hide vehicle and map character")
EE/7335:	85E7    	STA $E7        (Save changes) (LDA #$20, TRB $E7...)
EE/7337:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command D1, hide vehicle
EE/733A:	E220    	SEP #$20       (8-bit A)
EE/733C:	A5E7    	LDA $E7
EE/733E:	0920    	ORA #$20       (Set "hide vehicle and map character")
EE/7340:	85E7    	STA $E7        (Save changes) (LDA #$20, TSB $E7...)
EE/7342:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command D2, load map
EE/7345:	C220    	REP #$20       (16-bit A)
EE/7347:	A4ED    	LDY $ED        (Event queue)
EE/7349:	B7EA    	LDA [$EA],Y    (Map parameter)
EE/734B:	85F4    	STA $F4        (Set map number and flags)
EE/734D:	890002  	BIT #$0200     (Update variables for parent map?)
EE/7350:	F026    	BEQ $7378      (Branch if not)
EE/7352:	AF641F00	LDA $001F64    (Map number and flags in SRAM variables)
EE/7356:	29FF01  	AND #$01FF     (Isolate map number)
EE/7359:	8F691F00	STA $001F69    (Set parent map)
EE/735D:	A534    	LDA $34        (Current X position in pixels)
EE/735F:	4A      	LSR A          (Divide by 2)
EE/7360:	4A      	LSR A          (Divide by 4)
EE/7361:	4A      	LSR A          (Divide by 8)
EE/7362:	4A      	LSR A          (Divide by 16)
EE/7363:	29FF00  	AND #$00FF     (Finalize conversion into tiles)
EE/7366:	8558    	STA $58        (Save it temporarily)
EE/7368:	A538    	LDA $38        (Current Y position in pixels)
EE/736A:	0A      	ASL A          (Multiply by 2)
EE/736B:	0A      	ASL A          (Multiply by 4)
EE/736C:	0A      	ASL A          (Multiply by 8)
EE/736D:	0A      	ASL A          (Multiply by 16)
EE/736E:	2900FF  	AND #$FF00     (Finalize conversion into tiles)
EE/7371:	18      	CLC            (Clear Carry for addition)
EE/7372:	6558    	ADC $58        (Combine with X position)
EE/7374:	8F6B1F00	STA $001F6B    (Save as position when loading parent map)
EE/7378:	C8      	INY
EE/7379:	C8      	INY            (Point to next parameter)
EE/737A:	B7EA    	LDA [$EA],Y    (Load the position parameter)
EE/737C:	851C    	STA $1C        (Save as coordinates to be saved in SRAM)
EE/737E:	C8      	INY
EE/737F:	C8      	INY            (Point to next parameter)
EE/7380:	B7EA    	LDA [$EA],Y    (Load the mode parameter)
EE/7382:	85F1    	STA $F1
EE/7384:	C8      	INY
EE/7385:	84ED    	STY $ED        (Advance event queue by five bytes)
EE/7387:	CE1900  	DEC $0019      (Let all functions know that a map was loaded via a vehicle command)
EE/738A:	E220    	SEP #$20       (8-bit A)
EE/738C:	A5EA    	LDA $EA        (Event address, low byte)
EE/738E:	18      	CLC            (Clear Carry for addition)
EE/738F:	65ED    	ADC $ED        (Add to low byte of event queue)
EE/7391:	85EA    	STA $EA        (Save changes)
EE/7393:	A5EB    	LDA $EB        (Event address, middle byte)
EE/7395:	65EE    	ADC $EE        (Add to high byte of event queue; add one if Carry set)
EE/7397:	85EB    	STA $EB        (Save changes)
EE/7399:	A5EC    	LDA $EC        (Event address, high byte)
EE/739B:	6900    	ADC #$00       (Add one if Carry set)
EE/739D:	85EC    	STA $EC        (Save changes)
EE/739F:	4CA670  	JMP $70A6      (PLP, RTS...)

Vehicle command D3, load map, automatically enable mode $40
EE/73A2:	C220    	REP #$20       (16-bit A)
EE/73A4:	A4ED    	LDY $ED        (Event queue)
EE/73A6:	B7EA    	LDA [$EA],Y    (Load the map parameter)
EE/73A8:	85F4    	STA $F4        (Save as current map, including flags)
EE/73AA:	890002  	BIT #$0200     (Update variables for parent map?)
EE/73AD:	F026    	BEQ $73D5      (Branch if not)
EE/73AF:	AF641F00	LDA $001F64    (Map number and flags in SRAM variables)
EE/73B3:	29FF01  	AND #$01FF     (Isolate map number)
EE/73B6:	8F691F00	STA $001F69    (Save as parent map)
EE/73BA:	A534    	LDA $34        (Current X position in pixels)
EE/73BC:	4A      	LSR A          (Divide by 2)
EE/73BD:	4A      	LSR A          (Divide by 4)
EE/73BE:	4A      	LSR A          (Divide by 8)
EE/73BF:	4A      	LSR A          (Divide by 16)
EE/73C0:	29FF00  	AND #$00FF     (Finalize conversion into tiles)
EE/73C3:	8558    	STA $58        (Save it temporarily)
EE/73C5:	A538    	LDA $38        (Current Y position in pixels)
EE/73C7:	0A      	ASL A          (Multiply by 2)
EE/73C8:	0A      	ASL A          (Multiply by 4)
EE/73C9:	0A      	ASL A          (Multiply by 8)
EE/73CA:	0A      	ASL A          (Multiply by 16)
EE/73CB:	2900FF  	AND #$FF00     (Finalize conversion into tiles)
EE/73CE:	18      	CLC            (Clear Carry for addition)
EE/73CF:	6558    	ADC $58        (Combine with X position)
EE/73D1:	8F6B1F00	STA $001F6B    (Save as position when loading parent map)
EE/73D5:	C8      	INY
EE/73D6:	C8      	INY            (Point to next parameter)
EE/73D7:	B7EA    	LDA [$EA],Y    (Load the position parameter)
EE/73D9:	851C    	STA $1C        (Save as coordinates to be saved in SRAM)
EE/73DB:	C8      	INY
EE/73DC:	C8      	INY            (Point to next parameter)
EE/73DD:	B7EA    	LDA [$EA],Y    (Load the mode parameter and a superfluous byte)
EE/73DF:	094000  	ORA #$0040     (Enable mode $40)
EE/73E2:	85F1    	STA $F1
EE/73E4:	C8      	INY
EE/73E5:	84ED    	STY $ED        (Advance event queue by four bytes)
EE/73E7:	CE1900  	DEC $0019      (Let all functions know that a map was loaded via a vehicle command)
EE/73EA:	E220    	SEP #$20       (8-bit A)
EE/73EC:	A5EA    	LDA $EA        (Event address, low byte)
EE/73EE:	18      	CLC            (Clear Carry for addition)
EE/73EF:	65ED    	ADC $ED        (Add event queue, low byte)
EE/73F1:	85EA    	STA $EA        (Save changes)
EE/73F3:	A5EB    	LDA $EB        (Event address, middle byte)
EE/73F5:	65EE    	ADC $EE        (Add high byte of event queue, plus one if Carry set)
EE/73F7:	85EB    	STA $EB        (Save changes)
EE/73F9:	A5EC    	LDA $EC        (Event address, high byte)
EE/73FB:	6900    	ADC #$00       (Increase on overflow)
EE/73FD:	85EC    	STA $EC        (Save changes)
EE/73FF:	4CA670  	JMP $70A6      (PLP, RTS...)

Vehicle commands D4-D8, unfade screen
EE/7402:	E220    	SEP #$20       (8-bit A)
EE/7404:	A90F    	LDA #$0F
EE/7406:	8522    	STA $22        (Set screen to reach full brightness)
EE/7408:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command D9, fade screen
EE/740B:	E220    	SEP #$20       (8-bit A)
EE/740D:	6422    	STZ $22        (Set screen to go blank)
EE/740F:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command DA, show flashing arrows
EE/7412:	E220    	SEP #$20       (8-bit A)
EE/7414:	A5E8    	LDA $E8
EE/7416:	0906    	ORA #$06       (Set "show flashing arrows" and "allow direction to be changed")
EE/7418:	85E8    	STA $E8        (Save changes) (LDA #$06, TSB $E8...)
EE/741A:	A900    	LDA #$00
EE/741C:	8F60B67E	STA $7EB660
EE/7420:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command DB, lock in arrow choice
EE/7423:	E220    	SEP #$20       (8-bit A)
EE/7425:	A5E8    	LDA $E8
EE/7427:	29FB    	AND #$FB       (Clear flag allowing direction to be changed)
EE/7429:	85E8    	STA $E8        (Save changes) (LDA #$04, TRB $E8...)
EE/742B:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command DC, hide flashing arrows
EE/742E:	E220    	SEP #$20       (8-bit A)
EE/7430:	A5E8    	LDA $E8
EE/7432:	29FD    	AND #$FD       (Clear flag for showing flashing arrows)
EE/7434:	85E8    	STA $E8        (Save changes) (LDA #$02, TRB $E8...)
EE/7436:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command DD, hide minimap
EE/7439:	E220    	SEP #$20       (8-bit A)
EE/743B:	AFF61100	LDA $0011F6
EE/743F:	0901    	ORA #$01       (Set flag for hiding minimap)
EE/7441:	8FF61100	STA $0011F6    (Save changes)
EE/7445:	208F41  	JSR $418F      (Hide minimap)
EE/7448:	206C42  	JSR $426C      (Hide both minimap dots)
EE/744B:	4CA670  	JMP $70A6      (PLP, RTS...)

Vehicle command DE, change Mode 7 BG horizontal scroll (unused)
EE/744E:	E220    	SEP #$20       (8-bit A)
EE/7450:	A4ED    	LDY $ED        (Event queue)
EE/7452:	B7EA    	LDA [$EA],Y
EE/7454:	C8      	INY            (Point to next parameter)
EE/7455:	857B    	STA $7B
EE/7457:	B7EA    	LDA [$EA],Y
EE/7459:	C8      	INY
EE/745A:	857D    	STA $7D
EE/745C:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/745E:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command DF, show minimap
EE/7461:	E220    	SEP #$20       (8-bit A)
EE/7463:	AFF61100	LDA $0011F6
EE/7467:	29FE    	AND #$FE       (Clear the "hide minimap" bit)
EE/7469:	8FF61100	STA $0011F6    (Save changes)
EE/746D:	202D41  	JSR $412D      (Show minimap)
EE/7470:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command E0, pause for X
EE/7473:	E220    	SEP #$20       (8-bit A)
EE/7475:	A5EF    	LDA $EF        (Load pause count)
EE/7477:	D013    	BNE $748C      (Branch if not zero)
EE/7479:	A4ED    	LDY $ED        (Event queue)
EE/747B:	B7EA    	LDA [$EA],Y    (Load time parameter)
EE/747D:	85EF    	STA $EF        (Save as pause count)
EE/747F:	C8      	INY
EE/7480:	84ED    	STY $ED        (Advance event queue by a byte)
EE/7482:	A90F    	LDA #$0F
EE/7484:	85F1    	STA $F1
EE/7486:	A5E7    	LDA $E7
EE/7488:	0904    	ORA #$04       (Set the command to be executed again)
EE/748A:	85E7    	STA $E7        (Save changes) (LDA #$04, TSB $E7...)
EE/748C:	C6F1    	DEC $F1
EE/748E:	D008    	BNE $7498      (Exit if not zero)
EE/7490:	C6EF    	DEC $EF        (Decrease pause count by one)
EE/7492:	F007    	BEQ $749B      (Branch if zero)
EE/7494:	A904    	LDA #$04
EE/7496:	85F1    	STA $F1
EE/7498:	4CA670  	JMP $70A6      (PLP, RTS...)
EE/749B:	A5E7    	LDA $E7
EE/749D:	29FB    	AND #$FB       (Disable reiteration of command)
EE/749F:	85E7    	STA $E7        (Save changes) (LDA #$04, TSB $E7...)
EE/74A1:	4CA670  	JMP $70A6      (PLP, RTS...)

Vehicle commands E1-F2 (unused)
EE/74A4:	08      	PHP
EE/74A5:	8B      	PHB
EE/74A6:	20BC0D  	JSR $0DBC
EE/74A9:	AB      	PLB
EE/74AA:	28      	PLP
EE/74AB:	E220    	SEP #$20       (8-bit A)
EE/74AD:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command F3, show part of world getting zapped, direct laser beam westward
EE/74B0:	08      	PHP            (...)
EE/74B1:	8B      	PHB
EE/74B2:	E220    	SEP #$20       (8-bit A)
EE/74B4:	A5E9    	LDA $E9
EE/74B6:	0908    	ORA #$08       (Set laser to be directed westward)
EE/74B8:	85E9    	STA $E9        (Save changes) (LDA #$08, TSB $E9...)
EE/74BA:	207813  	JSR $1378      (Show the actual scene)
EE/74BD:	AB      	PLB
EE/74BE:	28      	PLP            (...)
EE/74BF:	E220    	SEP #$20       (...)
EE/74C1:	4CA670  	JMP $70A6      (PLP, RTS...)

Vehicle command F4, change graphic to Falcon
EE/74C4:	08      	PHP            (...)
EE/74C5:	8B      	PHB
EE/74C6:	E220    	SEP #$20       (8-bit A)
EE/74C8:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/74CB:	9C0C42  	STZ $420C      (Disable HDMA)
EE/74CE:	A980    	LDA #$80
EE/74D0:	8D0021  	STA $2100      (Disable screen)
EE/74D3:	AF51B2EE	LDA $EEB251    (Pointer to Falcon graphics, low byte)
EE/74D7:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/74D9:	AF52B2EE	LDA $EEB252    (Pointer to Falcon graphics, middle byte)
EE/74DD:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/74DF:	AF53B2EE	LDA $EEB253    (Pointer to Falcon graphics, high byte)
EE/74E3:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/74E5:	A20020  	LDX #$2000
EE/74E8:	86D5    	STX $D5        (Destination address)
EE/74EA:	A97E    	LDA #$7E
EE/74EC:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/74EE:	2076A4  	JSR $A476      (LZSS decompression)
EE/74F1:	A980    	LDA #$80
EE/74F3:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/74F6:	A20064  	LDX #$6400
EE/74F9:	8E1621  	STX $2116      (Set VRAM pointer to $C800)
EE/74FC:	A20118  	LDX #$1801
EE/74FF:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/7502:	A20020  	LDX #$2000
EE/7505:	8E0243  	STX $4302      (Source address)
EE/7508:	A97E    	LDA #$7E
EE/750A:	8D0443  	STA $4304      (Source bank; 7E/2000)
EE/750D:	A20018  	LDX #$1800
EE/7510:	8E0543  	STX $4305      (Number of bytes: #$1800)
EE/7513:	A901    	LDA #$01
EE/7515:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/7518:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/751B:	BF00EFD2	LDA $D2EF00,X  (Load color data for the Falcon)
EE/751F:	9F00E17E	STA $7EE100,X  (Save to airship palette)
EE/7523:	E8      	INX            (Point to next byte)
EE/7524:	E02000  	CPX #$0020     (Copied the entire palette?)
EE/7527:	D0F2    	BNE $751B      (Loop if not)
EE/7529:	A9B1    	LDA #$B1
EE/752B:	8D0042  	STA $4200      (Enable NMI, H/V-Count IRQ, auto joypad read)
EE/752E:	6424    	STZ $24        (Reset NMI count)
EE/7530:	A524    	LDA $24        (NMI count)
EE/7532:	F0FC    	BEQ $7530      (Loop until an NMI occurs)
EE/7534:	6424    	STZ $24        (Erase all traces of the NMI occurrence)
EE/7536:	AB      	PLB
EE/7537:	28      	PLP            (...)
EE/7538:	E220    	SEP #$20       (...)
EE/753A:	4CA670  	JMP $70A6      (PLP, RTS...)

Vehicle command F5, show part of world getting zapped, direct laser beam eastward
EE/753D:	08      	PHP            (...)
EE/753E:	8B      	PHB
EE/753F:	E220    	SEP #$20       (8-bit A)
EE/7541:	A5E9    	LDA $E9
EE/7543:	29F7    	AND #$F7       (Set laser to be directed eastward)
EE/7545:	85E9    	STA $E9        (Save changes) (LDA #$08, TRB $E9...)
EE/7547:	207813  	JSR $1378      (Show the actual scene)
EE/754A:	AB      	PLB
EE/754B:	28      	PLP            (...)
EE/754C:	E220    	SEP #$20       (...)
EE/754E:	4CA670  	JMP $70A6      (PLP, RTS...)

Vehicle command F6 (unused)
EE/7551:	08      	PHP            (The $15C7 call handles that...)
EE/7552:	8B      	PHB            (And this, too...)
EE/7553:	20C715  	JSR $15C7
EE/7556:	AB      	PLB            (...)
EE/7557:	28      	PLP            (...)
EE/7558:	E220    	SEP #$20       (8-bit A)
EE/755A:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command F7, change graphic to pigeon
EE/755D:	E220    	SEP #$20       (8-bit A)
EE/755F:	A912    	LDA #$12
EE/7561:	8FCA0000	STA $0000CA    (This will initialize the flying pigeon)
EE/7565:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command F8, show part of world getting blown up
EE/7568:	08      	PHP
EE/7569:	8B      	PHB
EE/756A:	208611  	JSR $1186      (Show the actual scene)
EE/756D:	AB      	PLB
EE/756E:	28      	PLP
EE/756F:	E220    	SEP #$20       (8-bit A)
EE/7571:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command F9, show part of world getting zapped, produce explosions (unused; freezes the game)
EE/7574:	08      	PHP
EE/7575:	8B      	PHB
EE/7576:	20AB0E  	JSR $0EAB      (Show the actual scene)
EE/7579:	AB      	PLB
EE/757A:	28      	PLP
EE/757B:	E220    	SEP #$20       (8-bit A)
EE/757D:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command FA, show airship emerging from the ocean
EE/7580:	08      	PHP
EE/7581:	8B      	PHB
EE/7582:	20710C  	JSR $0C71      (Show the actual scene)
EE/7585:	AB      	PLB
EE/7586:	28      	PLP
EE/7587:	E220    	SEP #$20       (8-bit A)
EE/7589:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command FB, show airship smoking
EE/758C:	08      	PHP
EE/758D:	8B      	PHB
EE/758E:	E220    	SEP #$20       (8-bit A)
EE/7590:	A910    	LDA #$10
EE/7592:	85CA    	STA $CA        (This will initialize and eventually draw the smoking airship)
EE/7594:	AB      	PLB
EE/7595:	28      	PLP
EE/7596:	E220    	SEP #$20       (8-bit A)
EE/7598:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command FC, show airship crashing
EE/759B:	08      	PHP
EE/759C:	8B      	PHB
EE/759D:	0B      	PHD            (Seems pointless...)
EE/759E:	E220    	SEP #$20       (8-bit A)
EE/75A0:	A901    	LDA #$01
EE/75A2:	85CA    	STA $CA        (This will draw a flying airship)
EE/75A4:	20300B  	JSR $0B30      (Show the actual scene)
EE/75A7:	2B      	PLD            (...)
EE/75A8:	AB      	PLB
EE/75A9:	28      	PLP
EE/75AA:	E220    	SEP #$20       (8-bit A)
EE/75AC:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command FD, change graphic to Esper Terra
EE/75AF:	E220    	SEP #$20       (8-bit A)
EE/75B1:	A90C    	LDA #$0C
EE/75B3:	8FCA0000	STA $0000CA    (This will initialize flying Esper Terra)
EE/75B7:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command FE, show scene with airship heading to Vector
EE/75BA:	08      	PHP
EE/75BB:	8B      	PHB
EE/75BC:	0B      	PHD            (Seems pointless...)
EE/75BD:	20C307  	JSR $07C3      (Show the actual scene)
EE/75C0:	2B      	PLD            (...)
EE/75C1:	AB      	PLB
EE/75C2:	28      	PLP
EE/75C3:	E220    	SEP #$20       (8-bit A)
EE/75C5:	4C9370  	JMP $7093      (Jump back to vehicle script routine)

Vehicle command FF, end vehicle script
EE/75C8:	E220    	SEP #$20       (8-bit A)
EE/75CA:	A5E7    	LDA $E7
EE/75CC:	29FC    	AND #$FC
EE/75CE:	85E7    	STA $E7        (Save changes) (LDA #$03, TSB $E7...)
EE/75D0:	4CA670  	JMP $70A6      (PLP, RTS...)

Perform scripted vehicle movement
EE/75D3:	E220    	SEP #$20       (8-bit A)
EE/75D5:	A561    	LDA $61        (Movement bits for vehicle script, high byte)
EE/75D7:	8901    	BIT #$01       (Turn right?)
EE/75D9:	F01F    	BEQ $75FA      (Branch if not) (LSR A, BCC...)
EE/75DB:	C220    	REP #$20       (16-bit A)
EE/75DD:	A529    	LDA $29        (Rotation speed)
EE/75DF:	38      	SEC            (Set Carry for subtraction)
EE/75E0:	E92000  	SBC #$0020     (Move the "slider" right by 32)
EE/75E3:	8529    	STA $29        (Save changes)
EE/75E5:	A52B    	LDA $2B
EE/75E7:	E90000  	SBC #$0000     (Subtract one if Carry clear) (SBC $00...)
EE/75EA:	852B    	STA $2B        (Save changes)
EE/75EC:	A900FE  	LDA #$FE00     (Maximum speed for right turns)
EE/75EF:	C529    	CMP $29        (Compare to rotation speed)
EE/75F1:	3053    	BMI $7646      (Branch if greater)
EE/75F3:	A900FE  	LDA #$FE00     (...)
EE/75F6:	8529    	STA $29        (Cap rotation speed)
EE/75F8:	804C    	BRA $7646      (Skip the code for other rotation cases)
EE/75FA:	E220    	SEP #$20       (8-bit A)
EE/75FC:	A561    	LDA $61        (Movement bits for vehicle script, high byte)
EE/75FE:	8902    	BIT #$02       (Turn left?)
EE/7600:	F020    	BEQ $7622      (Branch if not)
EE/7602:	C220    	REP #$20       (...)
EE/7604:	C221    	REP #$21       (16-bit A; clear Carry)
EE/7606:	A529    	LDA $29        (Rotation speed)
EE/7608:	692000  	ADC #$0020     (Move the "slider" left by 32)
EE/760B:	8529    	STA $29        (Save changes)
EE/760D:	A52B    	LDA $2B
EE/760F:	690000  	ADC #$0000     (Add one if Carry set) (ADC $00...)
EE/7612:	852B    	STA $2B        (Save changes) (BCC, INC $2B...)
EE/7614:	A90102  	LDA #$0201     (Maximum speed for left turns, plus one)
EE/7617:	C529    	CMP $29        (Compare to rotation speed)
EE/7619:	102B    	BPL $7646      (Branch if greater)
EE/761B:	A90002  	LDA #$0200     (DEC A...)
EE/761E:	8529    	STA $29        (Cap rotation speed)
EE/7620:	8024    	BRA $7646      (Skip the code for when pressing neither left nor right)
EE/7622:	C220    	REP #$20       (16-bit A)
EE/7624:	A529    	LDA $29        (Rotation speed)
EE/7626:	F01E    	BEQ $7646      (Branch if not turning)
EE/7628:	300F    	BMI $7639      (Branch if turning right)
EE/762A:	38      	SEC            (Set Carry for subtraction)
EE/762B:	E91000  	SBC #$0010     (Decrease the left-rotation speed by 16)
EE/762E:	8529    	STA $29        (Save changes)
EE/7630:	A52B    	LDA $2B
EE/7632:	E90000  	SBC #$0000     (Subtract one if Carry clear) (SBC $00...)
EE/7635:	852B    	STA $2B        (Save changes) (BRA $7644...)
EE/7637:	800D    	BRA $7646      (Skip the code for the deceleration of right turns)
EE/7639:	18      	CLC            (Clear Carry for addition)
EE/763A:	691000  	ADC #$0010     (Decrease the right-rotation speed by 16)
EE/763D:	8529    	STA $29        (Save changes)
EE/763F:	A52B    	LDA $2B
EE/7641:	690000  	ADC #$0000     (Add one if Carry set) (ADC $00...)
EE/7644:	852B    	STA $2B        (Save changes)
EE/7646:	C220    	REP #$20       (...)
EE/7648:	A560    	LDA $60        (Movement bits for vehicle script, low byte)
EE/764A:	898000  	BIT #$0080     (Accelerate?)
EE/764D:	F00F    	BEQ $765E      (Branch if not) (LDA $5F, BPL...)
EE/764F:	A526    	LDA $26        (Vehicle speed)
EE/7651:	18      	CLC            (Clear Carry for addition)
EE/7652:	694000  	ADC #$0040     (Add 64)
EE/7655:	C90108  	CMP #$0801     (Beyond the maximum speed?)
EE/7658:	1004    	BPL $765E      (Branch if so)
EE/765A:	8526    	STA $26        (Save changes)
EE/765C:	8000    	BRA $765E      (...)
EE/765E:	E220    	SEP #$20       (8-bit A)
EE/7660:	A561    	LDA $61        (Movement bits for vehicle script, high byte)
EE/7662:	8980    	BIT #$80       (Decelerate?) (BPL...
EE/7664:	F012    	BEQ $7678      (Branch if not)
EE/7666:	C220    	REP #$20       (16-bit A)
EE/7668:	A526    	LDA $26        (Vehicle speed)
EE/766A:	38      	SEC            (Set Carry for subtraction)
EE/766B:	E98000  	SBC #$0080     (Subtract 128)
EE/766E:	C90000  	CMP #$0000     (Superfluous...)
EE/7671:	1003    	BPL $7676      (Branch if the difference is positive)
EE/7673:	A90000  	LDA #$0000     (Set speed to zero) (TDC...)
EE/7676:	8526    	STA $26        (Save changes)
EE/7678:	E220    	SEP #$20       (8-bit A)
EE/767A:	A561    	LDA $61        (Movement bits for vehicle script, high byte)
EE/767C:	8908    	BIT #$08       (Move down?)
EE/767E:	F011    	BEQ $7691      (Branch if not)
EE/7680:	C220    	REP #$20       (16-bit A)
EE/7682:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/7684:	38      	SEC            (Set Carry for subtraction)
EE/7685:	E92000  	SBC #$0020     (Move the "slider" down by 32)
EE/7688:	C900FE  	CMP #$FE00     (Beyond the maximum descension speed?)
EE/768B:	3033    	BMI $76C0      (Branch if so)
EE/768D:	852D    	STA $2D        (Save changes) (BRA $76BE...)
EE/768F:	802F    	BRA $76C0      (Skip the ascension code)
EE/7691:	E220    	SEP #$20       (8-bit A)
EE/7693:	A561    	LDA $61        (Movement bits for vehicle script, high byte)
EE/7695:	8904    	BIT #$04       (Move up?)
EE/7697:	F011    	BEQ $76AA      (Branch if not)
EE/7699:	C220    	REP #$20       (16-bit A)
EE/769B:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/769D:	18      	CLC            (Clear Carry for addition)
EE/769E:	692000  	ADC #$0020     (Move the "slider" up by 32)
EE/76A1:	C90102  	CMP #$0201     (Beyond the maximum ascension speed?)
EE/76A4:	101A    	BPL $76C0      (Branch if so)
EE/76A6:	852D    	STA $2D        (Save changes) (BRA $76BE...)
EE/76A8:	8016    	BRA $76C0      (Skip the deceleration code)
EE/76AA:	C220    	REP #$20       (16-bit A)
EE/76AC:	A52D    	LDA $2D        (Speed of ascent or descent)
EE/76AE:	300A    	BMI $76BA      (Branch if descending)
EE/76B0:	38      	SEC            (Set Carry for subtraction)
EE/76B1:	E91000  	SBC #$0010     (Decrease ascension speed by 16)
EE/76B4:	900A    	BCC $76C0      (Branch if the difference is negative)
EE/76B6:	852D    	STA $2D        (Save changes) (BRA $76BE...)
EE/76B8:	8006    	BRA $76C0      (Skip next three instructions)
EE/76BA:	18      	CLC            (Clear Carry for addition)
EE/76BB:	691000  	ADC #$0010     (Decrease the descension speed by 16)
EE/76BE:	852D    	STA $2D        (Save changes)
EE/76C0:	C220    	REP #$20       (16-bit A)
EE/76C2:	A560    	LDA $60        (Movement bits for vehicle script)
EE/76C4:	292002  	AND #$0220     (Isolate the "left" and "L" bits)
EE/76C7:	C92002  	CMP #$0220     (Are both bits set?)
EE/76CA:	D011    	BNE $76DD      (Branch if not)
EE/76CC:	AD7300  	LDA $0073      (Vehicle direction)
EE/76CF:	1A      	INC A          (Rotate counterclockwise by a degree)
EE/76D0:	1A      	INC A          (Rotate counterclockwise by a degree)
EE/76D1:	C96801  	CMP #$0168     (Compare to 360)
EE/76D4:	3004    	BMI $76DA      (Branch if smaller)
EE/76D6:	38      	SEC            (Carry is already set...)
EE/76D7:	E96801  	SBC #$0168     (Subtract 360)
EE/76DA:	8D7300  	STA $0073      (Save changes)
EE/76DD:	A560    	LDA $60        (Movement bits for vehicle script)
EE/76DF:	291001  	AND #$0110     (Isolate the "right" and "R" bits)
EE/76E2:	C91001  	CMP #$0110     (Are both bits set?)
EE/76E5:	D011    	BNE $76F8      (Branch if not)
EE/76E7:	AD7300  	LDA $0073      (Vehicle direction)
EE/76EA:	3A      	DEC A          (Rotate clockwise by a degree)
EE/76EB:	3A      	DEC A          (Rotate clockwise by a degree)
EE/76EC:	C90000  	CMP #$0000     (Superfluous...)
EE/76EF:	1004    	BPL $76F5      (Branch if the difference is positive)
EE/76F1:	18      	CLC            (Clear Carry for addition)
EE/76F2:	696801  	ADC #$0168     (Add 360)
EE/76F5:	8D7300  	STA $0073      (Save changes)
EE/76F8:	E220    	SEP #$20       (8-bit A)
EE/76FA:	60      	RTS

Jump table for vehicle script
EE/76FB:	A870
EE/76FD:	A870
EE/77FF:	A870		(02, decrease speed by 128)
EE/7701:	A870
EE/7703:	A870		(04, increase speed by 64)
EE/7705:	A870
EE/7707:	A870
EE/7709:	A870
EE/770B:	A870		(08, turn right)
EE/770D:	A870		(09, turn right, double speed of turns)
EE/770F:	A870
EE/7711:	A870		(0B, turn right, double speed of turns, decrease speed by 128)
EE/7713:	A870		(0C, turn right, increase speed by 64)
EE/7715:	A870
EE/7717:	A870
EE/7719:	A870
EE/771B:	A870		(10, turn left)
EE/771D:	A870		(11, turn left, double speed of turns)
EE/771F:	A870		(12, turn left, decrease speed by 128)
EE/7721:	A870		(13, turn left, double speed of turns, decrease speed by 128)
EE/7723:	A870		(14, turn left, increase speed by 64) (Unused)
EE/7725:	A870		(15, turn left, double speed of turns, increase speed by 64) (Unused)
EE/7727:	A870
EE/7729:	A870
EE/772B:	A870
EE/772D:	A870
EE/772F:	A870
EE/7731:	A870
EE/7733:	A870
EE/7735:	A870
EE/7737:	A870
EE/7739:	A870
EE/773B:	A870		(20, ascend)
EE/773D:	A870
EE/773F:	A870
EE/7741:	A870
EE/7743:	A870		(24, ascend, increase speed by 64)
EE/7745:	A870
EE/7747:	A870
EE/7749:	A870
EE/774B:	A870		(28, ascend, turn right)
EE/774D:	A870		(29, ascend, turn right, double speed of turns)
EE/774F:	A870
EE/7751:	A870
EE/7753:	A870		(2C, ascend, turn right, increase speed by 64)
EE/7755:	A870
EE/7757:	A870
EE/7759:	A870
EE/775B:	A870		(30, ascend, turn left)
EE/775D:	A870		(31, ascend, turn left, double speed of turns) (Unused)
EE/775F:	A870		(32, ascend, turn left, decrease speed by 128)
EE/7761:	A870
EE/7763:	A870		(34, ascend, turn left, increase speed by 64)
EE/7765:	A870
EE/7767:	A870
EE/7769:	A870
EE/776B:	A870
EE/776D:	A870
EE/776F:	A870
EE/7771:	A870
EE/7773:	A870
EE/7775:	A870
EE/7777:	A870
EE/7779:	A870
EE/777B:	A870		(40, descend)
EE/777D:	A870
EE/777F:	A870		(42, descend, decrease speed by 128)
EE/7781:	A870
EE/7783:	A870		(44, descend, increase speed by 64)
EE/7785:	A870
EE/7787:	A870
EE/7789:	A870
EE/778B:	A870		(48, descend, turn right)
EE/778D:	A870		(49, descend, turn right, double speed of turns)
EE/778F:	A870		(4A, descend, turn right, decrease speed by 128)
EE/7791:	A870
EE/7793:	A870		(4C, descend, turn right, increase speed by 64)
EE/7795:	A870
EE/7797:	A870
EE/7799:	A870
EE/779B:	A870		(50, descend, turn left)
EE/779D:	A870		(51, descend, turn left, double speed of turns)
EE/779F:	A870		(52, descend, turn left, decrease speed by 128) (Unused)
EE/77A1:	A870		(53, descend, turn left, decrease speed by 128)
EE/77A3:	A870		(54, descend, turn left, increase speed by 64)
EE/77A5:	A870
EE/77A7:	A870
EE/77A9:	A870
EE/77AB:	A870
EE/77AD:	A870
EE/77AF:	A870
EE/77B1:	A870
EE/77B3:	A870
EE/77B5:	A870
EE/77B7:	A870
EE/77B9:	A870
EE/77BB:	A870
EE/77BD:	A870
EE/77BF:	A870
EE/77C1:	A870
EE/77C3:	A870
EE/77C5:	A870
EE/77C7:	A870
EE/77C9:	A870
EE/77CB:	A870
EE/77CD:	A870
EE/77CF:	A870
EE/77D1:	A870
EE/77D3:	A870
EE/77D5:	A870
EE/77D7:	A870
EE/77D9:	A870
EE/77DB:	A870
EE/77DD:	A870
EE/77DF:	A870
EE/77E1:	A870
EE/77E3:	A870
EE/77E5:	A870
EE/77E7:	A870
EE/77E9:	A870
EE/77EB:	A870
EE/77ED:	A870
EE/77EF:	A870
EE/77F1:	A870
EE/77F3:	A870
EE/77F5:	A870
EE/77F7:	A870
EE/77F9:	A870
EE/77FB:	0771
EE/77FD:	0771
EE/77FF:	0771
EE/7801:	0771
EE/7803:	0771
EE/7805:	0771
EE/7807:	0771
EE/7809:	0771
EE/780B:	0771
EE/780D:	0771
EE/780F:	0771
EE/7811:	0771
EE/7813:	0771
EE/7815:	0771
EE/7817:	0771
EE/7819:	0771
EE/781B:	0771
EE/781D:	0771
EE/781F:	0771
EE/7821:	0771
EE/7823:	0771
EE/7825:	0771
EE/7827:	0771
EE/7829:	0771
EE/782B:	0771
EE/782D:	0771
EE/782F:	0771
EE/7831:	0771
EE/7833:	0771
EE/7835:	0771
EE/7837:	0771
EE/7839:	0771
EE/783B:	0771
EE/783D:	0771
EE/783F:	0771
EE/7841:	0771
EE/7843:	0771
EE/7845:	0771
EE/7847:	0771
EE/7849:	0771
EE/784B:	0771
EE/784D:	0771
EE/784F:	0771
EE/7851:	0771
EE/7853:	0771
EE/7855:	0771
EE/7857:	0771
EE/7859:	0771
EE/785B:	0771		(B0, branch if any of the selected event bits are set/clear)
EE/785D:	0771
EE/785F:	0771
EE/7861:	0771
EE/7863:	0771
EE/7865:	0771
EE/7867:	0771
EE/7869:	0771
EE/786B:	8171		(B8, branch if all of the selected event bits are set/clear)
EE/786D:	8171
EE/786F:	8171
EE/7871:	8171
EE/7873:	8171
EE/7875:	8171
EE/7877:	8171
EE/7879:	8171
EE/787B:	FB71		(C0, modify vehicle behavior)
EE/787D:	0972		(C1, set vehicle's direction)
EE/787F:	1C72		(C2, set vehicle's propulsion direction)
EE/7881:	2F72		(C3, rotate the sky) (Unused)
EE/7883:	4272		(C4) (Unused; affects the Mode 7 BG)
EE/7885:	5572		(C5, set vehicle height to X)
EE/7887:	6872		(C6, propel vehicle at speed X)
EE/7889:	7B72		(C7, relocate the airship)
EE/788B:	9272		(C8, set event bit)
EE/788D:	BB72		(C9, clear event bit)
EE/788F:	EA72		(CA, invoke battle)
EE/7891:	EA72		(CB, invoke battle)
EE/7893:	EA72		(CC, invoke battle)
EE/7895:	EA72		(CD, invoke battle)
EE/7897:	EA72		(CE, invoke battle)
EE/7899:	EA72		(CF, invoke battle)
EE/789B:	2F73		(D0, show vehicle)
EE/789D:	3A73		(D1, hide vehicle)
EE/789F:	4573		(D2, load map)
EE/78A1:	A273		(D3, load map, automatically enable mode $40)
EE/78A3:	0274		(D4, unfade screen)
EE/78A5:	0274		(D5, unfade screen)
EE/78A7:	0274		(D6, unfade screen)
EE/78A9:	0274		(D7, unfade screen)
EE/78AB:	0274		(D8, unfade screen)
EE/78AD:	0B74		(D9, fade screen)
EE/78AF:	1274		(DA, show flashing arrows)
EE/78B1:	2374		(DB, lock in arrow choice)
EE/78B3:	2E74		(DC, hide flashing arrows)
EE/78B5:	3974		(DD, hide minimap)
EE/78B7:	4E74		(DE, change Mode 7 BG horizontal scroll) (Unused)
EE/78B9:	6174		(DF, show minimap)
EE/78BB:	7374		(E0, pause for X)
EE/78BD:	A474
EE/78BF:	A474
EE/78C1:	A474
EE/78C3:	A474
EE/78C5:	A474
EE/78C7:	A474
EE/78C9:	A474
EE/78CB:	A474
EE/78CD:	A474
EE/78CF:	A474
EE/78D1:	A474
EE/78D3:	A474
EE/78D5:	A474
EE/78D7:	A474
EE/78D9:	A474
EE/78DB:	A474
EE/78DD:	A474
EE/78DF:	A474		(F2) (Unused)
EE/78E1:	B074		(F3, show part of world getting zapped, direct laser beam westward)
EE/78E3:	C474		(F4, change graphic to Falcon)
EE/78E5:	3D75		(F5, show part of world getting zapped, direct laser beam eastward)
EE/78E7:	5175		(F6) (Unused)
EE/78E9:	5D75		(F7, change character graphic to pigeon)
EE/78EB:	6875		(F8, show part of world getting blown up)
EE/78ED:	7475		(F9) show part of world getting zapped, produce explosions) (Unused; freezes the game)
EE/78EF:	8075		(FA, show airship emerging from the ocean)
EE/78F1:	8C75		(FB, show airship smoking)
EE/78F3:	9B75		(FC, show airship crashing)
EE/78F5:	AF75		(FD, change graphic to Esper Terra)
EE/78F7:	BA75		(FE, show scene with airship heading to Vector)
EE/78F9:	C875		(FF, end vehicle script)

Map script routine
EE/78FB:	08      	PHP
EE/78FC:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/78FF:	86E3    	STX $E3
EE/7901:	86E5    	STX $E5
EE/7903:	A5E7    	LDA $E7
EE/7905:	8904    	BIT #$04       (Reiterate the previous command?)
EE/7907:	F004    	BEQ $790D      (Branch if not)
EE/7909:	A5F0    	LDA $F0        (Map command)
EE/790B:	8009    	BRA $7916      (Execute it again)
EE/790D:	A4ED    	LDY $ED        (Event queue)
EE/790F:	B7EA    	LDA [$EA],Y    (Load map command from event script)
EE/7911:	85F0    	STA $F0        (Save as current map command)
EE/7913:	C8      	INY
EE/7914:	84ED    	STY $ED        (Advance event queue by a byte)
EE/7916:	C220    	REP #$20       (16-bit A)
EE/7918:	29FF00  	AND #$00FF     (Zero the high byte)
EE/791B:	0A      	ASL A          (Multiply by 2)
EE/791C:	AA      	TAX            (Transfer A to X)
EE/791D:	7C8981  	JMP ($8189,X)  (Execute the map script command)

Most map script commands jump here when they finish; this is a mere waste of space
EE/7920:	28      	PLP
EE/7921:	60      	RTS

Map script commands 00-7F, change pose of map character
EE/7922:	E220    	SEP #$20       (8-bit A)
EE/7924:	A5F0    	LDA $F0        (Map command)
EE/7926:	85F7    	STA $F7        (Save as pose number of map character)
EE/7928:	E210    	SEP #$10       (8-bit indexes)
EE/792A:	20F347  	JSR $47F3
EE/792D:	C210    	REP #$10       (16-bit indexes)
EE/792F:	4C0D79  	JMP $790D      (Jump back to map script routine) (BRA...)

Map script commands 80-9F, move X tiles in the selected direction
EE/7932:	E220    	SEP #$20       (8-bit A)
EE/7934:	A5EF    	LDA $EF
EE/7936:	D00F    	BNE $7947
EE/7938:	A5F0    	LDA $F0        (Command number)
EE/793A:	4A      	LSR A          (Divide by 2)
EE/793B:	4A      	LSR A          (Divide by 4)
EE/793C:	2907    	AND #$07       (Number of tiles, minus one)
EE/793E:	1A      	INC A          (Add one)
EE/793F:	85EF    	STA $EF
EE/7941:	A5E7    	LDA $E7
EE/7943:	0904    	ORA #$04       (Set the command to be executed again)
EE/7945:	85E7    	STA $E7        (Save changes) (LDA #$04, TSB $E7...)
EE/7947:	A5F0    	LDA $F0        (Map command)
EE/7949:	2903    	AND #$03       (Isolate the direction)
EE/794B:	F01E    	BEQ $796B      (Branch if it's up)
EE/794D:	C903    	CMP #$03
EE/794F:	F035    	BEQ $7986      (Branch if it's left)
EE/7951:	C901    	CMP #$01
EE/7953:	F04C    	BEQ $79A1      (Branch if it's right, otherwise it's down)
EE/7955:	A5F3    	LDA $F3        (Event speed of map character)
EE/7957:	85E5    	STA $E5
EE/7959:	64E6    	STZ $E6
EE/795B:	64E3    	STZ $E3
EE/795D:	64E4    	STZ $E4
EE/795F:	A902    	LDA #$02
EE/7961:	85F6    	STA $F6        (Face down)
EE/7963:	A20000  	LDX #$0000     (X position unchanged) (LDX $00, TXY, INY...)
EE/7966:	A00100  	LDY #$0001     (Y position + 1)
EE/7969:	804A    	BRA $79B5      (Skip the code for other directions)
EE/796B:	A5F3    	LDA $F3        (Event speed of map character)
EE/796D:	49FF    	EOR #$FF       (Toggle all bits)
EE/796F:	1A      	INC A          (Add one)
EE/7970:	85E5    	STA $E5
EE/7972:	A9FF    	LDA #$FF
EE/7974:	85E6    	STA $E6
EE/7976:	64E3    	STZ $E3
EE/7978:	64E4    	STZ $E4
EE/797A:	A900    	LDA #$00
EE/797C:	85F6    	STA $F6        (Face up) (STZ...)
EE/797E:	A20000  	LDX #$0000     (X position unchanged) (LDX $00, TXY, DEY...)
EE/7981:	A0FFFF  	LDY #$FFFF     (Y position - 1)
EE/7984:	802F    	BRA $79B5      (Skip the code for other directions)
EE/7986:	A5F3    	LDA $F3        (Event speed of map character)
EE/7988:	49FF    	EOR #$FF       (Toggle all bits)
EE/798A:	1A      	INC A          (Add one)
EE/798B:	85E3    	STA $E3
EE/798D:	A9FF    	LDA #$FF
EE/798F:	85E4    	STA $E4
EE/7991:	64E5    	STZ $E5
EE/7993:	64E6    	STZ $E6
EE/7995:	A903    	LDA #$03
EE/7997:	85F6    	STA $F6        (Face left)
EE/7999:	A2FFFF  	LDX #$FFFF     (X position - 1) (LDY $00, TYX, DEX...)
EE/799C:	A00000  	LDY #$0000     (Y position unchanged)
EE/799F:	8014    	BRA $79B5      (Skip the code for the right direction)
EE/79A1:	A5F3    	LDA $F3        (Event speed of map character)
EE/79A3:	85E3    	STA $E3
EE/79A5:	64E4    	STZ $E4
EE/79A7:	64E5    	STZ $E5
EE/79A9:	64E6    	STZ $E6
EE/79AB:	A901    	LDA #$01
EE/79AD:	85F6    	STA $F6        (Face right)
EE/79AF:	A20100  	LDX #$0001     (X position + 1) (LDY $00, TYX, INX...)
EE/79B2:	A00000  	LDY #$0000     (Y position unchanged)
EE/79B5:	C220    	REP #$20       (16-bit A)
EE/79B7:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/79BA:	892000  	BIT #$0020     (Forest tile?)
EE/79BD:	D007    	BNE $79C6      (Branch if so)
EE/79BF:	A5E7    	LDA $E7
EE/79C1:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/79C4:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/79C6:	E220    	SEP #$20       (8-bit A)
EE/79C8:	C6EF    	DEC $EF        (Decrease the number of tiles by one)
EE/79CA:	D006    	BNE $79D2      (Exit if the character must continue to walk)
EE/79CC:	A5E7    	LDA $E7
EE/79CE:	29FB    	AND #$FB       (Disable reiteration of command)
EE/79D0:	85E7    	STA $E7        (Save changes) (LDA #$04, TRB $E7...)
EE/79D2:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command A0, move right x1, up x1
EE/79D5:	E220    	SEP #$20       (8-bit A)
EE/79D7:	A5F3    	LDA $F3        (Event speed of map character)
EE/79D9:	85E3    	STA $E3
EE/79DB:	64E4    	STZ $E4
EE/79DD:	49FF    	EOR #$FF       (Toggle all bits)
EE/79DF:	1A      	INC A          (Add one)
EE/79E0:	85E5    	STA $E5
EE/79E2:	A9FF    	LDA #$FF
EE/79E4:	85E6    	STA $E6
EE/79E6:	A900    	LDA #$00
EE/79E8:	85F6    	STA $F6        (Face up) (STZ...)
EE/79EA:	C220    	REP #$20       (16-bit A)
EE/79EC:	A20100  	LDX #$0001     (X position + 1) (LDX $00, TXY, INX, DEY...)
EE/79EF:	A0FFFF  	LDY #$FFFF     (Y position - 1)
EE/79F2:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/79F5:	892000  	BIT #$0020     (Forest tile?)
EE/79F8:	D007    	BNE $7A01      (Exit if so)
EE/79FA:	A5E7    	LDA $E7
EE/79FC:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/79FF:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7A01:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command A1, move right x1, down x1
EE/7A04:	E220    	SEP #$20       (8-bit A)
EE/7A06:	A5F3    	LDA $F3        (Event speed of map character)
EE/7A08:	85E3    	STA $E3
EE/7A0A:	64E4    	STZ $E4
EE/7A0C:	85E5    	STA $E5
EE/7A0E:	64E6    	STZ $E6
EE/7A10:	A902    	LDA #$02
EE/7A12:	85F6    	STA $F6        (Face down)
EE/7A14:	C220    	REP #$20       (16-bit A)
EE/7A16:	A20100  	LDX #$0001     (X position + 1)
EE/7A19:	A00100  	LDY #$0001     (Y position + 1) (TXY...)
EE/7A1C:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7A1F:	892000  	BIT #$0020     (Forest tile?)
EE/7A22:	D007    	BNE $7A2B      (Exit if so)
EE/7A24:	A5E7    	LDA $E7
EE/7A26:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7A29:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7A2B:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command A2, move left x1, down x1
EE/7A2E:	E220    	SEP #$20       (8-bit A)
EE/7A30:	A5F3    	LDA $F3        (Event speed of map character)
EE/7A32:	85E5    	STA $E5
EE/7A34:	64E6    	STZ $E6
EE/7A36:	49FF    	EOR #$FF       (Toggle all bits)
EE/7A38:	1A      	INC A          (Add one)
EE/7A39:	85E3    	STA $E3
EE/7A3B:	A9FF    	LDA #$FF
EE/7A3D:	85E4    	STA $E4
EE/7A3F:	A902    	LDA #$02
EE/7A41:	85F6    	STA $F6        (Face down)
EE/7A43:	C220    	REP #$20       (16-bit A)
EE/7A45:	A2FFFF  	LDX #$FFFF     (X position - 1) (LDX $00, TXY, DEX, INY...)
EE/7A48:	A00100  	LDY #$0001     (Y position + 1)
EE/7A4B:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7A4E:	892000  	BIT #$0020     (Forest tile?)
EE/7A51:	D007    	BNE $7A5A      (Exit if so)
EE/7A53:	A5E7    	LDA $E7
EE/7A55:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7A58:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7A5A:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command A3, move left x1, up x1
EE/7A5D:	E220    	SEP #$20       (8-bit A)
EE/7A5F:	A5F3    	LDA $F3        (Event speed of map character)
EE/7A61:	49FF    	EOR #$FF       (Toggle all bits)
EE/7A63:	1A      	INC A          (Add one)
EE/7A64:	85E3    	STA $E3
EE/7A66:	85E5    	STA $E5
EE/7A68:	A9FF    	LDA #$FF
EE/7A6A:	85E4    	STA $E4
EE/7A6C:	85E6    	STA $E6
EE/7A6E:	A900    	LDA #$00
EE/7A70:	85F6    	STA $F6        (Face up) (STZ...)
EE/7A72:	C220    	REP #$20       (16-bit A)
EE/7A74:	A2FFFF  	LDX #$FFFF     (X position - 1)
EE/7A77:	A0FFFF  	LDY #$FFFF     (Y position - 1) (TXY...)
EE/7A7A:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7A7D:	892000  	BIT #$0020     (Forest tile?)
EE/7A80:	D007    	BNE $7A89      (Exit if so)
EE/7A82:	A5E7    	LDA $E7
EE/7A84:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7A87:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7A89:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command A4, move right x1, up x2
EE/7A8C:	E220    	SEP #$20       (8-bit A)
EE/7A8E:	A5F3    	LDA $F3        (Event speed of map character)
EE/7A90:	85E3    	STA $E3
EE/7A92:	64E4    	STZ $E4
EE/7A94:	0A      	ASL A          (Multiply by 2)
EE/7A95:	49FF    	EOR #$FF       (Toggle all bits)
EE/7A97:	1A      	INC A          (Add one)
EE/7A98:	85E5    	STA $E5
EE/7A9A:	A9FF    	LDA #$FF
EE/7A9C:	85E6    	STA $E6
EE/7A9E:	A900    	LDA #$00
EE/7AA0:	85F6    	STA $F6        (Face up) (STZ...)
EE/7AA2:	C220    	REP #$20       (16-bit A)
EE/7AA4:	A20100  	LDX #$0001     (X position + 1)
EE/7AA7:	A0FEFF  	LDY #$FFFE     (Y position - 2)
EE/7AAA:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7AAD:	892000  	BIT #$0020     (Forest tile?)
EE/7AB0:	D007    	BNE $7AB9      (Exit if so)
EE/7AB2:	A5E7    	LDA $E7
EE/7AB4:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7AB7:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7AB9:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command A5, move right x2, up x1
EE/7ABC:	E220    	SEP #$20       (8-bit A)
EE/7ABE:	A5F3    	LDA $F3        (Event speed of map character)
EE/7AC0:	0A      	ASL A          (Multiply by 2)
EE/7AC1:	85E3    	STA $E3
EE/7AC3:	64E4    	STZ $E4
EE/7AC5:	A5F3    	LDA $F3        (Event speed of map character)
EE/7AC7:	49FF    	EOR #$FF       (Toggle all bits)
EE/7AC9:	1A      	INC A          (Add one)
EE/7ACA:	85E5    	STA $E5
EE/7ACC:	A9FF    	LDA #$FF
EE/7ACE:	85E6    	STA $E6
EE/7AD0:	A901    	LDA #$01
EE/7AD2:	85F6    	STA $F6        (Face right)
EE/7AD4:	C220    	REP #$20       (16-bit A)
EE/7AD6:	A20200  	LDX #$0002     (X position + 2)
EE/7AD9:	A0FFFF  	LDY #$FFFF     (Y position - 1)
EE/7ADC:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7ADF:	892000  	BIT #$0020     (Forest tile?)
EE/7AE2:	D007    	BNE $7AEB      (Exit if so)
EE/7AE4:	A5E7    	LDA $E7
EE/7AE6:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7AE9:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7AEB:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command A6, move right x2, down x1
EE/7AEE:	E220    	SEP #$20       (8-bit A)
EE/7AF0:	A5F3    	LDA $F3        (Event speed of map character)
EE/7AF2:	85E5    	STA $E5
EE/7AF4:	64E6    	STZ $E6
EE/7AF6:	0A      	ASL A          (Multiply by 2)
EE/7AF7:	85E3    	STA $E3
EE/7AF9:	64E4    	STZ $E4
EE/7AFB:	A901    	LDA #$01
EE/7AFD:	85F6    	STA $F6        (Face right)
EE/7AFF:	C220    	REP #$20       (16-bit A)
EE/7B01:	A20200  	LDX #$0002     (X position + 2)
EE/7B04:	A00100  	LDY #$0001     (Y position + 1) (TXY, DEY...)
EE/7B07:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7B0A:	892000  	BIT #$0020     (Forest tile?)
EE/7B0D:	D007    	BNE $7B16      (Exit if so)
EE/7B0F:	A5E7    	LDA $E7
EE/7B11:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7B14:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7B16:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command A7, move right x1, down x2
EE/7B19:	E220    	SEP #$20       (8-bit A)
EE/7B1B:	A5F3    	LDA $F3        (Event speed of map character)
EE/7B1D:	85E3    	STA $E3
EE/7B1F:	64E4    	STZ $E4
EE/7B21:	0A      	ASL A          (Multiply by 2)
EE/7B22:	85E5    	STA $E5
EE/7B24:	64E6    	STZ $E6
EE/7B26:	A902    	LDA #$02
EE/7B28:	85F6    	STA $F6        (Face down)
EE/7B2A:	C220    	REP #$20       (16-bit A)
EE/7B2C:	A20100  	LDX #$0001     (X position + 1)
EE/7B2F:	A00200  	LDY #$0002     (Y position + 2) (TXY, INY...)
EE/7B32:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7B35:	892000  	BIT #$0020     (Forest tile?)
EE/7B38:	D007    	BNE $7B41      (Exit if so)
EE/7B3A:	A5E7    	LDA $E7
EE/7B3C:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7B3F:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7B41:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command A8, move left x1, down x2
EE/7B44:	E220    	SEP #$20       (8-bit A)
EE/7B46:	A5F3    	LDA $F3        (Event speed of map character)
EE/7B48:	0A      	ASL A          (Multiply by 2)
EE/7B49:	85E5    	STA $E5
EE/7B4B:	64E6    	STZ $E6
EE/7B4D:	A5F3    	LDA $F3        (Event speed of map character)
EE/7B4F:	49FF    	EOR #$FF       (Toggle all bits)
EE/7B51:	1A      	INC A          (Add one)
EE/7B52:	85E3    	STA $E3
EE/7B54:	A9FF    	LDA #$FF
EE/7B56:	85E4    	STA $E4
EE/7B58:	A902    	LDA #$02
EE/7B5A:	85F6    	STA $F6        (Face down)
EE/7B5C:	C220    	REP #$20       (16-bit A)
EE/7B5E:	A2FFFF  	LDX #$FFFF     (X position - 1)
EE/7B61:	A00200  	LDY #$0002     (Y position + 2)
EE/7B64:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7B67:	892000  	BIT #$0020     (Forest tile?)
EE/7B6A:	D007    	BNE $7B73      (Exit if so)
EE/7B6C:	A5E7    	LDA $E7
EE/7B6E:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7B71:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7B73:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command A9, move left x2, down x1
EE/7B76:	E220    	SEP #$20       (8-bit A)
EE/7B78:	A5F3    	LDA $F3        (Event speed of map character)
EE/7B7A:	85E5    	STA $E5
EE/7B7C:	64E6    	STZ $E6
EE/7B7E:	0A      	ASL A          (Multiply by 2)
EE/7B7F:	49FF    	EOR #$FF       (Toggle all bits)
EE/7B81:	1A      	INC A          (Add one)
EE/7B82:	85E3    	STA $E3
EE/7B84:	A9FF    	LDA #$FF
EE/7B86:	85E4    	STA $E4
EE/7B88:	A903    	LDA #$03
EE/7B8A:	85F6    	STA $F6        (Face left)
EE/7B8C:	C220    	REP #$20       (16-bit A)
EE/7B8E:	A2FEFF  	LDX #$FFFE     (X position - 2)
EE/7B91:	A00100  	LDY #$0001     (Y position + 1)
EE/7B94:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7B97:	892000  	BIT #$0020     (Forest tile?)
EE/7B9A:	D007    	BNE $7BA3      (Exit if so)
EE/7B9C:	A5E7    	LDA $E7
EE/7B9E:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7BA1:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7BA3:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command AA, move left x2, up x1
EE/7BA6:	E220    	SEP #$20       (8-bit A)
EE/7BA8:	A5F3    	LDA $F3        (Event speed of map character)
EE/7BAA:	49FF    	EOR #$FF       (Toggle all bits)
EE/7BAC:	1A      	INC A          (Add one)
EE/7BAD:	85E5    	STA $E5
EE/7BAF:	0A      	ASL A          (Multiply by 2)
EE/7BB0:	85E3    	STA $E3
EE/7BB2:	A9FF    	LDA #$FF
EE/7BB4:	85E4    	STA $E4
EE/7BB6:	85E6    	STA $E6
EE/7BB8:	A903    	LDA #$03
EE/7BBA:	85F6    	STA $F6        (Face left)
EE/7BBC:	C220    	REP #$20       (16-bit A)
EE/7BBE:	A2FEFF  	LDX #$FFFE     (X position - 2)
EE/7BC1:	A0FFFF  	LDY #$FFFF     (Y position - 1) (TXY, INY...)
EE/7BC4:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7BC7:	892000  	BIT #$0020     (Forest tile?)
EE/7BCA:	D007    	BNE $7BD3      (Exit if so)
EE/7BCC:	A5E7    	LDA $E7
EE/7BCE:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7BD1:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7BD3:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command AB, move left x1, up x2
EE/7BD6:	E220    	SEP #$20       (8-bit A)
EE/7BD8:	A5F3    	LDA $F3        (Event speed of map character)
EE/7BDA:	49FF    	EOR #$FF       (Toggle all bits)
EE/7BDC:	1A      	INC A          (Add one)
EE/7BDD:	85E3    	STA $E3
EE/7BDF:	0A      	ASL A          (Multiply by 2)
EE/7BE0:	85E5    	STA $E5
EE/7BE2:	A9FF    	LDA #$FF
EE/7BE4:	85E4    	STA $E4
EE/7BE6:	85E6    	STA $E6
EE/7BE8:	A900    	LDA #$00
EE/7BEA:	85F6    	STA $F6        (Face up) (STZ...)
EE/7BEC:	C220    	REP #$20       (16-bit A)
EE/7BEE:	A2FFFF  	LDX #$FFFF     (X position - 1)
EE/7BF1:	A0FEFF  	LDY #$FFFE     (Y position - 2) (TXY, DEY...)
EE/7BF4:	20D721  	JSR $21D7      (Properties of tile occupied or claimed by character)
EE/7BF7:	892000  	BIT #$0020     (Forest tile?)
EE/7BFA:	D007    	BNE $7C03      (Exit if so)
EE/7BFC:	A5E7    	LDA $E7
EE/7BFE:	29EFFF  	AND #$FFEF     (Clear bit that makes half of map character transparent)
EE/7C01:	85E7    	STA $E7        (Save changes) (LDA #$0010, TRB $E7...)
EE/7C03:	4C2079  	JMP $7920      (PLP, RTS...)

Map script commands AC-B7, branch if any of the selected event bits is set/clear
EE/7C06:	E220    	SEP #$20       (8-bit A)
EE/7C08:	A5F0    	LDA $F0        (Map command)
EE/7C0A:	2907    	AND #$07       (Isolate the number of conditions, minus one)
EE/7C0C:	1A      	INC A          (Add one)
EE/7C0D:	8558    	STA $58        (Save it temporarily)
EE/7C0F:	A4ED    	LDY $ED        (Event queue)
EE/7C11:	C220    	REP #$20       (16-bit A)
EE/7C13:	A5F0    	LDA $F0        (Map command)
EE/7C15:	290700  	AND #$0007     (Isolate the number of conditions, minus one)
EE/7C18:	1A      	INC A          (Add one)
EE/7C19:	0A      	ASL A          (Multiply by 2)
EE/7C1A:	18      	CLC            (Clear Carry for addition)
EE/7C1B:	65ED    	ADC $ED
EE/7C1D:	85ED    	STA $ED        (Advance event queue by two bytes for each tested bit)
EE/7C1F:	C220    	REP #$20       (16-bit A)
EE/7C21:	B7EA    	LDA [$EA],Y    (Load a bit parameter)
EE/7C23:	C8      	INY
EE/7C24:	C8      	INY
EE/7C25:	855A    	STA $5A        (Save it temporarily)
EE/7C27:	290700  	AND #$0007     (Isolate 0-7 bit number)
EE/7C2A:	AA      	TAX            (Transfer A to X)
EE/7C2B:	BFFA7CEE	LDA $EE7CFA,X  (Bitfield)
EE/7C2F:	855C    	STA $5C        (Save it temporarily)
EE/7C31:	A55A    	LDA $5A        (Temporarily saved bit parameter, including a flag)
EE/7C33:	29FF7F  	AND #$7FFF     (Isolate the bit number)
EE/7C36:	4A      	LSR A          (Divide by 2)
EE/7C37:	4A      	LSR A          (Divide by 4)
EE/7C38:	4A      	LSR A          (Divide by 8)
EE/7C39:	AA      	TAX            (Transfer A to X)
EE/7C3A:	E220    	SEP #$20       (8-bit A)
EE/7C3C:	A55B    	LDA $5B        (Temporarily saved bit parameter, high byte)
EE/7C3E:	3009    	BMI $7C49      (Branch if condition requires bit to be set)
EE/7C40:	BD801E  	LDA $1E80,X    (Event bits)
EE/7C43:	255C    	AND $5C        (Isolate the selected bit)
EE/7C45:	F017    	BEQ $7C5E      (Branch if clear)
EE/7C47:	8007    	BRA $7C50      (Skip next three instructions)
EE/7C49:	BD801E  	LDA $1E80,X    (Event bits)
EE/7C4C:	255C    	AND $5C        (Isolate the selected bit)
EE/7C4E:	D00E    	BNE $7C5E      (Branch if set)
EE/7C50:	C658    	DEC $58        (One less bit to test)
EE/7C52:	D0CB    	BNE $7C1F      (Loop if more remain)
EE/7C54:	A4ED    	LDY $ED        (Event queue)
EE/7C56:	C8      	INY
EE/7C57:	C8      	INY
EE/7C58:	C8      	INY
EE/7C59:	84ED    	STY $ED        (Advance event queue by three bytes)
EE/7C5B:	4C0D79  	JMP $790D      (Jump back to map script routine) (BRA $7C7D...)
EE/7C5E:	A4ED    	LDY $ED        (Event queue)
EE/7C60:	B7EA    	LDA [$EA],Y    (Address parameter, low byte)
EE/7C62:	18      	CLC            (...)
EE/7C63:	6900    	ADC #$00       (...)
EE/7C65:	856A    	STA $6A        (Save temporarily...)
EE/7C67:	C8      	INY            (Point to next parameter)
EE/7C68:	B7EA    	LDA [$EA],Y    (Address parameter, middle byte)
EE/7C6A:	6900    	ADC #$00       (...)
EE/7C6C:	856B    	STA $6B        (Save temporarily...)
EE/7C6E:	C8      	INY            (Point to next parameter)
EE/7C6F:	B7EA    	LDA [$EA],Y    (Address parameter, high byte)
EE/7C71:	69CA    	ADC #$CA       (Add base bank)
EE/7C73:	85EC    	STA $EC        (Set event address, high byte)
EE/7C75:	A46A    	LDY $6A        (Temporarily saved address)
EE/7C77:	84EA    	STY $EA        (Set event address, bottom two bytes)
EE/7C79:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/7C7B:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/7C7D:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script commands B8-BF, branch if all of the selected event bits are set/clear
EE/7C80:	E220    	SEP #$20       (8-bit A)
EE/7C82:	A5F0    	LDA $F0        (Map command)
EE/7C84:	2907    	AND #$07       (Isolate the number of conditions, minus one)
EE/7C86:	1A      	INC A          (Add one)
EE/7C87:	8558    	STA $58        (Save it temporarily)
EE/7C89:	A4ED    	LDY $ED        (Event queue)
EE/7C8B:	C220    	REP #$20       (16-bit A)
EE/7C8D:	A5F0    	LDA $F0        (Map command)
EE/7C8F:	290700  	AND #$0007     (Isolate the number of conditions, minus one)
EE/7C92:	1A      	INC A          (Add one)
EE/7C93:	0A      	ASL A          (Multiply by 2)
EE/7C94:	18      	CLC            (Clear Carry for addition)
EE/7C95:	65ED    	ADC $ED
EE/7C97:	85ED    	STA $ED        (Advance event queue by two bytes for each tested bit)
EE/7C99:	C220    	REP #$20       (16-bit A)
EE/7C9B:	B7EA    	LDA [$EA],Y    (Load a bit parameter)
EE/7C9D:	C8      	INY
EE/7C9E:	C8      	INY
EE/7C9F:	855A    	STA $5A        (Save it temporarily)
EE/7CA1:	290700  	AND #$0007     (Isolate 0-7 bit number)
EE/7CA4:	AA      	TAX            (Transfer A to X)
EE/7CA5:	BFFA7CEE	LDA $EE7CFA,X  (Bitfield)
EE/7CA9:	855C    	STA $5C        (Save it temporarily)
EE/7CAB:	A55A    	LDA $5A        (Temporarily saved bit parameter, including a flag)
EE/7CAD:	29FF7F  	AND #$7FFF     (Isolate the bit number)
EE/7CB0:	4A      	LSR A          (Divide by 2)
EE/7CB1:	4A      	LSR A          (Divide by 4)
EE/7CB2:	4A      	LSR A          (Divide by 8)
EE/7CB3:	AA      	TAX            (Transfer A to X)
EE/7CB4:	E220    	SEP #$20       (8-bit A)
EE/7CB6:	A55B    	LDA $5B        (Temporarily saved bit parameter, high byte)
EE/7CB8:	3009    	BMI $7CC3      (Branch if condition requires bit to be set)
EE/7CBA:	BD801E  	LDA $1E80,X    (Event bits)
EE/7CBD:	255C    	AND $5C        (Isolate the selected bit)
EE/7CBF:	D02F    	BNE $7CF0      (Branch if set)
EE/7CC1:	8007    	BRA $7CCA      (Skip next three instructions)
EE/7CC3:	BD801E  	LDA $1E80,X    (Event bits)
EE/7CC6:	255C    	AND $5C        (Isolate the selected bit)
EE/7CC8:	F026    	BEQ $7CF0      (Branch if clear)
EE/7CCA:	C658    	DEC $58        (One less bit to test)
EE/7CCC:	D0CB    	BNE $7C99      (Loop if more remain)
EE/7CCE:	A4ED    	LDY $ED        (Event queue)
EE/7CD0:	B7EA    	LDA [$EA],Y    (Address parameter, low byte)
EE/7CD2:	18      	CLC            (...)
EE/7CD3:	6900    	ADC #$00       (...)
EE/7CD5:	856A    	STA $6A        (Save temporarily...)
EE/7CD7:	C8      	INY            (Point to next parameter)
EE/7CD8:	B7EA    	LDA [$EA],Y    (Address parameter, middle byte)
EE/7CDA:	6900    	ADC #$00       (...)
EE/7CDC:	856B    	STA $6B        (Save temporarily...)
EE/7CDE:	C8      	INY            (Point to next parameter)
EE/7CDF:	B7EA    	LDA [$EA],Y    (Address parameter, high byte)
EE/7CE1:	69CA    	ADC #$CA       (Add base bank)
EE/7CE3:	85EC    	STA $EC        (Set event address, high byte)
EE/7CE5:	A46A    	LDY $6A        (Temporarily saved address)
EE/7CE7:	84EA    	STY $EA        (Set event address, bottom two bytes)
EE/7CE9:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/7CEB:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/7CED:	4C0D79  	JMP $790D      (Jump back to map script routine)
EE/7CF0:	A4ED    	LDY $ED        (Event queue)
EE/7CF2:	C8      	INY
EE/7CF3:	C8      	INY
EE/7CF4:	C8      	INY
EE/7CF5:	84ED    	STY $ED        (Advance event queue by three bytes)
EE/7CF7:	4C0D79  	JMP $790D      (Jump back to map script routine)

Bitfield
EE/7CFA:	01      	(Bit 0)
EE/7CFB:	02      	(Bit 1)
EE/7CFC:	04      	(Bit 2)
EE/7CFD:	08      	(Bit 3)
EE/7CFE:	10      	(Bit 4)
EE/7CFF:	20      	(Bit 5)
EE/7D00:	40      	(Bit 6)
EE/7D01:	80      	(Bit 7)

Map script command C0, set event speed of map character to slowest
EE/7D02:	E220    	SEP #$20       (8-bit A)
EE/7D04:	A904    	LDA #$04
EE/7D06:	85F3    	STA $F3        (A quarter of the normal speed)
EE/7D08:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command C1, set event speed of map character to slow
EE/7D0B:	E220    	SEP #$20       (8-bit A)
EE/7D0D:	A908    	LDA #$08
EE/7D0F:	85F3    	STA $F3        (Half of the normal speed)
EE/7D11:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command C2, set event speed of map character to normal
EE/7D14:	E220    	SEP #$20       (8-bit A)
EE/7D16:	A910    	LDA #$10
EE/7D18:	85F3    	STA $F3        (Normal speed)
EE/7D1A:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command C3, set event speed of map character to fast
EE/7D1D:	E220    	SEP #$20       (8-bit A)
EE/7D1F:	A920    	LDA #$20
EE/7D21:	85F3    	STA $F3        (Double of the normal speed)
EE/7D23:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command C4, set event speed of map character to fastest
EE/7D26:	E220    	SEP #$20       (8-bit A)
EE/7D28:	A940    	LDA #$40
EE/7D2A:	85F3    	STA $F3        (Quadruple of the normal speed)
EE/7D2C:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script commands C5-C7, place airship at position X,Y
EE/7D2F:	E220    	SEP #$20       (8-bit A) (Not particularly efficient...)
EE/7D31:	A4ED    	LDY $ED        (Event queue)
EE/7D33:	B7EA    	LDA [$EA],Y    (Parameter for X position)
EE/7D35:	8F621F00	STA $001F62    (Set X position of landed airship)
EE/7D39:	C8      	INY
EE/7D3A:	B7EA    	LDA [$EA],Y    (Parameter for Y position)
EE/7D3C:	8F631F00	STA $001F63    (Set Y position of landed airship)
EE/7D40:	C8      	INY
EE/7D41:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/7D43:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command C8, set event bit
EE/7D46:	C230    	REP #$30       (16-bit A and indexes)
EE/7D48:	A4ED    	LDY $ED        (Event queue)
EE/7D4A:	B7EA    	LDA [$EA],Y    (Bit parameter)
EE/7D4C:	C8      	INY
EE/7D4D:	C8      	INY
EE/7D4E:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/7D50:	855A    	STA $5A        (Save the parameter temporarily)
EE/7D52:	290700  	AND #$0007     (Isolate 0-7 bit number)
EE/7D55:	AA      	TAX            (Transfer A to X)
EE/7D56:	BFFA7CEE	LDA $EE7CFA,X  (Bitfield)
EE/7D5A:	855C    	STA $5C        (Save it temporarily)
EE/7D5C:	A55A    	LDA $5A        (Temporarily saved parameter)
EE/7D5E:	4A      	LSR A          (Divide by 2)
EE/7D5F:	4A      	LSR A          (Divide by 4)
EE/7D60:	4A      	LSR A          (Divide by 8, isolating the byte number)
EE/7D61:	AA      	TAX            (Transfer A to X)
EE/7D62:	E220    	SEP #$20       (8-bit A)
EE/7D64:	BD801E  	LDA $1E80,X    (Event bits)
EE/7D67:	055C    	ORA $5C        (Set the specified bit)
EE/7D69:	9D801E  	STA $1E80,X    (Save changes)
EE/7D6C:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command C9, clear event bit
EE/7D6F:	C230    	REP #$30       (16-bit A and indexes)
EE/7D71:	A4ED    	LDY $ED        (Event queue)
EE/7D73:	B7EA    	LDA [$EA],Y    (Bit parameter)
EE/7D75:	C8      	INY
EE/7D76:	C8      	INY
EE/7D77:	84ED    	STY $ED        (Advance event queue by two bytes)
EE/7D79:	855A    	STA $5A        (Save the parameter temporarily)
EE/7D7B:	290700  	AND #$0007     (Isolate 0-7 bit number)
EE/7D7E:	AA      	TAX            (Transfer A to X)
EE/7D7F:	BFFA7CEE	LDA $EE7CFA,X  (Bitfield)
EE/7D83:	855C    	STA $5C        (Save it temporarily)
EE/7D85:	A55A    	LDA $5A        (Temporarily saved parameter)
EE/7D87:	4A      	LSR A          (Divide by 2)
EE/7D88:	4A      	LSR A          (Divide by 4)
EE/7D89:	4A      	LSR A          (Divide by 8, isolating the byte number)
EE/7D8A:	AA      	TAX            (Transfer A to X)
EE/7D8B:	E220    	SEP #$20       (8-bit A)
EE/7D8D:	A55C    	LDA $5C
EE/7D8F:	49FF    	EOR #$FF       (Toggle all bits)
EE/7D91:	855C    	STA $5C        (Save changes)
EE/7D93:	BD801E  	LDA $1E80,X    (Event bits)
EE/7D96:	255C    	AND $5C        (Clear the selected bit)
EE/7D98:	9D801E  	STA $1E80,X    (Save changes)
EE/7D9B:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script commands CA-CC, turn map character up
EE/7D9E:	E220    	SEP #$20       (8-bit A)
EE/7DA0:	A900    	LDA #$00
EE/7DA2:	85F6    	STA $F6        (Face up) (BRA $7DD2...)
EE/7DA4:	E210    	SEP #$10       (8-bit indexes)
EE/7DA6:	20E347  	JSR $47E3      (Map character sprite updating)
EE/7DA9:	C210    	REP #$10       (16-bit indexes)
EE/7DAB:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command CD, turn map character right
EE/7DAE:	E220    	SEP #$20       (8-bit A)
EE/7DB0:	A901    	LDA #$01
EE/7DB2:	85F6    	STA $F6        (Face right) (BRA $7DD2...)
EE/7DB4:	E210    	SEP #$10       (8-bit indexes)
EE/7DB6:	20E347  	JSR $47E3      (Map character sprite updating)
EE/7DB9:	C210    	REP #$10       (16-bit indexes)
EE/7DBB:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command CE, turn map character down
EE/7DBE:	E220    	SEP #$20       (8-bit A)
EE/7DC0:	A902    	LDA #$02
EE/7DC2:	85F6    	STA $F6        (Face down) (BRA $7DD2...)
EE/7DC4:	E210    	SEP #$10       (8-bit indexes)
EE/7DC6:	20E347  	JSR $47E3      (Map character sprite updating)
EE/7DC9:	C210    	REP #$10       (16-bit indexes)
EE/7DCB:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command CF, turn map character left
EE/7DCE:	E220    	SEP #$20       (8-bit A)
EE/7DD0:	A903    	LDA #$03
EE/7DD2:	85F6    	STA $F6        (Face left)
EE/7DD4:	E210    	SEP #$10       (8-bit indexes)
EE/7DD6:	20E347  	JSR $47E3      (Map character sprite updating)
EE/7DD9:	C210    	REP #$10       (16-bit indexes)
EE/7DDB:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command D0, show map character
EE/7DDE:	E220    	SEP #$20       (8-bit A)
EE/7DE0:	A5E7    	LDA $E7
EE/7DE2:	29DF    	AND #$DF       (Clear the "hide vehicle and map character" bit)
EE/7DE4:	85E7    	STA $E7        (Save changes) (LDA #$20, TRB $E7...)
EE/7DE6:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command D1, hide character
EE/7DE9:	E220    	SEP #$20       (8-bit A)
EE/7DEB:	A5E7    	LDA $E7
EE/7DED:	0920    	ORA #$20       (Set the "hide vehicle and map character" bit)
EE/7DEF:	85E7    	STA $E7        (Save changes) (LDA #$20, TSB $E7...)
EE/7DF1:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command D2, load map
EE/7DF4:	C220    	REP #$20       (16-bit A)
EE/7DF6:	A4ED    	LDY $ED        (Event queue)
EE/7DF8:	B7EA    	LDA [$EA],Y    (Load the map parameter)
EE/7DFA:	85F4    	STA $F4        (Save as current map, including flags)
EE/7DFC:	890002  	BIT #$0200     (Update variables for parent map?)
EE/7DFF:	F021    	BEQ $7E22      (Branch if not)
EE/7E01:	AF641F00	LDA $001F64    (Map number and flags in SRAM variables)
EE/7E05:	29FF01  	AND #$01FF     (Isolate map number)
EE/7E08:	8F691F00	STA $001F69    (Save as parent map)
EE/7E0C:	E220    	SEP #$20       (8-bit A)
EE/7E0E:	A5E0    	LDA $E0        (Current X position in tiles)
EE/7E10:	8F6B1F00	STA $001F6B    (Save as X position when loading parent map)
EE/7E14:	A5E2    	LDA $E2        (Current Y position in tiles)
EE/7E16:	8F6C1F00	STA $001F6C    (Save as Y position when loading parent map)
EE/7E1A:	A5F6    	LDA $F6        (Current direction)
EE/7E1C:	8FD21F00	STA $001FD2    (Save as direction when loading parent map)
EE/7E20:	C220    	REP #$20       (16-bit A)
EE/7E22:	C8      	INY
EE/7E23:	C8      	INY            (Point to next parameter)
EE/7E24:	B7EA    	LDA [$EA],Y    (Load the position parameter)
EE/7E26:	851C    	STA $1C        (Save as coordinates to be saved in SRAM)
EE/7E28:	C8      	INY
EE/7E29:	C8      	INY            (Point to next parameter)
EE/7E2A:	B7EA    	LDA [$EA],Y    (Load the mode parameter)
EE/7E2C:	85F1    	STA $F1
EE/7E2E:	C8      	INY
EE/7E2F:	84ED    	STY $ED        (Advance event queue by five bytes)
EE/7E31:	CE1900  	DEC $0019      (Let all functions know that a map was loaded via a map command)
EE/7E34:	E220    	SEP #$20       (8-bit A)
EE/7E36:	A5EA    	LDA $EA        (Event address, low byte)
EE/7E38:	18      	CLC            (Clear Carry for addition)
EE/7E39:	65ED    	ADC $ED        (Add to low byte of event queue)
EE/7E3B:	85EA    	STA $EA        (Save changes)
EE/7E3D:	A5EB    	LDA $EB        (Event address, middle byte)
EE/7E3F:	65EE    	ADC $EE        (Add to the event queue value, high byte; add one if Carry set)
EE/7E41:	85EB    	STA $EB        (Save changes)
EE/7E43:	A5EC    	LDA $EC        (Event address, high byte) (BCC, INC $EC...)
EE/7E45:	6900    	ADC #$00       (Add one if Carry set)
EE/7E47:	85EC    	STA $EC        (Save changes)
EE/7E49:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command D3, load map, automatically enable mode $40
EE/7E4C:	C220    	REP #$20       (16-bit A)
EE/7E4E:	A4ED    	LDY $ED        (Event queue)
EE/7E50:	B7EA    	LDA [$EA],Y    (Load the map parameter)
EE/7E52:	85F4    	STA $F4        (Save as current map, including flags)
EE/7E54:	890002  	BIT #$0200     (Update variables for parent map?)
EE/7E57:	F021    	BEQ $7E7A      (Branch if not)
EE/7E59:	AF641F00	LDA $001F64    (Map number and flags in SRAM variables)
EE/7E5D:	29FF01  	AND #$01FF     (Isolate map number)
EE/7E60:	8F691F00	STA $001F69    (Save as parent map)
EE/7E64:	E220    	SEP #$20       (8-bit A)
EE/7E66:	A5E0    	LDA $E0        (Current X position in tiles)
EE/7E68:	8F6B1F00	STA $001F6B    (Save as X position when loading parent map)
EE/7E6C:	A5E2    	LDA $E2        (Current Y position in tiles)
EE/7E6E:	8F6C1F00	STA $001F6C    (Save as Y position when loading parent map)
EE/7E72:	A5F6    	LDA $F6        (Current direction)
EE/7E74:	8FD21F00	STA $001FD2    (Save as direction when loading parent map)
EE/7E78:	C220    	REP #$20       (16-bit A)
EE/7E7A:	C8      	INY
EE/7E7B:	C8      	INY            (Point to next parameter)
EE/7E7C:	B7EA    	LDA [$EA],Y    (Load the position parameter)
EE/7E7E:	851C    	STA $1C        (Save as coordinates to be saved in SRAM)
EE/7E80:	C8      	INY
EE/7E81:	C8      	INY            (Point to next parameter)
EE/7E82:	B7EA    	LDA [$EA],Y    (Load the mode parameter and a superfluous byte)
EE/7E84:	094000  	ORA #$0040     (Enable mode $40)
EE/7E87:	85F1    	STA $F1
EE/7E89:	C8      	INY
EE/7E8A:	84ED    	STY $ED        (Advance event queue by five bytes)
EE/7E8C:	CE1900  	DEC $0019      (Let all functions know that a map was loaded via a map command)
EE/7E8F:	E220    	SEP #$20       (8-bit A)
EE/7E91:	A5EA    	LDA $EA        (Event address, low byte)
EE/7E93:	18      	CLC            (Clear Carry for addition)
EE/7E94:	65ED    	ADC $ED        (Add to low byte of event queue)
EE/7E96:	85EA    	STA $EA        (Save changes)
EE/7E98:	A5EB    	LDA $EB        (Event address, middle byte)
EE/7E9A:	65EE    	ADC $EE        (Add to the event queue value, high byte; add one if Carry set)
EE/7E9C:	85EB    	STA $EB        (Save changes)
EE/7E9E:	A5EC    	LDA $EC        (Event address, high byte) (BCC, INC $EC...)
EE/7EA0:	6900    	ADC #$00       (Add one if Carry set)
EE/7EA2:	85EC    	STA $EC        (Save changes)
EE/7EA4:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command D4, branch unless the A button just got pushed (unused)
EE/7EA7:	E220    	SEP #$20       (8-bit A)
EE/7EA9:	A508    	LDA $08        (Controller 1 buttons that just got pushed)
EE/7EAB:	8980    	BIT #$80       (Pressed A?) (BMI...)
EE/7EAD:	D022    	BNE $7ED1      (Branch if so)
EE/7EAF:	A4ED    	LDY $ED        (Event queue)
EE/7EB1:	B7EA    	LDA [$EA],Y    (Address parameter, low byte)
EE/7EB3:	18      	CLC            (...)
EE/7EB4:	6900    	ADC #$00       (...)
EE/7EB6:	856A    	STA $6A        (Save temporarily...)
EE/7EB8:	C8      	INY            (Point to next parameter)
EE/7EB9:	B7EA    	LDA [$EA],Y    (Address parameter, middle byte)
EE/7EBB:	6900    	ADC #$00       (...)
EE/7EBD:	856B    	STA $6B        (Save temporarily...)
EE/7EBF:	C8      	INY            (Point to next parameter)
EE/7EC0:	B7EA    	LDA [$EA],Y    (Address parameter, high byte)
EE/7EC2:	69CA    	ADC #$CA       (Add base bank)
EE/7EC4:	85EC    	STA $EC        (Set event address, high byte)
EE/7EC6:	A66A    	LDX $6A        (Temporarily saved address)
EE/7EC8:	86EA    	STX $EA        (Set event address, bottom two bytes)
EE/7ECA:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/7ECC:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/7ECE:	4C0D79  	JMP $790D      (Jump back to map script routine) (BRA $7ED8...)
EE/7ED1:	A4ED    	LDY $ED        (Event queue)
EE/7ED3:	C8      	INY            (BRA $7EE8...)
EE/7ED4:	C8      	INY
EE/7ED5:	C8      	INY
EE/7ED6:	84ED    	STY $ED        (Advance event queue by three bytes)
EE/7ED8:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command D5, branch if not facing the selected direction (unused)
EE/7EDB:	E220    	SEP #$20       (8-bit A)
EE/7EDD:	A4ED    	LDY $ED        (Event queue)
EE/7EDF:	B7EA    	LDA [$EA],Y    (Load the direction parameter)
EE/7EE1:	C8      	INY
EE/7EE2:	84ED    	STY $ED        (Advance event queue by a byte)
EE/7EE4:	C5F6    	CMP $F6        (Compare to the current direction)
EE/7EE6:	D008    	BNE $7EF0      (Branch if not equal)
EE/7EE8:	C8      	INY
EE/7EE9:	C8      	INY
EE/7EEA:	C8      	INY
EE/7EEB:	84ED    	STY $ED        (Advance event queue by three bytes)
EE/7EED:	4C0D79  	JMP $790D      (Jump back to map script routine) (BRA $7F0B...)
EE/7EF0:	B7EA    	LDA [$EA],Y    (Address parameter, low byte)
EE/7EF2:	18      	CLC            (...)
EE/7EF3:	6900    	ADC #$00       (...)
EE/7EF5:	856A    	STA $6A        (Save temporarily...)
EE/7EF7:	C8      	INY            (Point to next parameter)
EE/7EF8:	B7EA    	LDA [$EA],Y    (Address parameter, middle byte)
EE/7EFA:	6900    	ADC #$00       (...)
EE/7EFC:	856B    	STA $6B        (Save temporarily...)
EE/7EFE:	C8      	INY            (Point to next parameter)
EE/7EFF:	B7EA    	LDA [$EA],Y    (Address parameter, high byte)
EE/7F01:	85EC    	STA $EC        (Set event address, high byte... This lacks the requisite "ADC #$CA")
EE/7F03:	A46A    	LDY $6A        (Temporarily saved address)
EE/7F05:	84EA    	STY $EA        (Set event address, bottom two bytes)
EE/7F07:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/7F09:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/7F0B:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script commands D6-D8, unfade screen (unused)
EE/7F0E:	E220    	SEP #$20       (8-bit A)
EE/7F10:	A90F    	LDA #$0F
EE/7F12:	8522    	STA $22        (Set screen to reach full brightness)
EE/7F14:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command D9, fade screen
EE/7F17:	E220    	SEP #$20       (8-bit A)
EE/7F19:	6422    	STZ $22        (Set screen to go blank)
EE/7F1B:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script commands DA-DD, hide minimap
EE/7F1E:	E220    	SEP #$20       (8-bit A)
EE/7F20:	AFF61100	LDA $0011F6
EE/7F24:	0901    	ORA #$01       (Set the "hide minimap" bit)
EE/7F26:	8FF61100	STA $0011F6    (Save changes)
EE/7F2A:	208F41  	JSR $418F      (Hide minimap)
EE/7F2D:	206C42  	JSR $426C      (Hide both minimap dots)
EE/7F30:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script commands DE and DF, show minimap
EE/7F33:	E220    	SEP #$20       (8-bit A)
EE/7F35:	AFF61100	LDA $0011F6
EE/7F39:	29FE    	AND #$FE       (Clear the "hide minimap" bit)
EE/7F3B:	8FF61100	STA $0011F6    (Save changes)
EE/7F3F:	202D41  	JSR $412D      (Show minimap)
EE/7F42:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command E0, pause for X
EE/7F45:	E220    	SEP #$20       (8-bit A)
EE/7F47:	A5EF    	LDA $EF        (Load pause count)
EE/7F49:	D013    	BNE $7F5E      (Branch if not zero)
EE/7F4B:	A4ED    	LDY $ED        (Event queue)
EE/7F4D:	B7EA    	LDA [$EA],Y    (Load the time parameter)
EE/7F4F:	85EF    	STA $EF        (Save as pause count)
EE/7F51:	C8      	INY
EE/7F52:	84ED    	STY $ED        (Advance event queue by a byte)
EE/7F54:	A90F    	LDA #$0F
EE/7F56:	85F1    	STA $F1
EE/7F58:	A5E7    	LDA $E7
EE/7F5A:	0904    	ORA #$04       (Set the command to be executed again)
EE/7F5C:	85E7    	STA $E7        (Save changes) (LDA #$04, TSB $E7...)
EE/7F5E:	C6F1    	DEC $F1
EE/7F60:	D008    	BNE $7F6A
EE/7F62:	C6EF    	DEC $EF
EE/7F64:	F007    	BEQ $7F6D
EE/7F66:	A904    	LDA #$04
EE/7F68:	85F1    	STA $F1
EE/7F6A:	4C2079  	JMP $7920      (PLP, RTS...)
EE/7F6D:	A5E7    	LDA $E7
EE/7F6F:	29FB    	AND #$FB       (Disable reiteration of command)
EE/7F71:	85E7    	STA $E7        (Save changes) (LDA #$04, TRB $E7...)
EE/7F73:	4C2079  	JMP $7920      (PLP, RTS...)

Map script commands E1-FC, change character graphic to ship
EE/7F76:	E220    	SEP #$20       (8-bit A)
EE/7F78:	A905    	LDA #$05
EE/7F7A:	85CA    	STA $CA        (This will draw the ship)
EE/7F7C:	4C0D79  	JMP $790D      (Jump back to map script routine)

Map script command FD, submerge Figaro Castle
EE/7F7F:	E220    	SEP #$20       (8-bit A)
EE/7F81:	8B      	PHB            (Save data bank)
EE/7F82:	A97E    	LDA #$7E
EE/7F84:	48      	PHA
EE/7F85:	AB      	PLB            (Set data bank to 7E)
EE/7F86:	A5E7    	LDA $E7
EE/7F88:	8904    	BIT #$04       (Is the command simply being repeated?)
EE/7F8A:	D027    	BNE $7FB3      (Branch if so)
EE/7F8C:	A20064  	LDX #$6400
EE/7F8F:	86F1    	STX $F1
EE/7F91:	A900    	LDA #$00
EE/7F93:	85EF    	STA $EF        (STZ...)
EE/7F95:	C220    	REP #$20       (16-bit A)
EE/7F97:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/7F9A:	BF6680EE	LDA $EE8066,X
EE/7F9E:	9D60B6  	STA $B660,X
EE/7FA1:	E8      	INX
EE/7FA2:	E8      	INX            (Point to next word)
EE/7FA3:	E02400  	CPX #$0024     (Reached EE/808A?)
EE/7FA6:	D0F2    	BNE $7F9A      (Loop if not)
EE/7FA8:	E220    	SEP #$20       (8-bit A)
EE/7FAA:	A5E7    	LDA $E7
EE/7FAC:	0904    	ORA #$04       (Set the command to be executed again)
EE/7FAE:	85E7    	STA $E7        (Save changes) (LDA #$04, TSB $E7...)
EE/7FB0:	20BE40  	JSR $40BE      (Set $6D30-$6D34 to #$AA, and zero $6D35-$6D4F)
EE/7FB3:	A5F2    	LDA $F2
EE/7FB5:	8D1CB6  	STA $B61C
EE/7FB8:	E6EF    	INC $EF
EE/7FBA:	C220    	REP #$20       (16-bit A)
EE/7FBC:	A5EF    	LDA $EF
EE/7FBE:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/7FC1:	AA      	TAX            (Transfer A to X)
EE/7FC2:	E220    	SEP #$20       (8-bit A)
EE/7FC4:	BFF1FEEF	LDA $EFFEF1,X  (Table for shaking Figaro Castle horizontally)
EE/7FC8:	2903    	AND #$03       (Keep the value between 0 and 3)
EE/7FCA:	C903    	CMP #$03       (Is it 3?)
EE/7FCC:	D002    	BNE $7FD0      (If not, Skip next instruction)
EE/7FCE:	A901    	LDA #$01       (3 becomes 1)
EE/7FD0:	18      	CLC            (Clear Carry for addition)
EE/7FD1:	6976    	ADC #$76       (Add 118)
EE/7FD3:	8D1AB6  	STA $B61A
EE/7FD6:	A5F2    	LDA $F2
EE/7FD8:	38      	SEC            (Set Carry for subtraction)
EE/7FD9:	E964    	SBC #$64       (Subtract 100)
EE/7FDB:	4A      	LSR A          (Divide by 2)
EE/7FDC:	4A      	LSR A          (Divide by 4)
EE/7FDD:	4A      	LSR A          (Divide by 8)
EE/7FDE:	18      	CLC            (Clear Carry for addition)
EE/7FDF:	692E    	ADC #$2E       (Add 46)
EE/7FE1:	8D18B6  	STA $B618
EE/7FE4:	A00000  	LDY #$0000     (Zero Y) (LDY $00, TYX...)
EE/7FE7:	A20000  	LDX #$0000     (Zero X)
EE/7FEA:	B960B6  	LDA $B660,Y
EE/7FED:	18      	CLC            (Clear Carry for addition)
EE/7FEE:	7965B6  	ADC $B665,Y
EE/7FF1:	9DDAB5  	STA $B5DA,X
EE/7FF4:	B961B6  	LDA $B661,Y
EE/7FF7:	9DDCB5  	STA $B5DC,X
EE/7FFA:	B962B6  	LDA $B662,Y
EE/7FFD:	18      	CLC            (Clear Carry for addition)
EE/7FFE:	6933    	ADC #$33       (Add 51)
EE/8000:	9DD8B5  	STA $B5D8,X
EE/8003:	DA      	PHX            (Save X)
EE/8004:	B963B6  	LDA $B663,Y
EE/8007:	18      	CLC            (Clear Carry for addition)
EE/8008:	7964B6  	ADC $B664,Y
EE/800B:	9963B6  	STA $B663,Y
EE/800E:	9015    	BCC $8025
EE/8010:	B962B6  	LDA $B662,Y
EE/8013:	1A      	INC A          (Add one)
EE/8014:	2903    	AND #$03
EE/8016:	9962B6  	STA $B662,Y
EE/8019:	A5EF    	LDA $EF
EE/801B:	AA      	TAX            (Transfer A to X)
EE/801C:	BFF1FEEF	LDA $EFFEF1,X  (Table for shaking sand objects horizontally?)
EE/8020:	2901    	AND #$01       (0 or 1)
EE/8022:	9965B6  	STA $B665,Y
EE/8025:	FA      	PLX            (Restore X)
EE/8026:	8A      	TXA            (Transfer X to A)
EE/8027:	18      	CLC            (Clear Carry for addition)
EE/8028:	6908    	ADC #$08       (Add 8)
EE/802A:	AA      	TAX            (Transfer A to X)
EE/802B:	98      	TYA            (Transfer Y to A)
EE/802C:	18      	CLC            (Clear Carry for addition)
EE/802D:	6906    	ADC #$06       (Add 6)
EE/802F:	A8      	TAY            (Transfer A to Y)
EE/8030:	C924    	CMP #$24       (Compare to 36)
EE/8032:	D0B6    	BNE $7FEA      (Loop if not equal)
EE/8034:	C221    	REP #$21       (16-bit A; clear Carry)
EE/8036:	A5F1    	LDA $F1
EE/8038:	692000  	ADC #$0020     (Add 32)
EE/803B:	85F1    	STA $F1        (Save changes)
EE/803D:	C9008C  	CMP #$8C00     (Compare to 35840)
EE/8040:	9020    	BCC $8062      (Exit if smaller)
EE/8042:	E220    	SEP #$20       (8-bit A)
EE/8044:	A5E7    	LDA $E7
EE/8046:	29FB    	AND #$FB       (Disable reiteration of command)
EE/8048:	85E7    	STA $E7        (Save changes) (LDA #$04, TRB $E7...)
EE/804A:	207440  	JSR $4074      (Set $6D30-$6D34 and $6D3D-$6D4F to #$AA; zero $6D35-$6D3C)
EE/804D:	201841  	JSR $4118      (Zero $B5D0 through $B64F)
EE/8050:	A2D000  	LDX #$00D0
EE/8053:	A9E0    	LDA #$E0       (Line 225 is off the screen)
EE/8055:	9F316B7E	STA $7E6B31,X  (Hide some graphics)
EE/8059:	E8      	INX
EE/805A:	E8      	INX
EE/805B:	E8      	INX
EE/805C:	E8      	INX
EE/805D:	E02C01  	CPX #$012C     (Done?)
EE/8060:	D0F3    	BNE $8055      (Loop if not)
EE/8062:	AB      	PLB
EE/8063:	4C2079  	JMP $7920      (PLP, RTS...)

Configures the sand objects around Figaro Castle
EE/8066:	6D87    	(Coordinates on screen)
EE/8068:	0000    	(Initial graphic? The sprite is never displayed, which may be a bug)
EE/806A:	4000    	(Animation speed?)
EE/806C:	7489    	(Coordinates on screen)
EE/806E:	0300    	(Initial graphic?)
EE/8070:	3000    	(Animation speed?)
EE/8072:	7C8B    	(Coordinates on screen)
EE/8074:	0200    	(Initial graphic?)
EE/8076:	4200    	(Animation speed?)
EE/8078:	828B    	(Coordinates on screen)
EE/807A:	0000    	(Initial graphic?)
EE/807C:	3800    	(Animation speed?)
EE/807E:	898B    	(Coordinates on screen)
EE/8080:	0100    	(Initial graphic?)
EE/8082:	4800    	(Animation speed?)
EE/8084:	9087    	(Coordinates on screen)
EE/8086:	0000    	(Initial graphic?)
EE/8088:	3400    	(Animation speed?)

Map script command FE, emerge Figaro Castle
EE/808A:	E220    	SEP #$20       (8-bit A)
EE/808C:	8B      	PHB            (Save data bank)
EE/808D:	A97E    	LDA #$7E
EE/808F:	48      	PHA
EE/8090:	AB      	PLB            (Set data bank to 7E)
EE/8091:	A5E7    	LDA $E7
EE/8093:	8904    	BIT #$04       (Is the command simply being repeated?)
EE/8095:	D027    	BNE $80BE      (Branch if so)
EE/8097:	A2008B  	LDX #$8B00
EE/809A:	86F1    	STX $F1
EE/809C:	A900    	LDA #$00
EE/809E:	85EF    	STA $EF        (STZ...)
EE/80A0:	C220    	REP #$20       (16-bit A)
EE/80A2:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/80A5:	BF6680EE	LDA $EE8066,X
EE/80A9:	9D60B6  	STA $B660,X
EE/80AC:	E8      	INX
EE/80AD:	E8      	INX
EE/80AE:	E02400  	CPX #$0024
EE/80B1:	D0F2    	BNE $80A5      (Loop if not)
EE/80B3:	E220    	SEP #$20       (8-bit A)
EE/80B5:	A5E7    	LDA $E7
EE/80B7:	0904    	ORA #$04       (Set the command to be executed again)
EE/80B9:	85E7    	STA $E7        (Save changes) (LDA #$04, TSB $E7...)
EE/80BB:	20BE40  	JSR $40BE      (Set $6D30-$6D34 to #$AA, and zero $6D35-$6D4F)
EE/80BE:	A5F2    	LDA $F2
EE/80C0:	8D1CB6  	STA $B61C
EE/80C3:	E6EF    	INC $EF
EE/80C5:	C220    	REP #$20       (16-bit A)
EE/80C7:	A5EF    	LDA $EF
EE/80C9:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/80CC:	AA      	TAX            (Transfer A to X)
EE/80CD:	E220    	SEP #$20       (8-bit A)
EE/80CF:	BFF1FEEF	LDA $EFFEF1,X  (Table of values; for shaking Figaro Castle horizontally)
EE/80D3:	2903    	AND #$03       (Keep the value between 0 and 3)
EE/80D5:	C903    	CMP #$03       (Is it 3?)
EE/80D7:	D002    	BNE $80DB      (If not, Skip next instruction)
EE/80D9:	A901    	LDA #$01       (3 becomes 1)
EE/80DB:	18      	CLC            (Clear Carry for addition)
EE/80DC:	6976    	ADC #$76       (Add 118)
EE/80DE:	8D1AB6  	STA $B61A
EE/80E1:	A5F2    	LDA $F2
EE/80E3:	38      	SEC            (Set Carry for subtraction)
EE/80E4:	E964    	SBC #$64       (Subtract 100)
EE/80E6:	4A      	LSR A          (Divide by 2)
EE/80E7:	4A      	LSR A          (Divide by 4)
EE/80E8:	4A      	LSR A          (Divide by 8)
EE/80E9:	18      	CLC            (Clear Carry for addition)
EE/80EA:	692E    	ADC #$2E       (Add 46)
EE/80EC:	8D18B6  	STA $B618
EE/80EF:	A00000  	LDY #$0000     (Zero Y) (LDY $00, TYX...)
EE/80F2:	A20000  	LDX #$0000     (Zero X)
EE/80F5:	B960B6  	LDA $B660,Y
EE/80F8:	18      	CLC            (Clear Carry for addition)
EE/80F9:	7965B6  	ADC $B665,Y
EE/80FC:	9DDAB5  	STA $B5DA,X
EE/80FF:	B961B6  	LDA $B661,Y
EE/8102:	9DDCB5  	STA $B5DC,X
EE/8105:	B962B6  	LDA $B662,Y
EE/8108:	18      	CLC            (Clear Carry for addition)
EE/8109:	6933    	ADC #$33       (Add 51)
EE/810B:	9DD8B5  	STA $B5D8,X
EE/810E:	DA      	PHX            (Save X)
EE/810F:	B963B6  	LDA $B663,Y
EE/8112:	18      	CLC            (Clear Carry for addition)
EE/8113:	7964B6  	ADC $B664,Y
EE/8116:	9963B6  	STA $B663,Y    (Save changes)
EE/8119:	9015    	BCC $8130
EE/811B:	B962B6  	LDA $B662,Y
EE/811E:	1A      	INC A
EE/811F:	2903    	AND #$03
EE/8121:	9962B6  	STA $B662,Y    (Save changes)
EE/8124:	A5EF    	LDA $EF
EE/8126:	AA      	TAX            (Transfer A to X)
EE/8127:	BFF1FEEF	LDA $EFFEF1,X  (Table of values; for shaking the sand objects horizontally?)
EE/812B:	2901    	AND #$01       (0 or 1)
EE/812D:	9965B6  	STA $B665,Y
EE/8130:	FA      	PLX            (Restore X)
EE/8131:	8A      	TXA            (Transfer X to A)
EE/8132:	18      	CLC            (Clear Carry for addition)
EE/8133:	6908    	ADC #$08       (Add 8)
EE/8135:	AA      	TAX            (Transfer A to X)
EE/8136:	98      	TYA            (Transfer Y to A)
EE/8137:	18      	CLC            (Clear Carry for addition)
EE/8138:	6906    	ADC #$06       (Add 6)
EE/813A:	A8      	TAY            (Transfer A to Y)
EE/813B:	C924    	CMP #$24       (Compare to 36)
EE/813D:	D0B6    	BNE $80F5      (Loop if not equal)
EE/813F:	C220    	REP #$20       (16-bit A)
EE/8141:	A5F1    	LDA $F1
EE/8143:	38      	SEC            (Set Carry for subtraction)
EE/8144:	E92000  	SBC #$0020     (Subtract 32)
EE/8147:	85F1    	STA $F1        (Save changes)
EE/8149:	C90064  	CMP #$6400     (Compare to 25600)
EE/814C:	B02C    	BCS $817A      (Branch if equal or greater)
EE/814E:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/8151:	7B      	TDC            (Zero A)
EE/8152:	9DD8B5  	STA $B5D8,X
EE/8155:	8A      	TXA            (Transfer X to A)
EE/8156:	18      	CLC            (Clear Carry for addition)
EE/8157:	690800  	ADC #$0008     (Add 8)
EE/815A:	AA      	TAX            (Transfer A to X)
EE/815B:	C93000  	CMP #$0030     (Compare to 48)
EE/815E:	D0F1    	BNE $8151      (Loop if not equal)
EE/8160:	E220    	SEP #$20       (8-bit A)
EE/8162:	A5E7    	LDA $E7
EE/8164:	29FB    	AND #$FB       (Disable reiteration of command)
EE/8166:	85E7    	STA $E7        (Save changes) (LDA #$04, TRB $E7...)
EE/8168:	A2D000  	LDX #$00D0     (Senseless...)
EE/816B:	A9E0    	LDA #$E0       (Line 225 is off the screen)
EE/816D:	9F316B7E	STA $7E6B31,X  (Hide some sprite)
EE/8171:	E8      	INX
EE/8172:	E8      	INX
EE/8173:	E8      	INX
EE/8174:	E8      	INX            (Point to next sprite)
EE/8175:	E02C01  	CPX #$012C
EE/8178:	D0F3    	BNE $816D      (Loop if not)
EE/817A:	AB      	PLB
EE/817B:	4C2079  	JMP $7920      (PLP, RTS...)

Map script command FF, end map script
EE/817E:	E220    	SEP #$20       (8-bit A)
EE/8180:	A5E7    	LDA $E7
EE/8182:	29FC    	AND #$FC
EE/8184:	85E7    	STA $E7        (Save changes) (LDA #$03, TRB $E7...)
EE/8186:	4C2079  	JMP $7920      (PLP, RTS...)

Jump table for map script
EE/8189:	2279    	(X from 0 to 7F will all jump to the same place to set a pose; massive waste)
EE/818B:	2279
EE/818D:	2279
EE/818F:	2279
EE/8191:	2279
EE/8193:	2279
EE/8195:	2279
EE/8197:	2279
EE/8199:	2279
EE/819B:	2279
EE/819D:	2279
EE/819F:	2279
EE/81A1:	2279
EE/81A3:	2279
EE/81A5:	2279
EE/81A7:	2279
EE/81A9:	2279
EE/81AB:	2279
EE/81AD:	2279
EE/81AF:	2279
EE/81B1:	2279
EE/81B3:	2279
EE/81B5:	2279
EE/81B7:	2279
EE/81B9:	2279
EE/81BB:	2279
EE/81BD:	2279
EE/81BF:	2279
EE/81C1:	2279
EE/81C3:	2279
EE/81C5:	2279
EE/81C7:	2279
EE/81C9:	2279
EE/81CB:	2279
EE/81CD:	2279
EE/81CF:	2279
EE/81D1:	2279
EE/81D3:	2279
EE/81D5:	2279
EE/81D7:	2279
EE/81D9:	2279
EE/81DB:	2279
EE/81DD:	2279
EE/81DF:	2279
EE/81E1:	2279
EE/81E3:	2279
EE/81E5:	2279
EE/81E7:	2279
EE/81E9:	2279
EE/81EB:	2279
EE/81ED:	2279
EE/81EF:	2279
EE/81F1:	2279
EE/81F3:	2279
EE/81F5:	2279
EE/81F7:	2279
EE/81F9:	2279
EE/81F7:	2279
EE/81FD:	2279
EE/81FF:	2279
EE/8201:	2279
EE/8203:	2279
EE/8205:	2279
EE/8207:	2279
EE/8209:	2279
EE/820B:	2279
EE/820D:	2279
EE/820F:	2279
EE/8211:	2279
EE/8213:	2279
EE/8215:	2279
EE/8217:	2279
EE/8219:	2279
EE/821B:	2279
EE/821D:	2279
EE/821F:	2279
EE/8221:	2279
EE/8223:	2279
EE/8225:	2279
EE/8227:	2279
EE/8229:	2279
EE/822B:	2279
EE/822D:	2279
EE/822F:	2279
EE/8231:	2279
EE/8233:	2279
EE/8235:	2279
EE/8237:	2279
EE/8239:	2279
EE/823B:	2279
EE/823D:	2279
EE/823F:	2279
EE/8241:	2279
EE/8243:	2279
EE/8245:	2279
EE/8247:	2279
EE/8249:	2279
EE/824B:	2279
EE/824D:	2279
EE/824F:	2279
EE/8251:	2279
EE/8253:	2279
EE/8255:	2279
EE/8257:	2279
EE/8259:	2279
EE/825B:	2279
EE/825D:	2279
EE/825F:	2279
EE/8261:	2279
EE/8263:	2279
EE/8265:	2279
EE/8267:	2279
EE/8269:	2279
EE/826B:	2279
EE/826D:	2279
EE/826F:	2279
EE/8271:	2279
EE/8273:	2279
EE/8275:	2279
EE/8277:	2279
EE/8279:	2279
EE/827B:	2279
EE/827D:	2279
EE/827F:	2279
EE/8281:	2279
EE/8283:	2279
EE/8285:	2279
EE/8287:	2279
EE/8289:	3279    	(80, move up x1)
EE/828B:	3279    	(81, move right x1)
EE/828D:	3279    	(82, move down x1)
EE/828F:	3279    	(83, move left x1)
EE/8291:	3279    	(84, move up x2)
EE/8293:	3279    	(85, move right x2)
EE/8295:	3279    	(86, move down x2)
EE/8297:	3279    	(87, move left x2)
EE/8299:	3279    	(88, move up x3)
EE/829B:	3279    	(89, move right x3)
EE/829D:	3279    	(8A, move down x3)
EE/829F:	3279    	(8B, move left x3)
EE/82A1:	3279    	(8C, move up x4)
EE/82A3:	3279    	(8D, move right x4)
EE/82A5:	3279    	(8E, move down x4)
EE/82A7:	3279    	(8F, move left x4)
EE/82A9:	3279    	(90, move up x5)
EE/82AB:	3279    	(91, move right x5)
EE/82AD:	3279    	(92, move down x5)
EE/82AF:	3279    	(93, move left x5)
EE/82B1:	3279    	(94, move up x6)
EE/82B3:	3279    	(95, move right x6)
EE/82B5:	3279    	(96, move down x6)
EE/82B7:	3279    	(97, move left x6)
EE/82B9:	3279    	(98, move up x7)
EE/82BB:	3279    	(99, move right x7)
EE/82BD:	3279    	(9A, move down x7)
EE/82BF:	3279    	(9B, move left x7)
EE/82C1:	3279    	(9C, move up x8)
EE/82C3:	3279    	(9D, move right x8)
EE/82C5:	3279    	(9E, move down x8)
EE/82C7:	3279    	(9F, move left x8)
EE/82C9:	D579    	(A0, move right x1, up x1)
EE/82CB:	047A    	(A1, move right x1, down x1)
EE/82CD:	2E7A    	(A2, move left x1, down x1)
EE/82CF:	5D7A    	(A3, move left x1, up x1)
EE/82D1:	8C7A    	(A4, move right x1, up x2)
EE/82D3:	BC7A    	(A5, move right x2, up x1)
EE/82D5:	EE7A    	(A6, move right x2, down x1)
EE/82D7:	197B    	(A7, move right x1, down x2)
EE/82D9:	447B    	(A8, move left x1, down x2)
EE/82DB:	767B    	(A9, move left x2, down x1)
EE/82DD:	A67B    	(AA, move left x2, up x1)
EE/82DF:	D67B    	(AB, move left x1, up x2)
EE/82E1:	067C
EE/82E3:	067C
EE/82E5:	067C
EE/82E7:	067C
EE/82E9:	067C    	(B0, branch if any of the selected event bits is set/clear)
EE/82EB:	067C
EE/82ED:	067C
EE/82EF:	067C
EE/82F1:	067C
EE/82F3:	067C
EE/82F5:	067C
EE/82F7:	067C
EE/82F9:	807C    	(B8, branch if all of the selected event bits are set/clear)
EE/82FB:	807C
EE/82FD:	807C
EE/82FF:	807C
EE/8301:	807C
EE/8303:	807C
EE/8305:	807C
EE/8307:	807C
EE/8309:	027D    	(C0, set event speed of map character to slowest)
EE/830B:	0B7D    	(C1, set event speed of map character to slow)
EE/830D:	147D    	(C2, set event speed of map character to normal)
EE/830F:	1D7D    	(C3, set event speed of map character to fast)
EE/8311:	267D    	(C4, set event speed of map character to fastest)
EE/8313:	2F7D
EE/8315:	2F7D
EE/8317:	2F7D    	(C7, place airship at position X,Y)
EE/8319:	467D    	(C8, set event bit)
EE/831B:	6F7D    	(C9, clear event bit)
EE/831D:	9E7D
EE/831F:	9E7D
EE/8321:	9E7D    	(CC, turn map character up)
EE/8323:	AE7D    	(CD, turn map character right)
EE/8325:	BE7D    	(CE, turn map character down)
EE/8327:	CE7D    	(CF, turn map character left)
EE/8329:	DE7D    	(D0, show map character)
EE/832B:	E97D    	(D1, hide map character)
EE/832D:	F47D    	(D2, load map)
EE/832F:	4C7E    	(D3, load map, automatically enable mode $40)
EE/8331:	A77E    	(D4, branch unless the A button just got pushed) (Unused)
EE/8333:	DB7E    	(D5, branch if not facing the selected direction) (Unused)
EE/8335:	0E7F    	(D6, unfade screen) (Unused)
EE/8337:	0E7F    	(D7, unfade screen) (Unused)
EE/8339:	0E7F    	(D8, unfade screen) (Unused)
EE/833B:	177F    	(D9, fade screen)
EE/833D:	1E7F
EE/833F:	1E7F
EE/8341:	1E7F
EE/8343:	1E7F    	(DD, hide minimap)
EE/8345:	337F
EE/8347:	337F    	(DF, show minimap)
EE/8349:	457F    	(E0, pause for X)
EE/834B:	767F
EE/834D:	767F
EE/834F:	767F
EE/8351:	767F
EE/8353:	767F
EE/8355:	767F
EE/8357:	767F
EE/8359:	767F
EE/835B:	767F
EE/835D:	767F
EE/835F:	767F
EE/8361:	767F
EE/8363:	767F
EE/8365:	767F
EE/8367:	767F
EE/8369:	767F
EE/836B:	767F
EE/836D:	767F
EE/836F:	767F
EE/8371:	767F
EE/8373:	767F
EE/8375:	767F
EE/8377:	767F
EE/8379:	767F
EE/837B:	767F
EE/837D:	767F
EE/837F:	767F
EE/8381:	767F    	(FC, change character graphic to ship)
EE/8383:	7F7F    	(FD, submerge Figaro Castle)
EE/8385:	8A80    	(FE, emerge Figaro Castle)
EE/8387:	7E81    	(FF, end map script)

Map songs
EE/8389:	35      	(Blackjack; for the Blackjack)
EE/838A:	35      	(Blackjack; normally unused)
EE/838B:	4C      	(Searching for Friends; normally unused)
EE/838C:	4C      	(Searching for Friends; when flying the WoR)
EE/838D:	13      	(Techno de Chocobo; chocobo stables for WoB)
EE/838E:	13      	(Techno de Chocobo; normally unused)
EE/838F:	13      	(Techno de Chocobo; chocobo stables for WoR before finding the airship)
EE/8390:	13      	(Techno de Chocobo; chocobo stables for WoR after finding the airship)
EE/8391:	06      	(Terra; WoB overworld, excluding the Veldt)
EE/8392:	19      	(Wild West; normally unused)
EE/8393:	4F      	(Dark World; WoR before finding the airship)
EE/8394:	4C      	(Searching for Friends; WoR after finding the airship)
EE/8395:	1A      	(Save Them!; for mine-cart sequence)
EE/8396:	1A      	(Save Them!; unused)
EE/8397:	28      	(The Serpent Trench; for the Serpent Trench)
EE/8398:	28      	(The Serpent Trench; normally unused)

Serpent Trench and world map initialization
EE/8399:	E220    	SEP #$20       (8-bit A)
EE/839B:	A900    	LDA #$00
EE/839D:	48      	PHA
EE/839E:	AB      	PLB            (Set data bank to 00)
EE/839F:	ADF611  	LDA $11F6
EE/83A2:	29FD    	AND #$FD       (Clear the "invoke battle" bit)
EE/83A4:	8DF611  	STA $11F6      (Save changes) (LDA #$02, TRB $11F6...)
EE/83A7:	C220    	REP #$20       (16-bit A)
EE/83A9:	6404    	STZ $04        (Clear shared controller bits)
EE/83AB:	6406    	STZ $06        (Clear controller 1 bits)
EE/83AD:	6408    	STZ $08        (Clear controller 1 bits for buttons that just got pressed)
EE/83AF:	640A    	STZ $0A
EE/83B1:	640C    	STZ $0C
EE/83B3:	640E    	STZ $0E
EE/83B5:	AD641F  	LDA $1F64      (Map number and flags in SRAM variables)
EE/83B8:	29FF01  	AND #$01FF     (Isolate map number)
EE/83BB:	C90200  	CMP #$0002     (Serpent Trench?)
EE/83BE:	D003    	BNE $83C3      (Branch if not)
EE/83C0:	4C488D  	JMP $8D48      (Serpent Trench initialization)
EE/83C3:	E220    	SEP #$20       (8-bit A)
EE/83C5:	AD681F  	LDA $1F68      (Direction from SRAM)
EE/83C8:	1004    	BPL $83CE
EE/83CA:	297F    	AND #$7F
EE/83CC:	8009    	BRA $83D7
EE/83CE:	AD651F  	LDA $1F65      (Map number and flags in SRAM variables, high byte)
EE/83D1:	4A      	LSR A          (Divide by 2)
EE/83D2:	4A      	LSR A          (Divide by 4)
EE/83D3:	4A      	LSR A          (Divide by 8)
EE/83D4:	4A      	LSR A          (Divide by 16)
EE/83D5:	2903    	AND #$03       (Bits 0 and 1 now reflect bits 4 and 5)
EE/83D7:	8D681F  	STA $1F68      (Save direction in SRAM variables)
EE/83DA:	ADF311  	LDA $11F3
EE/83DD:	1003    	BPL $83E2      (BMI $8422...)
EE/83DF:	4C2284  	JMP $8422      (Airship mode initialization) (BRA...)
EE/83E2:	ADFA11  	LDA $11FA
EE/83E5:	2903    	AND #$03       (Isolate the vehicle bits)
EE/83E7:	F007    	BEQ $83F0      (Branch if neither is set)
EE/83E9:	C902    	CMP #$02       (Riding a chocobo?)
EE/83EB:	F006    	BEQ $83F3      (Branch if so) (Different order, and BNE $8422 works...)
EE/83ED:	4C2284  	JMP $8422      (Airship mode initialization) (BRA...)
EE/83F0:	4CE089  	JMP $89E0      (Character mode initialization)
EE/83F3:	4CCC86  	JMP $86CC      (Chocobo mode initialization)

Formalities prior to returning to a world map from a battle, a menu, etc.
EE/83F6:	E220    	SEP #$20       (8-bit A)
EE/83F8:	A900    	LDA #$00
EE/83FA:	48      	PHA
EE/83FB:	AB      	PLB            (Set data bank to 00)
EE/83FC:	C220    	REP #$20       (16-bit A)
EE/83FE:	AD641F  	LDA $1F64      (Map number and flags in SRAM variables)
EE/8401:	29FF01  	AND #$01FF     (Isolate map number)
EE/8404:	C90200  	CMP #$0002     (Serpent Trench?)
EE/8407:	D003    	BNE $840C      (Branch if not)
EE/8409:	4C488D  	JMP $8D48      (Serpent Trench mode initialization)
EE/840C:	E220    	SEP #$20       (8-bit A)
EE/840E:	ADFA11  	LDA $11FA      (BRA $83E2...)
EE/8411:	2903    	AND #$03       (Isolate vehicle flags)
EE/8413:	F007    	BEQ $841C      (Branch if neither is set)
EE/8415:	C902    	CMP #$02       (Riding a chocobo?)
EE/8417:	F006    	BEQ $841F      (Branch if so)
EE/8419:	4C2284  	JMP $8422      (Airship mode initialization) (BRA...)
EE/841C:	4CE089  	JMP $89E0      (Character mode initialization)
EE/841F:	4CCC86  	JMP $86CC      (Chocobo mode initialization)

Airship mode initialization
EE/8422:	E220    	SEP #$20       (8-bit A)
EE/8424:	C210    	REP #$10       (16-bit indexes)
EE/8426:	A980    	LDA #$80
EE/8428:	8D0021  	STA $2100      (Disable screen)
EE/842B:	20AF8F  	JSR $8FAF      (Initialize various registers)
EE/842E:	ADB71E  	LDA $1EB7      (Event bits)
EE/8431:	29F7    	AND #$F7       (Clear flag for playing Veldt music)
EE/8433:	8DB71E  	STA $1EB7      (Save changes) (LDA #$08, TRB $1EB7...)
EE/8436:	ADF611  	LDA $11F6
EE/8439:	8902    	BIT #$02       (Returning from battle?)
EE/843B:	F005    	BEQ $8442      (Branch if not)
EE/843D:	20FC90  	JSR $90FC      (Copy 256 bytes from $0A00 to $0000)
EE/8440:	8027    	BRA $8469
EE/8442:	208C90  	JSR $908C      (Move #$06E0 bytes from 7E/0520 to 00/F120)
EE/8445:	C220    	REP #$20       (16-bit A)
EE/8447:	AD601F  	LDA $1F60      (Coordinates from SRAM)
EE/844A:	4A      	LSR A          (Divide by 2)
EE/844B:	4A      	LSR A          (Divide by 4)
EE/844C:	4A      	LSR A          (Divide by 8)
EE/844D:	4A      	LSR A          (Divide by 16)
EE/844E:	29F00F  	AND #$0FF0     (Finalize conversion)
EE/8451:	8538    	STA $38        (Set Y position in pixels)
EE/8453:	AD601F  	LDA $1F60      (Coordinates from SRAM)
EE/8456:	0A      	ASL A          (Multiply by 2)
EE/8457:	0A      	ASL A          (Multiply by 4)
EE/8458:	0A      	ASL A          (Multiply by 8)
EE/8459:	0A      	ASL A          (Multiply by 16)
EE/845A:	29F00F  	AND #$0FF0     (Finalize conversion)
EE/845D:	8534    	STA $34        (Set X position in pixels)
EE/845F:	E220    	SEP #$20       (8-bit A)
EE/8461:	A980    	LDA #$80
EE/8463:	857B    	STA $7B
EE/8465:	A9D0    	LDA #$D0
EE/8467:	857D    	STA $7D
EE/8469:	A901    	LDA #$01
EE/846B:	85CA    	STA $CA        (This will draw a flying airship)
EE/846D:	A901    	LDA #$01       (...)
EE/846F:	8520    	STA $20        (Set airship mode)
EE/8471:	A901    	LDA #$01       (...)
EE/8473:	8F52B67E	STA $7EB652
EE/8477:	A910    	LDA #$10
EE/8479:	8D0013  	STA $1300
EE/847C:	A9FF    	LDA #$FF
EE/847E:	8D0213  	STA $1302      (Set volume to maximum)
EE/8481:	ADB91E  	LDA $1EB9      (Event bits)
EE/8484:	8910    	BIT #$10       (Map song override enabled?)
EE/8486:	D028    	BNE $84B0      (Branch if so)
EE/8488:	ADB71E  	LDA $1EB7      (Event bits)
EE/848B:	8908    	BIT #$08       (Veldt area?)
EE/848D:	F004    	BEQ $8493      (Branch if not)
EE/848F:	A919    	LDA #$19       (Song number for "Wild West"; unused feature)
EE/8491:	8015    	BRA $84A8      (Skip the following song-loading segment)
EE/8493:	7B      	TDC            (Zero A)
EE/8494:	EB      	XBA            (...)
EE/8495:	AD641F  	LDA $1F64      (Map number from SRAM, low byte)
EE/8498:	2903    	AND #$03       (We only care about the Serpent Trench and world maps)
EE/849A:	0A      	ASL A          (Multiply by 2)
EE/849B:	AA      	TAX            (Transfer A to X)
EE/849C:	ADB71E  	LDA $1EB7      (Event bits)
EE/849F:	8901    	BIT #$01       (Is the "alternate overworld music" bit set?)
EE/84A1:	F001    	BEQ $84A4      (Branch if not) (LSR A, BCC...)
EE/84A3:	E8      	INX            (Increase song index)
EE/84A4:	BF8983EE	LDA $EE8389,X  (Song number)
EE/84A8:	8D801F  	STA $1F80      (Save in SRAM variables)
EE/84AB:	8D0113  	STA $1301      (Set song) (BRA $84B3...)
EE/84AE:	8006    	BRA $84B6      (Skip next two instructions)
EE/84B0:	AD801F  	LDA $1F80      (Song number in SRAM variables)
EE/84B3:	8D0113  	STA $1301      (Set song)
EE/84B6:	220400C5	JSL $C50004    (Play song)
EE/84BA:	E220    	SEP #$20       (8-bit A)
EE/84BC:	8B      	PHB            (Save data bank)
EE/84BD:	A97E    	LDA #$7E
EE/84BF:	48      	PHA
EE/84C0:	AB      	PLB            (Set data bank to 7E)
EE/84C1:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/84C5:	D005    	BNE $84CC      (Branch if not WoB)
EE/84C7:	A20000  	LDX #$0000     (Point to WoB palettes) ($00...)
EE/84CA:	8003    	BRA $84CF      (Skip next instruction)
EE/84CC:	A20001  	LDX #$0100     (Point to WoR palettes)
EE/84CF:	A00000  	LDY #$0000     (Zero Y) ($00...)
EE/84D2:	C220    	REP #$20       (16-bit A)
EE/84D4:	BF00ECD2	LDA $D2EC00,X  (Overworld map palettes)
EE/84D8:	9900E0  	STA $E000,Y    (Save in RAM)
EE/84DB:	C8      	INY
EE/84DC:	C8      	INY            (Point to next color in RAM)
EE/84DD:	E8      	INX
EE/84DE:	E8      	INX            (Point to next color in ROM)
EE/84DF:	C00001  	CPY #$0100     (Copied all colors?)
EE/84E2:	D0F0    	BNE $84D4      (Loop if not)
EE/84E4:	E220    	SEP #$20       (8-bit A)
EE/84E6:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/84EA:	D005    	BNE $84F1      (Branch if not WoB)
EE/84EC:	A20002  	LDX #$0200     (Point to WoB palettes)
EE/84EF:	8003    	BRA $84F4      (Skip next instruction)
EE/84F1:	A20003  	LDX #$0300     (Point to WoR object palettes)
EE/84F4:	A00000  	LDY #$0000     (Zero Y) ($00...)
EE/84F7:	C220    	REP #$20       (16-bit A)
EE/84F9:	BF00ECD2	LDA $D2EC00,X  (Overworld object palettes)
EE/84FD:	9900E1  	STA $E100,Y    (Save in RAM)
EE/8500:	C8      	INY
EE/8501:	C8      	INY            (Point to next color in RAM)
EE/8502:	E8      	INX
EE/8503:	E8      	INX            (Point to next color in ROM)
EE/8504:	C00001  	CPY #$0100     (Copied all colors?)
EE/8507:	D0F0    	BNE $84F9      (Loop if not)
EE/8509:	AB      	PLB            (Restore data bank)
EE/850A:	E220    	SEP #$20       (8-bit A)
EE/850C:	AF06B2EE	LDA $EEB206    (Pointer to sky graphics, low byte)
EE/8510:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8512:	AF07B2EE	LDA $EEB207    (Pointer to sky graphics, middle byte)
EE/8516:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8518:	AF08B2EE	LDA $EEB208    (Pointer to sky graphics, high byte)
EE/851C:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/851E:	A20020  	LDX #$2000
EE/8521:	86D5    	STX $D5        (Destination address)
EE/8523:	A97E    	LDA #$7E
EE/8525:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/8527:	2076A4  	JSR $A476      (LZSS decompression)
EE/852A:	2080AD  	JSR $AD80      (Transfer decompressed sky graphics to VRAM)
EE/852D:	AF09B2EE	LDA $EEB209    (Pointer to sky tilemap, low byte)
EE/8531:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8533:	AF0AB2EE	LDA $EEB20A    (Pointer to sky tilemap, middle byte)
EE/8537:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8539:	AF0BB2EE	LDA $EEB20B    (Pointer to sky tilemap, high byte)
EE/853D:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/853F:	A20020  	LDX #$2000
EE/8542:	86D5    	STX $D5        (Destination address)
EE/8544:	A97E    	LDA #$7E
EE/8546:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/8548:	2076A4  	JSR $A476      (LZSS decompression)
EE/854B:	20A8AD  	JSR $ADA8      (Transfer decompressed sky tilemap to VRAM)
EE/854E:	AF42B2EE	LDA $EEB242    (Pointer to shadow and gradient overlay graphics, low byte)
EE/8552:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8554:	AF43B2EE	LDA $EEB243    (Pointer to shadow and gradient overlay graphics, middle byte)
EE/8558:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/855A:	AF44B2EE	LDA $EEB244    (Pointer to shadow and gradient overlay graphics, high byte)
EE/855E:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8560:	A20020  	LDX #$2000
EE/8563:	86D5    	STX $D5        (Destination address)
EE/8565:	A97E    	LDA #$7E
EE/8567:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/8569:	2076A4  	JSR $A476      (LZSS decompression)
EE/856C:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/8570:	D014    	BNE $8586      (Branch if not the World of Balance)
EE/8572:	AF0CB2EE	LDA $EEB20C    (Pointer to Blackjack graphics, low byte)
EE/8576:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8578:	AF0DB2EE	LDA $EEB20D    (Pointer to Blackjack graphics, middle byte)
EE/857C:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/857E:	AF0EB2EE	LDA $EEB20E    (Pointer to Blackjack graphics, high byte)
EE/8582:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8584:	8012    	BRA $8598      (Skip the code for the Falcon)
EE/8586:	AF51B2EE	LDA $EEB251    (Pointer to Falcon graphics, low byte)
EE/858A:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/858C:	AF52B2EE	LDA $EEB252    (Pointer to Falcon graphics, middle byte)
EE/8590:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8592:	AF53B2EE	LDA $EEB253    (Pointer to Falcon graphics, high byte)
EE/8596:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8598:	A20028  	LDX #$2800
EE/859B:	86D5    	STX $D5        (Destination address)
EE/859D:	A97E    	LDA #$7E
EE/859F:	85D7    	STA $D7        (Destination bank; 7E/2800)
EE/85A1:	2076A4  	JSR $A476      (LZSS decompression)
EE/85A4:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/85A8:	D014    	BNE $85BE      (Branch if not the World of Balance)
EE/85AA:	AF4BB2EE	LDA $EEB24B    (Pointer to WoB minimap graphics, low byte)
EE/85AE:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/85B0:	AF4CB2EE	LDA $EEB24C    (Pointer to WoB minimap graphics, middle byte)
EE/85B4:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/85B6:	AF4DB2EE	LDA $EEB24D    (Pointer to WoB minimap graphics, high byte)
EE/85BA:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/85BC:	8012    	BRA $85D0      (Skip code for World of Ruin)
EE/85BE:	AF4EB2EE	LDA $EEB24E    (Pointer to WoR minimap graphics, low byte)
EE/85C2:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/85C4:	AF4FB2EE	LDA $EEB24F    (Pointer to WoR minimap graphics, middle byte)
EE/85C8:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/85CA:	AF50B2EE	LDA $EEB250    (Pointer to WoR minimap graphics, high byte)
EE/85CE:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/85D0:	A20040  	LDX #$4000
EE/85D3:	86D5    	STX $D5        (Destination address)
EE/85D5:	A97E    	LDA #$7E
EE/85D7:	85D7    	STA $D7        (Destination bank; 7E/4000)
EE/85D9:	2076A4  	JSR $A476      (LZSS decompression)
EE/85DC:	20F19A  	JSR $9AF1      (Removal of Sealed Gate area from minimap)
EE/85DF:	AF45B2EE	LDA $EEB245    (Pointer to miscellaneous sprites, low byte)
EE/85E3:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/85E5:	AF46B2EE	LDA $EEB246    (Pointer to miscellaneous sprites, middle byte)
EE/85E9:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/85EB:	AF47B2EE	LDA $EEB247    (Pointer to miscellaneous sprites, high byte)
EE/85EF:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/85F1:	A20048  	LDX #$4800
EE/85F4:	86D5    	STX $D5        (Destination address)
EE/85F6:	A97E    	LDA #$7E
EE/85F8:	85D7    	STA $D7        (Destination bank; 7E/4800)
EE/85FA:	2076A4  	JSR $A476      (LZSS decompression)
EE/85FD:	20D0AD  	JSR $ADD0      (Transfer decompressed sprites to VRAM)
EE/8600:	ADF611  	LDA $11F6
EE/8603:	8908    	BIT #$08       (Is the "don't reload map tiles" bit set?)
EE/8605:	F007    	BEQ $860E      (Branch if not)
EE/8607:	29F7    	AND #$F7       (Clear said bit)
EE/8609:	8DF611  	STA $11F6      (Save changes)
EE/860C:	803E    	BRA $864C      (Skip loading tile graphics)
EE/860E:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/8612:	D014    	BNE $8628      (Branch if not the World of Balance)
EE/8614:	AF12B2EE	LDA $EEB212    (Pointer to WoB tile graphics, low byte)
EE/8618:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/861A:	AF13B2EE	LDA $EEB213    (Pointer to WoB tile graphics, middle byte)
EE/861E:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8620:	AF14B2EE	LDA $EEB214    (Pointer to WoB tile graphics, high byte)
EE/8624:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8626:	8012    	BRA $863A      (Skip code for World of Ruin)
EE/8628:	AF1EB2EE	LDA $EEB21E    (Pointer to WoR tile graphics, low byte)
EE/862C:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/862E:	AF1FB2EE	LDA $EEB21F    (Pointer to WoR tile graphics, middle byte)
EE/8632:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8634:	AF20B2EE	LDA $EEB220    (Pointer to WoR tile graphics, high byte)
EE/8638:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/863A:	A2506F  	LDX #$6F50
EE/863D:	86D5    	STX $D5        (Destination address)
EE/863F:	A97E    	LDA #$7E
EE/8641:	85D7    	STA $D7        (Destination bank; 7E/6F50)
EE/8643:	2076A4  	JSR $A476      (LZSS decompression)
EE/8646:	204F3F  	JSR $3F4F
EE/8649:	2075AE  	JSR $AE75      (Transfer water tiles)
EE/864C:	ADF611  	LDA $11F6
EE/864F:	8904    	BIT #$04       (Is the "don't reload tilemap" bit set?)
EE/8651:	F007    	BEQ $865A      (Branch if not)
EE/8653:	29FB    	AND #$FB       (Clear said bit)
EE/8655:	8DF611  	STA $11F6      (Save changes)
EE/8658:	803B    	BRA $8695      (Skip the updating of tilemap)
EE/865A:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/865E:	D014    	BNE $8674      (Branch if not the World of Balance)
EE/8660:	AF0FB2EE	LDA $EEB20F    (Pointer to WoB tilemap, low byte)
EE/8664:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8666:	AF10B2EE	LDA $EEB210    (Pointer to WoB tilemap, middle byte)
EE/866A:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/866C:	AF11B2EE	LDA $EEB211    (Pointer to WoB tilemap, high byte)
EE/8670:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8672:	8012    	BRA $8686      (Skip code for World of Ruin)
EE/8674:	AF24B2EE	LDA $EEB224    (Pointer to WoR tilemap, low byte)
EE/8678:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/867A:	AF25B2EE	LDA $EEB225    (Pointer to WoR tilemap, middle byte)
EE/867E:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8680:	AF26B2EE	LDA $EEB226    (Pointer to WoR tilemap, high byte)
EE/8684:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8686:	A20000  	LDX #$0000     (Zero X) ($00...)
EE/8689:	86D5    	STX $D5        (Destination address)
EE/868B:	A97F    	LDA #$7F
EE/868D:	85D7    	STA $D7        (Destination bank; 7F/0000)
EE/868F:	2076A4  	JSR $A476      (LZSS decompression)
EE/8692:	202F94  	JSR $942F      (Redraw portions of world map if conditions are met)
EE/8695:	20D534  	JSR $34D5      (Generate 32x32 world map for VRAM...?)
EE/8698:	E230    	SEP #$30       (8-bit A and indexes)
EE/869A:	AD6D1F  	LDA $1F6D      (RNG index for events, Doom Gaze, etc.)
EE/869D:	1A      	INC A          (Add one)
EE/869E:	1A      	INC A          (Add one)
EE/869F:	1A      	INC A          (Add one)
EE/86A0:	8D6D1F  	STA $1F6D      (Save changes)
EE/86A3:	AA      	TAX            (Transfer RNG index to X)
EE/86A4:	A000    	LDY #$00       (Start from first position variables)
EE/86A6:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/86AA:	293F    	AND #$3F       (0 to 63)
EE/86AC:	99000B  	STA $0B00,Y    (Set Doom Gaze's X 4x4 block position)
EE/86AF:	7B      	TDC            (Zero A)
EE/86B0:	99010B  	STA $0B01,Y
EE/86B3:	E8      	INX            (Increase RNG index)
EE/86B4:	BF00FDC0	LDA $C0FD00,X  (Load a random number)
EE/86B8:	4A      	LSR A          (Divide by 2)
EE/86B9:	4A      	LSR A          (Divide by 4)
EE/86BA:	99020B  	STA $0B02,Y    (Set Doom Gaze's Y 4x4 block position)
EE/86BD:	7B      	TDC            (Zero A)
EE/86BE:	99030B  	STA $0B03,Y
EE/86C1:	C8      	INY
EE/86C2:	C8      	INY
EE/86C3:	C8      	INY
EE/86C4:	C8      	INY            (Point to next position variables)
EE/86C5:	C010    	CPY #$10       (Place him in 4 spots, even though 2 are only checked for)
EE/86C7:	D0DD    	BNE $86A6      (Branch if we haven't done 4 placements yet)
EE/86C9:	4C4691  	JMP $9146      (Set NMI and IRQ locations, then jump to EE/0018)

Chocobo mode initialization
EE/86CC:	E220    	SEP #$20       (8-bit A)
EE/86CE:	C210    	REP #$10       (16-bit indexes)
EE/86D0:	A980    	LDA #$80
EE/86D2:	8D0021  	STA $2100      (Disable screen)
EE/86D5:	208C90  	JSR $908C      (Move #$06E0 bytes from 7E/0520 to 00/F120)
EE/86D8:	20AF8F  	JSR $8FAF      (Initialize various registers)
EE/86DB:	A910    	LDA #$10
EE/86DD:	8D0013  	STA $1300
EE/86E0:	A9FF    	LDA #$FF
EE/86E2:	8D0213  	STA $1302      (Set volume to maximum)
EE/86E5:	ADB91E  	LDA $1EB9      (Event bits)
EE/86E8:	8910    	BIT #$10       (Override map song?)
EE/86EA:	D028    	BNE $8714      (Branch if so)
EE/86EC:	ADB71E  	LDA $1EB7      (Event bits)
EE/86EF:	8908    	BIT #$08       (Veldt area?) (Impossible scenario...)
EE/86F1:	F004    	BEQ $86F7      (Branch if not)
EE/86F3:	A919    	LDA #$19       (Song number for "Wild West")
EE/86F5:	8015    	BRA $870C      (Skip other music-related cases)
EE/86F7:	7B      	TDC            (Zero A)
EE/86F8:	EB      	XBA            (...)
EE/86F9:	AD641F  	LDA $1F64      (Map number from SRAM, low byte)
EE/86FC:	2903    	AND #$03       (00 if WoB, 01 if WoR)
EE/86FE:	0A      	ASL A          (Multiply by 2)
EE/86FF:	AA      	TAX            (Transfer A to X)
EE/8700:	ADB71E  	LDA $1EB7      (Event bits)
EE/8703:	8901    	BIT #$01       (Play alternate overworld music?)
EE/8705:	F001    	BEQ $8708      (Branch if not) (LSR A, BCC...)
EE/8707:	E8      	INX            (Increase song index)
EE/8708:	BF8D83EE	LDA $EE838D,X  (Song number)
EE/870C:	8D801F  	STA $1F80      (Save in SRAM variables)
EE/870F:	8D0113  	STA $1301      (Set song) (BRA $8717...)
EE/8712:	8006    	BRA $871A      (Skip next two instructions)
EE/8714:	AD801F  	LDA $1F80      (Song number in SRAM variables)
EE/8717:	8D0113  	STA $1301      (Set song)
EE/871A:	220400C5	JSL $C50004    (Play song)
EE/871E:	C220    	REP #$20       (16-bit A)
EE/8720:	AD641F  	LDA $1F64      (Map number and flags in SRAM variables)
EE/8723:	290060  	AND #$6000     (Isolate flags for vehicle direction)
EE/8726:	EB      	XBA            (Exchange B and A)
EE/8727:	4A      	LSR A          (Divide by 2)
EE/8728:	4A      	LSR A          (Divide by 4)
EE/8729:	4A      	LSR A          (Divide by 8)
EE/872A:	4A      	LSR A          (Divide by 16; high bit is thus useless, as it represents 360 degrees)
EE/872B:	E220    	SEP #$20       (8-bit A)
EE/872D:	8D0242  	STA $4202      (Set multiplicand)
EE/8730:	A95A    	LDA #$5A
EE/8732:	8D0342  	STA $4203      (Set multiplier to 90)
EE/8735:	EA      	NOP
EE/8736:	EA      	NOP
EE/8737:	C220    	REP #$20       (16-bit A)
EE/8739:	AD1642  	LDA $4216      (Product)
EE/873C:	090080  	ORA #$8000     (Set flag for vehicle mode)
EE/873F:	8DF211  	STA $11F2      (Save as backup of direction, including flags)
EE/8742:	9CF411  	STZ $11F4      (Clear backup of vehicle height)
EE/8745:	AF601F00	LDA $001F60    (Coordinates in SRAM variables)
EE/8749:	4A      	LSR A          (Divide by 2)
EE/874A:	4A      	LSR A          (Divide by 4)
EE/874B:	4A      	LSR A          (Divide by 8)
EE/874C:	4A      	LSR A          (Divide by 16)
EE/874D:	29F00F  	AND #$0FF0     (Finalize conversion)
EE/8750:	18      	CLC            (Clear Carry for addition)
EE/8751:	690800  	ADC #$0008     (Add 8)
EE/8754:	8538    	STA $38        (Set party's Y position in pixels)
EE/8756:	AF601F00	LDA $001F60    (Coordinates in SRAM variables)
EE/875A:	0A      	ASL A          (Multiply by 2)
EE/875B:	0A      	ASL A          (Multiply by 4)
EE/875C:	0A      	ASL A          (Multiply by 8)
EE/875D:	0A      	ASL A          (Multiply by 16)
EE/875E:	29F00F  	AND #$0FF0     (Finalize conversion)
EE/8761:	18      	CLC            (Clear Carry for addition)
EE/8762:	690800  	ADC #$0008     (Add 8)
EE/8765:	8534    	STA $34        (Set party's X position in pixels)
EE/8767:	E220    	SEP #$20       (8-bit A)
EE/8769:	8B      	PHB            (Save data bank)
EE/876A:	A97E    	LDA #$7E
EE/876C:	48      	PHA
EE/876D:	AB      	PLB            (Set data bank to 7E)
EE/876E:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/8772:	D005    	BNE $8779      (Branch if not WoB)
EE/8774:	A20000  	LDX #$0000     (Point to WoB palettes) ($00...)
EE/8777:	8003    	BRA $877C      (Skip next instruction)
EE/8779:	A20001  	LDX #$0100     (Point to WoR palettes)
EE/877C:	A00000  	LDY #$0000     (Zero Y) ($00...)
EE/877F:	C220    	REP #$20       (16-bit A)
EE/8781:	BF00ECD2	LDA $D2EC00,X  (Overworld map and sky palettes)
EE/8785:	9900E0  	STA $E000,Y    (Save in RAM)
EE/8788:	C8      	INY
EE/8789:	C8      	INY            (Point to next color in RAM)
EE/878A:	E8      	INX
EE/878B:	E8      	INX            (Point to next color in ROM)
EE/878C:	C00001  	CPY #$0100     (Copied 128 colors?)
EE/878F:	D0F0    	BNE $8781      (Loop if not)
EE/8791:	E220    	SEP #$20       (8-bit A)
EE/8793:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/8797:	D005    	BNE $879E      (Branch if not WoB)
EE/8799:	A20002  	LDX #$0200     (Pointer to WoB palettes)
EE/879C:	8003    	BRA $87A1      (Skip next instruction)
EE/879E:	A20003  	LDX #$0300     (Pointer to WoR palettes)
EE/87A1:	A00000  	LDY #$0000     (Zero X) ($00...)
EE/87A4:	C220    	REP #$20       (16-bit A)
EE/87A6:	BF00ECD2	LDA $D2EC00,X  (Overworld object palettes)
EE/87AA:	9900E1  	STA $E100,Y    (Save in RAM)
EE/87AD:	C8      	INY
EE/87AE:	C8      	INY            (Point to next color in RAM)
EE/87AF:	E8      	INX
EE/87B0:	E8      	INX            (Point to next color in ROM)
EE/87B1:	C00001  	CPY #$0100     (Copied 128 colors?)
EE/87B4:	D0F0    	BNE $87A6      (Loop if not)
EE/87B6:	AB      	PLB            (Restore data bank)
EE/87B7:	E220    	SEP #$20       (8-bit A)
EE/87B9:	AF06B2EE	LDA $EEB206    (Pointer to sky graphics, low byte)
EE/87BD:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/87BF:	AF07B2EE	LDA $EEB207    (Pointer to sky graphics, middle byte)
EE/87C3:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/87C5:	AF08B2EE	LDA $EEB208    (Pointer to sky graphics, high byte)
EE/87C9:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/87CB:	A20020  	LDX #$2000
EE/87CE:	86D5    	STX $D5        (Destination address)
EE/87D0:	A97E    	LDA #$7E
EE/87D2:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/87D4:	2076A4  	JSR $A476      (LZSS decompression)
EE/87D7:	2080AD  	JSR $AD80      (Transfer decompressed sky graphics to VRAM)
EE/87DA:	AF09B2EE	LDA $EEB209    (Pointer to sky tilemap, low byte)
EE/87DE:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/87E0:	AF0AB2EE	LDA $EEB20A    (Pointer to sky tilemap, middle byte)
EE/87E4:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/87E6:	AF0BB2EE	LDA $EEB20B    (Pointer to sky tilemap, high byte)
EE/87EA:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/87EC:	A20020  	LDX #$2000
EE/87EF:	86D5    	STX $D5        (Destination address)
EE/87F1:	A97E    	LDA #$7E
EE/87F3:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/87F5:	2076A4  	JSR $A476      (LZSS decompression)
EE/87F8:	20A8AD  	JSR $ADA8      (Transfer decompressed sky tilemap to VRAM)
EE/87FB:	AF42B2EE	LDA $EEB242    (Pointer to shadow and gradient overlay graphics, low byte)
EE/87FF:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8801:	AF43B2EE	LDA $EEB243    (Pointer to shadow and gradient overlay graphics, middle byte)
EE/8805:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8807:	AF44B2EE	LDA $EEB244    (Pointer to shadow and gradient overlay graphics, high byte)
EE/880B:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/880D:	A20020  	LDX #$2000
EE/8810:	86D5    	STX $D5        (Destination address)
EE/8812:	A97E    	LDA #$7E
EE/8814:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/8816:	2076A4  	JSR $A476      (LZSS decompression)
EE/8819:	AF30B2EE	LDA $EEB230    (Pointer to chocobo graphics, low byte)
EE/881D:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/881F:	AF31B2EE	LDA $EEB231    (Pointer to chocobo graphics, middle byte)
EE/8823:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8825:	AF32B2EE	LDA $EEB232    (Pointer to chocobo graphics, high byte)
EE/8829:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/882B:	A20028  	LDX #$2800
EE/882E:	86D5    	STX $D5        (Destination address)
EE/8830:	A97E    	LDA #$7E
EE/8832:	85D7    	STA $D7        (Destination bank; 7E/2800)
EE/8834:	2076A4  	JSR $A476      (LZSS decompression)
EE/8837:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/883B:	D014    	BNE $8851      (Branch if not the World of Balance)
EE/883D:	AF4BB2EE	LDA $EEB24B    (Pointer to WoB minimap graphics, low byte)
EE/8841:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8843:	AF4CB2EE	LDA $EEB24C    (Pointer to WoB minimap graphics, middle byte)
EE/8847:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8849:	AF4DB2EE	LDA $EEB24D    (Pointer to WoB minimap graphics, high byte)
EE/884D:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/884F:	8012    	BRA $8863      (Skip code for World of Ruin)
EE/8851:	AF4EB2EE	LDA $EEB24E    (Pointer to WoR minimap graphics, low byte)
EE/8855:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8857:	AF4FB2EE	LDA $EEB24F    (Pointer to WoR minimap graphics, middle byte)
EE/885B:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/885D:	AF50B2EE	LDA $EEB250    (Pointer to WoR minimap graphics, high byte)
EE/8861:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8863:	A20040  	LDX #$4000
EE/8866:	86D5    	STX $D5        (Destination address)
EE/8868:	A97E    	LDA #$7E
EE/886A:	85D7    	STA $D7        (Destination bank; 7E/4000)
EE/886C:	2076A4  	JSR $A476      (LZSS decompression)
EE/886F:	20F19A  	JSR $9AF1      (Removal of Sealed Gate area from minimap)
EE/8872:	AF48B2EE	LDA $EEB248    (Pointer to chocobo graphics, low byte)
EE/8876:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8878:	AF49B2EE	LDA $EEB249    (Pointer to chocobo graphics, middle byte)
EE/887C:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/887E:	AF4AB2EE	LDA $EEB24A    (Pointer to chocobo graphics, high byte)
EE/8882:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8884:	A20048  	LDX #$4800
EE/8887:	86D5    	STX $D5        (Destination address)
EE/8889:	A97E    	LDA #$7E
EE/888B:	85D7    	STA $D7        (Destination bank; 7E/4800)
EE/888D:	2076A4  	JSR $A476      (LZSS decompression)
EE/8890:	20D0AD  	JSR $ADD0      (Transfer decompressed sprites to VRAM)
EE/8893:	ADF611  	LDA $11F6
EE/8896:	8908    	BIT #$08       (Bypass loading of map tiles?)
EE/8898:	F007    	BEQ $88A1      (Branch if not)
EE/889A:	29F7    	AND #$F7       (Clear said flag)
EE/889C:	8DF611  	STA $11F6      (Save changes)
EE/889F:	803E    	BRA $88DF      (Skip loading tile graphics)
EE/88A1:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/88A5:	D014    	BNE $88BB      (Branch if not the World of Balance)
EE/88A7:	AF12B2EE	LDA $EEB212    (Pointer to WoB tile graphics, low byte)
EE/88AB:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/88AD:	AF13B2EE	LDA $EEB213    (Pointer to WoB tile graphics, middle byte)
EE/88B1:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/88B3:	AF14B2EE	LDA $EEB214    (Pointer to WoB tile graphics, high byte)
EE/88B7:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/88B9:	8012    	BRA $88CD      (Skip code for World of Ruin)
EE/88BB:	AF1EB2EE	LDA $EEB21E    (Pointer to WoR tile graphics, low byte)
EE/88BF:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/88C1:	AF1FB2EE	LDA $EEB21F    (Pointer to WoR tile graphics, middle byte)
EE/88C5:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/88C7:	AF20B2EE	LDA $EEB220    (Pointer to WoR tile graphics, high byte)
EE/88CB:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/88CD:	A2506F  	LDX #$6F50
EE/88D0:	86D5    	STX $D5        (Destination address)
EE/88D2:	A97E    	LDA #$7E
EE/88D4:	85D7    	STA $D7        (Destination bank; 7E/6F50)
EE/88D6:	2076A4  	JSR $A476      (LZSS decompression)
EE/88D9:	204F3F  	JSR $3F4F
EE/88DC:	2075AE  	JSR $AE75      (Transfer water tiles)
EE/88DF:	ADF611  	LDA $11F6
EE/88E2:	8904    	BIT #$04       (Bypass loading of tilemap?)
EE/88E4:	F007    	BEQ $88ED      (Branch if not)
EE/88E6:	29FB    	AND #$FB       (Clear said flag)
EE/88E8:	8DF611  	STA $11F6      (Save changes)
EE/88EB:	803B    	BRA $8928      (Skip the updating of tilemap)
EE/88ED:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/88F1:	D014    	BNE $8907      (Branch if not the World of Balance)
EE/88F3:	AF0FB2EE	LDA $EEB20F    (Pointer to WoB tilemap, low byte)
EE/88F7:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/88F9:	AF10B2EE	LDA $EEB210    (Pointer to WoB tilemap, middle byte)
EE/88FD:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/88FF:	AF11B2EE	LDA $EEB211    (Pointer to WoB tilemap, high byte)
EE/8903:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8905:	8012    	BRA $8919      (Skip code for World of Ruin)
EE/8907:	AF24B2EE	LDA $EEB224    (Pointer to WoR tilemap, low byte)
EE/890B:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/890D:	AF25B2EE	LDA $EEB225    (Pointer to WoR tilemap, middle byte)
EE/8911:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8913:	AF26B2EE	LDA $EEB226    (Pointer to WoR tilemap, high byte)
EE/8917:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8919:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/891C:	86D5    	STX $D5        (Destination address)
EE/891E:	A97F    	LDA #$7F
EE/8920:	85D7    	STA $D7        (Destination bank; 7F/0000)
EE/8922:	2076A4  	JSR $A476      (LZSS decompression)
EE/8925:	202F94  	JSR $942F      (Redraw portions of world map if conditions are met)
EE/8928:	20D534  	JSR $34D5      (Generate 32x32 world map for VRAM...?)
EE/892B:	E220    	SEP #$20       (8-bit A)
EE/892D:	A902    	LDA #$02
EE/892F:	85CA    	STA $CA        (This will draw a chocobo)
EE/8931:	A902    	LDA #$02       (...)
EE/8933:	8520    	STA $20        (Set chocobo mode)
EE/8935:	A980    	LDA #$80
EE/8937:	857B    	STA $7B
EE/8939:	A9D0    	LDA #$D0
EE/893B:	857D    	STA $7D
EE/893D:	646A    	STZ $6A        (Zero low byte of address)
EE/893F:	646B    	STZ $6B        (Zero middle byte of address)
EE/8941:	646C    	STZ $6C        (Zero high byte of address)
EE/8943:	ADFB11  	LDA $11FB      (Sprite number for map character)
EE/8946:	8D0242  	STA $4202      (Save as multiplicand)
EE/8949:	A9A0    	LDA #$A0
EE/894B:	8D0342  	STA $4203      (Set multiplier to 160)
EE/894E:	EA      	NOP
EE/894F:	EA      	NOP
EE/8950:	EA      	NOP
EE/8951:	AE1642  	LDX $4216      (Product)
EE/8954:	866A    	STX $6A        (Save the address temporarily)
EE/8956:	A916    	LDA #$16
EE/8958:	8D0342  	STA $4203      (Set multiplier to 22)
EE/895B:	EA      	NOP
EE/895C:	EA      	NOP
EE/895D:	EA      	NOP
EE/895E:	AD1642  	LDA $4216      (Load low byte of product)
EE/8961:	18      	CLC            (Clear Carry for addition)
EE/8962:	656B    	ADC $6B        (Add middle byte of address)
EE/8964:	856B    	STA $6B        (Save updated address)
EE/8966:	AD1742  	LDA $4217      (Load high byte of product)
EE/8969:	656C    	ADC $6C        (Add to high byte of address)
EE/896B:	856C    	STA $6C        (Save updated address)
EE/896D:	18      	CLC            (Clear Carry for addition)
EE/896E:	A56A    	LDA $6A        (Low byte of address)
EE/8970:	6980    	ADC #$80       (Add 128)
EE/8972:	856A    	STA $6A        (Save changes)
EE/8974:	A56B    	LDA $6B        (Middle byte of address)
EE/8976:	6901    	ADC #$01       (Add one, or two if an overflow occurred)
EE/8978:	856B    	STA $6B        (Save changes)
EE/897A:	A56C    	LDA $6C        (High byte of address)
EE/897C:	69D5    	ADC #$D5       (Add #$D5, or #$D6 if an overflow occurred)
EE/897E:	856C    	STA $6C        (Save changes; D5/0180+X)
EE/8980:	A980    	LDA #$80
EE/8982:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/8985:	C220    	REP #$20       (16-bit A)
EE/8987:	A9C06A  	LDA #$6AC0
EE/898A:	8D1621  	STA $2116      (Set VRAM pointer to $D580)
EE/898D:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/8990:	B76A    	LDA [$6A],Y
EE/8992:	8D1821  	STA $2118      (VRAM data write)
EE/8995:	C8      	INY
EE/8996:	C8      	INY
EE/8997:	C04000  	CPY #$0040
EE/899A:	D0F4    	BNE $8990      (Loop if not)
EE/899C:	A9C06B  	LDA #$6BC0
EE/899F:	8D1621  	STA $2116      (Set VRAM pointer to $D780)
EE/89A2:	A0C000  	LDY #$00C0
EE/89A5:	B76A    	LDA [$6A],Y
EE/89A7:	8D1821  	STA $2118      (VRAM data write)
EE/89AA:	C8      	INY
EE/89AB:	C8      	INY
EE/89AC:	C00001  	CPY #$0100
EE/89AF:	D0F4    	BNE $89A5      (Loop if not)
EE/89B1:	E220    	SEP #$20       (8-bit A)
EE/89B3:	8B      	PHB            (Save data bank)
EE/89B4:	A9E6    	LDA #$E6
EE/89B6:	48      	PHA
EE/89B7:	AB      	PLB            (Set data bank to E6) (This could have waited...)
EE/89B8:	A900    	LDA #$00       (TDC...)
EE/89BA:	EB      	XBA            (Exchange B and A)
EE/89BB:	AFFC1100	LDA $0011FC    (Palette number for map character)
EE/89BF:	2907    	AND #$07       (0 to 7)
EE/89C1:	0A      	ASL A          (Multiply by 2)
EE/89C2:	0A      	ASL A          (Multiply by 4)
EE/89C3:	0A      	ASL A          (Multiply by 8)
EE/89C4:	0A      	ASL A          (Multiply by 16)
EE/89C5:	0A      	ASL A          (Multiply by 32)
EE/89C6:	A8      	TAY            (Set palette index)
EE/89C7:	A20000  	LDX #$0000     (Zero X)
EE/89CA:	C220    	REP #$20       (16-bit A)
EE/89CC:	B90080  	LDA $8000,Y    (Load character palette)
EE/89CF:	9F40E17E	STA $7EE140,X  (Save in RAM)
EE/89D3:	C8      	INY
EE/89D4:	C8      	INY            (Point to next color in the ROM)
EE/89D5:	E8      	INX
EE/89D6:	E8      	INX            (Point to next color in RAM)
EE/89D7:	E02000  	CPX #$0020     (Copied the entire palette?)
EE/89DA:	D0F0    	BNE $89CC      (Loop if not)
EE/89DC:	AB      	PLB            (Restore bank)
EE/89DD:	4C4691  	JMP $9146      (Set NMI and IRQ locations, then jump to EE/0018)

Character mode initialization
EE/89E0:	E220    	SEP #$20       (8-bit A)
EE/89E2:	C210    	REP #$10       (16-bit indexes)
EE/89E4:	A980    	LDA #$80
EE/89E6:	8D0021  	STA $2100      (Disable screen)
EE/89E9:	208C90  	JSR $908C      (Move #$06E0 bytes from 7E/0520 to 00/F120)
EE/89EC:	20AF8F  	JSR $8FAF      (Initialize various registers)
EE/89EF:	A910    	LDA #$10
EE/89F1:	8D0013  	STA $1300
EE/89F4:	A9FF    	LDA #$FF
EE/89F6:	8D0213  	STA $1302      (Set volume to maximum)
EE/89F9:	ADB91E  	LDA $1EB9      (Event bits)
EE/89FC:	8910    	BIT #$10       (Overriding map song?)
EE/89FE:	D028    	BNE $8A28      (Branch if so)
EE/8A00:	ADB71E  	LDA $1EB7      (Event bits)
EE/8A03:	8908    	BIT #$08       (Veldt area?)
EE/8A05:	F004    	BEQ $8A0B      (Branch if not)
EE/8A07:	A919    	LDA #$19       (Song number for "Wild West")
EE/8A09:	8015    	BRA $8A20      (Skip the following song-selection segment)
EE/8A0B:	7B      	TDC            (Zero A)
EE/8A0C:	EB      	XBA            (...)
EE/8A0D:	AD641F  	LDA $1F64      (Map number from SRAM, low byte)
EE/8A10:	2903    	AND #$03       (We only care about world maps... and the Serpent Trench)
EE/8A12:	0A      	ASL A          (Multiply by 2)
EE/8A13:	AA      	TAX            (Set as song index)
EE/8A14:	ADB71E  	LDA $1EB7      (Event bits)
EE/8A17:	8901    	BIT #$01       (Is the "alternate overworld music" bit set?)
EE/8A19:	F001    	BEQ $8A1C      (Branch if not) (LSR A, BCC...)
EE/8A1B:	E8      	INX            (Increase song index)
EE/8A1C:	BF9183EE	LDA $EE8391,X  (Song number)
EE/8A20:	8D801F  	STA $1F80      (Save in SRAM)
EE/8A23:	8D0113  	STA $1301      (Set song) (BRA $8A2B...)
EE/8A26:	8006    	BRA $8A2E      (Skip next two instructions)
EE/8A28:	AD801F  	LDA $1F80      (Song number in SRAM variables)
EE/8A2B:	8D0113  	STA $1301      (Set song)
EE/8A2E:	220400C5	JSL $C50004    (Play a new song if it doesn't match the current one playing)
EE/8A32:	C220    	REP #$20       (16-bit A)
EE/8A34:	6408    	STZ $08        (Clear controller 1 bits for buttons that just got pressed)
EE/8A36:	AF601F00	LDA $001F60    (Coordinates from SRAM) ($1F60...)
EE/8A3A:	E220    	SEP #$20       (8-bit A)
EE/8A3C:	85E0    	STA $E0        (Set X position in tiles)
EE/8A3E:	EB      	XBA            (Exchange B and A)
EE/8A3F:	85E2    	STA $E2        (Set Y position in tiles)
EE/8A41:	C220    	REP #$20       (16-bit A)
EE/8A43:	A5DF    	LDA $DF        (Current X position in tiles and as a fraction of a tile)
EE/8A45:	4A      	LSR A          (Divide by 2)
EE/8A46:	4A      	LSR A          (Divide by 4)
EE/8A47:	4A      	LSR A          (Divide by 8)
EE/8A48:	4A      	LSR A          (Divide by 16)
EE/8A49:	8534    	STA $34        (Set X position in pixels)
EE/8A4B:	A5E1    	LDA $E1        (Current Y position in tiles and as a fraction of a tile)
EE/8A4D:	4A      	LSR A          (Divide by 2)
EE/8A4E:	4A      	LSR A          (Divide by 4)
EE/8A4F:	4A      	LSR A          (Divide by 8)
EE/8A50:	4A      	LSR A          (Divide by 16)
EE/8A51:	8538    	STA $38        (Set Y position in pixels)
EE/8A53:	E220    	SEP #$20       (8-bit A)
EE/8A55:	8B      	PHB            (Save data bank)
EE/8A56:	A97E    	LDA #$7E
EE/8A58:	48      	PHA
EE/8A59:	AB      	PLB            (Set data bank to 7E)
EE/8A5A:	AF641F00	LDA $001F64    (Map number from SRAM, low byte) (LDX $00, TXY, LDA $1F64, BEQ $8A6D...)
EE/8A5E:	D005    	BNE $8A65      (Branch if not WoB)
EE/8A60:	A20000  	LDX #$0000     (Point to WoB palettes) ($00...)
EE/8A63:	8005    	BRA $8A6A      (Skip next two instructions)
EE/8A65:	A20001  	LDX #$0100     (Point to WoR palettes)
EE/8A68:	85D2    	STA $D2        (Useless...)
EE/8A6A:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/8A6D:	C220    	REP #$20       (16-bit A)
EE/8A6F:	BF00ECD2	LDA $D2EC00,X  (Overworld map palettes)
EE/8A73:	9900E0  	STA $E000,Y    (Save in RAM)
EE/8A76:	C8      	INY
EE/8A77:	C8      	INY            (Point to next color in RAM)
EE/8A78:	E8      	INX
EE/8A79:	E8      	INX            (Point to next color in ROM)
EE/8A7A:	C00001  	CPY #$0100     (Copied all colors?)
EE/8A7D:	D0F0    	BNE $8A6F      (Loop if not)
EE/8A7F:	E220    	SEP #$20       (8-bit A)
EE/8A81:	AF641F00	LDA $001F64    (Map number from SRAM, low byte) ($1F64...)
EE/8A85:	D005    	BNE $8A8C      (Branch if not WoB)
EE/8A87:	A20002  	LDX #$0200     (Point to WoB palettes)
EE/8A8A:	8003    	BRA $8A8F      (Skip next instruction)
EE/8A8C:	A20003  	LDX #$0300     (Point to WoR palettes)
EE/8A8F:	A00000  	LDY #$0000     (Zero Y) ($00...)
EE/8A92:	C220    	REP #$20       (16-bit A)
EE/8A94:	BF00ECD2	LDA $D2EC00,X  (Overworld object palettes)
EE/8A98:	9900E1  	STA $E100,Y    (Save in RAM)
EE/8A9B:	C8      	INY
EE/8A9C:	C8      	INY            (Point to next color in RAM)
EE/8A9D:	E8      	INX
EE/8A9E:	E8      	INX            (Point to next color in ROM)
EE/8A9F:	C00001  	CPY #$0100     (Copied all colors?)
EE/8AA2:	D0F0    	BNE $8A94      (Loop if not)
EE/8AA4:	AB      	PLB            (Restore data bank)
EE/8AA5:	E220    	SEP #$20       (8-bit A)
EE/8AA7:	AF42B2EE	LDA $EEB242    (Pointer to shadow and gradient overlay graphics, low byte)
EE/8AAB:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8AAD:	AF43B2EE	LDA $EEB243    (Pointer to shadow and gradient overlay graphics, middle byte)
EE/8AB1:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8AB3:	AF44B2EE	LDA $EEB244    (Pointer to shadow and gradient overlay graphics, high byte)
EE/8AB7:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8AB9:	A20020  	LDX #$2000
EE/8ABC:	86D5    	STX $D5        (Destination address)
EE/8ABE:	A97E    	LDA #$7E
EE/8AC0:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/8AC2:	2076A4  	JSR $A476      (LZSS decompression)
EE/8AC5:	AF641F00	LDA $001F64    (Map number from SRAM, low byte) ($1F64...)
EE/8AC9:	D014    	BNE $8ADF      (Branch if not the World of Balance)
EE/8ACB:	AF0CB2EE	LDA $EEB20C    (Pointer to Blackjack graphics, low byte)
EE/8ACF:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8AD1:	AF0DB2EE	LDA $EEB20D    (Pointer to Blackjack graphics, middle byte)
EE/8AD5:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8AD7:	AF0EB2EE	LDA $EEB20E    (Pointer to Blackjack graphics, high byte)
EE/8ADB:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8ADD:	8012    	BRA $8AF1      (Skip the code for the Falcon)
EE/8ADF:	AF51B2EE	LDA $EEB251    (Pointer to Falcon graphics, low byte)
EE/8AE3:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8AE5:	AF52B2EE	LDA $EEB252    (Pointer to Falcon graphics, middle byte)
EE/8AE9:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8AEB:	AF53B2EE	LDA $EEB253    (Pointer to Falcon graphics, high byte)
EE/8AEF:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8AF1:	A20028  	LDX #$2800
EE/8AF4:	86D5    	STX $D5        (Destination address)
EE/8AF6:	A97E    	LDA #$7E
EE/8AF8:	85D7    	STA $D7        (Destination bank; 7E/2800)
EE/8AFA:	2076A4  	JSR $A476      (LZSS decompression)
EE/8AFD:	AF641F00	LDA $001F64    (Map number from SRAM, low byte) ($1F64...)
EE/8B01:	D014    	BNE $8B17      (Branch if not the World of Balance)
EE/8B03:	AF4BB2EE	LDA $EEB24B    (Pointer to WoB minimap graphics, low byte)
EE/8B07:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8B09:	AF4CB2EE	LDA $EEB24C    (Pointer to WoB minimap graphics, middle byte)
EE/8B0D:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8B0F:	AF4DB2EE	LDA $EEB24D    (Pointer to WoB minimap graphics, high byte)
EE/8B13:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8B15:	8012    	BRA $8B29      (Skip code for World of Ruin)
EE/8B17:	AF4EB2EE	LDA $EEB24E    (Pointer to WoR minimap graphics, low byte)
EE/8B1B:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8B1D:	AF4FB2EE	LDA $EEB24F    (Pointer to WoR minimap graphics, middle byte)
EE/8B21:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8B23:	AF50B2EE	LDA $EEB250    (Pointer to WoR minimap graphics, high byte)
EE/8B27:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8B29:	A20040  	LDX #$4000
EE/8B2C:	86D5    	STX $D5        (Destination address)
EE/8B2E:	A97E    	LDA #$7E
EE/8B30:	85D7    	STA $D7        (Destination bank; 7E/4000)
EE/8B32:	2076A4  	JSR $A476      (LZSS decompression)
EE/8B35:	20F19A  	JSR $9AF1      (Removal of Sealed Gate area from minimap)
EE/8B38:	AF45B2EE	LDA $EEB245    (Pointer to miscellaneous sprites, low byte)
EE/8B3C:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8B3E:	AF46B2EE	LDA $EEB246    (Pointer to miscellaneous sprites, middle byte)
EE/8B42:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8B44:	AF47B2EE	LDA $EEB247    (Pointer to miscellaneous sprites, high byte)
EE/8B48:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8B4A:	A20048  	LDX #$4800
EE/8B4D:	86D5    	STX $D5        (Destination address)
EE/8B4F:	A97E    	LDA #$7E
EE/8B51:	85D7    	STA $D7        (Destination bank; 7E/4800)
EE/8B53:	2076A4  	JSR $A476      (LZSS decompression)
EE/8B56:	20D0AD  	JSR $ADD0      (Transfer decompressed sprites to VRAM)
EE/8B59:	ADF611  	LDA $11F6
EE/8B5C:	8908    	BIT #$08       (Is the "don't reload map tiles" bit set?)
EE/8B5E:	F007    	BEQ $8B67      (Branch if not)
EE/8B60:	29F7    	AND #$F7       (Clear said bit)
EE/8B62:	8DF611  	STA $11F6      (Save changes)
EE/8B65:	803E    	BRA $8BA5      (Bypass tile graphic updating)
EE/8B67:	AF641F00	LDA $001F64    (Map number from SRAM, low byte) ($1F64...)
EE/8B6B:	D014    	BNE $8B81      (Branch if not the World of Balance)
EE/8B6D:	AF12B2EE	LDA $EEB212    (Pointer to WoB tile graphics, low byte)
EE/8B71:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8B73:	AF13B2EE	LDA $EEB213    (Pointer to WoB tile graphics, middle byte)
EE/8B77:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8B79:	AF14B2EE	LDA $EEB214    (Pointer to WoB tile graphics, high byte)
EE/8B7D:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8B7F:	8012    	BRA $8B93      (Skip code for World of Ruin)
EE/8B81:	AF1EB2EE	LDA $EEB21E    (Pointer to WoR tile graphics, low byte)
EE/8B85:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8B87:	AF1FB2EE	LDA $EEB21F    (Pointer to WoR tile graphics, middle byte)
EE/8B8B:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8B8D:	AF20B2EE	LDA $EEB220    (Pointer to WoR tile graphics, high byte)
EE/8B91:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8B93:	A2506F  	LDX #$6F50
EE/8B96:	86D5    	STX $D5        (Destination address)
EE/8B98:	A97E    	LDA #$7E
EE/8B9A:	85D7    	STA $D7        (Destination bank; 7E/6F50)
EE/8B9C:	2076A4  	JSR $A476      (LZSS decompression)
EE/8B9F:	204F3F  	JSR $3F4F
EE/8BA2:	2075AE  	JSR $AE75      (Transfer water tiles)
EE/8BA5:	ADF611  	LDA $11F6
EE/8BA8:	8904    	BIT #$04       (Is the "don't reload tilemap" bit set?)
EE/8BAA:	F007    	BEQ $8BB3      (Branch if not)
EE/8BAC:	29FB    	AND #$FB       (Clear said bit)
EE/8BAE:	8DF611  	STA $11F6      (Save changes)
EE/8BB1:	803B    	BRA $8BEE      (Bypass tilemap updating)
EE/8BB3:	AF641F00	LDA $001F64    (Map number from SRAM, low byte) ($1F64...)
EE/8BB7:	D014    	BNE $8BCD      (Branch if not the World of Balance)
EE/8BB9:	AF0FB2EE	LDA $EEB20F    (Pointer to WoB tilemap, low byte)
EE/8BBD:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8BBF:	AF10B2EE	LDA $EEB210    (Pointer to WoB tilemap, middle byte)
EE/8BC3:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8BC5:	AF11B2EE	LDA $EEB211    (Pointer to WoB tilemap, high byte)
EE/8BC9:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8BCB:	8012    	BRA $8BDF      (Skip code for World of Ruin)
EE/8BCD:	AF24B2EE	LDA $EEB224    (Pointer to WoR tilemap, low byte)
EE/8BD1:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8BD3:	AF25B2EE	LDA $EEB225    (Pointer to WoR tilemap, middle byte)
EE/8BD7:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8BD9:	AF26B2EE	LDA $EEB226    (Pointer to WoR tilemap, high byte)
EE/8BDD:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8BDF:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/8BE2:	86D5    	STX $D5        (Destination address)
EE/8BE4:	A97F    	LDA #$7F
EE/8BE6:	85D7    	STA $D7        (Destination bank; 7F/0000)
EE/8BE8:	2076A4  	JSR $A476      (LZSS decompression)
EE/8BEB:	202F94  	JSR $942F      (Redraw portions of world map if conditions are met)
EE/8BEE:	20D534  	JSR $34D5      (Generate 32x32 world map for VRAM...?)
EE/8BF1:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/8BF4:	BF00E17E	LDA $7EE100,X  (Load color data from flying airship's palette)
EE/8BF8:	9F20E17E	STA $7EE120,X  (Save to palette for landed airship)
EE/8BFC:	BF01E17E	LDA $7EE101,X  (Load color data from flying airship's palette) (Inefficient...)
EE/8C00:	9F21E17E	STA $7EE121,X  (Save to palette for landed airship)
EE/8C04:	BF02E17E	LDA $7EE102,X  (Load color data from flying airship's palette)
EE/8C08:	9F22E17E	STA $7EE122,X  (Save to palette for landed airship)
EE/8C0C:	BF03E17E	LDA $7EE103,X  (Load color data from flying airship's palette)
EE/8C10:	9F23E17E	STA $7EE123,X  (Save to palette for landed airship)
EE/8C14:	E8      	INX
EE/8C15:	E8      	INX
EE/8C16:	E8      	INX
EE/8C17:	E8      	INX            (Point to next two colors of each palette)
EE/8C18:	E02000  	CPX #$0020     (Copied the entire palette?)
EE/8C1B:	D0D7    	BNE $8BF4      (Loop if not)
EE/8C1D:	AF641F00	LDA $001F64    (Map number and flags in SRAM variables) ($1F64...)
EE/8C21:	85F4    	STA $F4        (Save as current map, including flags)
EE/8C23:	E220    	SEP #$20       (8-bit A)
EE/8C25:	7B      	TDC            (Zero A)
EE/8C26:	EB      	XBA            (...)
EE/8C27:	AD681F  	LDA $1F68      (Direction from SRAM)
EE/8C2A:	85F6    	STA $F6        (Save as current direction)
EE/8C2C:	0A      	ASL A          (Multiply by 2)
EE/8C2D:	0A      	ASL A          (Multiply by 4)
EE/8C2E:	AA      	TAX            (Transfer A to X)
EE/8C2F:	BF4248EE	LDA $EE4842,X  (Sprites for walking positions)
EE/8C33:	85F7    	STA $F7        (Set leader's pose)
EE/8C35:	A903    	LDA #$03
EE/8C37:	85CA    	STA $CA        (This will draw the leader and landed airship)
EE/8C39:	A903    	LDA #$03       (...)
EE/8C3B:	8520    	STA $20        (Set character mode)
EE/8C3D:	A980    	LDA #$80
EE/8C3F:	857B    	STA $7B
EE/8C41:	A970    	LDA #$70
EE/8C43:	857D    	STA $7D
EE/8C45:	4C8191  	JMP $9181

Mine-cart sequence initialization
EE/8C48:	E220    	SEP #$20       (8-bit A)
EE/8C4A:	C210    	REP #$10       (16-bit indexes)
EE/8C4C:	A980    	LDA #$80
EE/8C4E:	8D0021  	STA $2100      (Disable screen)
EE/8C51:	20AF8F  	JSR $8FAF      (Initialize various registers)
EE/8C54:	6473    	STZ $73        (Zero low byte of vehicle height...?)
EE/8C56:	6474    	STZ $74        (Zero high byte of vehicle height...?)
EE/8C58:	ADF611  	LDA $11F6
EE/8C5B:	8902    	BIT #$02       (Returning from battle?)
EE/8C5D:	F00C    	BEQ $8C6B      (Branch if not)
EE/8C5F:	20FC90  	JSR $90FC      (Copy 256 bytes from $0A00 to $0000)
EE/8C62:	A534    	LDA $34        (Current X position in pixels...?)
EE/8C64:	38      	SEC            (Set Carry for subtraction)
EE/8C65:	E905    	SBC #$05       (Subtract 5)
EE/8C67:	8534    	STA $34        (Save changes)
EE/8C69:	8003    	BRA $8C6E      (Skip next instruction)
EE/8C6B:	208C90  	JSR $908C      (Move #$06E0 bytes from 7E/0520 to 00/F120)
EE/8C6E:	A910    	LDA #$10
EE/8C70:	8D0013  	STA $1300
EE/8C73:	AF9583EE	LDA $EE8395    (Song number, "Save Them!") (LDA #$1A...)
EE/8C77:	8D0113  	STA $1301      (Set song)
EE/8C7A:	A9FF    	LDA #$FF
EE/8C7C:	8D0213  	STA $1302      (Set volume to maximum)
EE/8C7F:	220400C5	JSL $C50004    (Play song)
EE/8C83:	E220    	SEP #$20       (8-bit A)
EE/8C85:	AF1BB2EE	LDA $EEB21B    (Pointer to mine-cart palettes, low byte)
EE/8C89:	856A    	STA $6A        (Save in RAM)
EE/8C8B:	AF1CB2EE	LDA $EEB21C    (Pointer to mine-cart palettes, middle byte)
EE/8C8F:	856B    	STA $6B        (Save in RAM)
EE/8C91:	AF1DB2EE	LDA $EEB21D    (Pointer to mine-cart palettes, high byte)
EE/8C95:	856C    	STA $6C        (Save in RAM)
EE/8C97:	2042AD  	JSR $AD42      (Transfer palettes to RAM and CGRAM)
EE/8C9A:	AF0CB2EE	LDA $EEB20C    (Pointer to Blackjack graphics, low byte)
EE/8C9E:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8CA0:	AF0DB2EE	LDA $EEB20D    (Pointer to Blackjack graphics, middle byte)
EE/8CA4:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8CA6:	AF0EB2EE	LDA $EEB20E    (Pointer to Blackjack graphics, high byte)
EE/8CAA:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8CAC:	A20020  	LDX #$2000
EE/8CAF:	86D5    	STX $D5        (Destination address)
EE/8CB1:	A97E    	LDA #$7E
EE/8CB3:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/8CB5:	2076A4  	JSR $A476      (LZSS decompression)
EE/8CB8:	20D0AD  	JSR $ADD0      (Transfer decompressed sprites to VRAM)
EE/8CBB:	AF15B2EE	LDA $EEB215    (Pointer to mine cart graphics, low byte)
EE/8CBF:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8CC1:	AF16B2EE	LDA $EEB216    (Pointer to mine cart graphics, middle byte)
EE/8CC5:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8CC7:	AF17B2EE	LDA $EEB217    (Pointer to mine cart graphics, high byte)
EE/8CCB:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8CCD:	A200A0  	LDX #$A000
EE/8CD0:	86D5    	STX $D5        (Destination address)
EE/8CD2:	A97E    	LDA #$7E
EE/8CD4:	85D7    	STA $D7        (Destination bank; 7E/A000)
EE/8CD6:	2076A4  	JSR $A476      (LZSS decompression)
EE/8CD9:	20059A  	JSR $9A05
EE/8CDC:	A200DD  	LDX #$DD00
EE/8CDF:	866A    	STX $6A        (Save source address temporarily)
EE/8CE1:	A9D8    	LDA #$D8
EE/8CE3:	856C    	STA $6C        (Save source bank temporarily; D8/DD00)
EE/8CE5:	2029AE  	JSR $AE29      (VRAM-related function)
EE/8CE8:	20F8AD  	JSR $ADF8      (VRAM-related function)
EE/8CEB:	A20818  	LDX #$1808
EE/8CEE:	8E0043  	STX $4300      (Control for DMA channel 0; fixed transfer, set destination to $2118: VRAM)
EE/8CF1:	A25800  	LDX #$0058
EE/8CF4:	8E0243  	STX $4302      (Source address)
EE/8CF7:	A900    	LDA #$00
EE/8CF9:	8D0443  	STA $4304      (Source bank; 00/0058)
EE/8CFC:	A20040  	LDX #$4000
EE/8CFF:	8E0543  	STX $4305      (Number of bytes: #$4000)
EE/8D02:	6458    	STZ $58        (Zero $58, which will serve to clear VRAM)
EE/8D04:	9C1521  	STZ $2115      (VRAM pointer increases by a word when $2118 or $2139 is accessed)
EE/8D07:	9C1621  	STZ $2116      (VRAM pointer, low byte)
EE/8D0A:	9C1721  	STZ $2117      (VRAM pointer, high byte; $0000)
EE/8D0D:	A901    	LDA #$01
EE/8D0F:	8D0B42  	STA $420B      (Enable DMA channel 0; clears $0000-4000 in VRAM)
EE/8D12:	C230    	REP #$30       (16-bit A and indexes)
EE/8D14:	A536    	LDA $36
EE/8D16:	292000  	AND #$0020
EE/8D19:	48      	PHA            (Save A)
EE/8D1A:	8558    	STA $58
EE/8D1C:	A534    	LDA $34        (Current X position in pixels...?)
EE/8D1E:	8564    	STA $64
EE/8D20:	20F525  	JSR $25F5      (Move data and set mine cart command)
EE/8D23:	A534    	LDA $34        (Current X position in pixels...?)
EE/8D25:	18      	CLC            (Clear Carry for addition)
EE/8D26:	690500  	ADC #$0005     (Add 5)
EE/8D29:	8534    	STA $34        (Save changes)
EE/8D2B:	68      	PLA            (Restore A)
EE/8D2C:	8558    	STA $58
EE/8D2E:	A92000  	LDA #$0020
EE/8D31:	38      	SEC            (Set Carry for subtraction)
EE/8D32:	E558    	SBC $58
EE/8D34:	8558    	STA $58
EE/8D36:	A534    	LDA $34        (Current X position in pixels...?)
EE/8D38:	8564    	STA $64
EE/8D3A:	20F525  	JSR $25F5      (Move data and set mine cart command)
EE/8D3D:	A534    	LDA $34        (Current X position in pixels...?)
EE/8D3F:	18      	CLC            (Clear Carry for addition)
EE/8D40:	690500  	ADC #$0005     (Add 5)
EE/8D43:	8534    	STA $34        (Save changes)
EE/8D45:	4CA891  	JMP $91A8

Serpent Trench initialization
EE/8D48:	E220    	SEP #$20       (8-bit A)
EE/8D4A:	C210    	REP #$10       (16-bit indexes)
EE/8D4C:	A980    	LDA #$80
EE/8D4E:	8D0021  	STA $2100      (Disable screen)
EE/8D51:	20AF8F  	JSR $8FAF      (Initialize various registers)
EE/8D54:	ADF611  	LDA $11F6
EE/8D57:	8902    	BIT #$02       (Returning from battle?)
EE/8D59:	F00B    	BEQ $8D66      (Branch if not)
EE/8D5B:	20FC90  	JSR $90FC      (Copy 256 bytes from $0A00 to $0000)
EE/8D5E:	6423    	STZ $23        (Start from a blank screen)
EE/8D60:	A90F    	LDA #$0F
EE/8D62:	8522    	STA $22        (Set screen to reach full brightness)
EE/8D64:	8027    	BRA $8D8D      (Skip code for non-battle situations)
EE/8D66:	208C90  	JSR $908C      (Move #$06E0 bytes from 7E/0520 to 00/F120)
EE/8D69:	C220    	REP #$20       (16-bit A)
EE/8D6B:	AD601F  	LDA $1F60      (Coordinates from SRAM)
EE/8D6E:	4A      	LSR A          (Divide by 2)
EE/8D6F:	4A      	LSR A          (Divide by 4)
EE/8D70:	4A      	LSR A          (Divide by 8)
EE/8D71:	4A      	LSR A          (Divide by 16)
EE/8D72:	29F00F  	AND #$0FF0     (Finalize conversion)
EE/8D75:	8538    	STA $38        (Set Y position in pixels)
EE/8D77:	AD601F  	LDA $1F60      (Coordinates from SRAM)
EE/8D7A:	0A      	ASL A          (Multiply by 2)
EE/8D7B:	0A      	ASL A          (Multiply by 4)
EE/8D7C:	0A      	ASL A          (Multiply by 8)
EE/8D7D:	0A      	ASL A          (Multiply by 16)
EE/8D7E:	29F00F  	AND #$0FF0     (Finalize conversion)
EE/8D81:	8534    	STA $34        (Set X position in pixels)
EE/8D83:	E220    	SEP #$20       (8-bit A)
EE/8D85:	A980    	LDA #$80
EE/8D87:	857B    	STA $7B
EE/8D89:	A9D0    	LDA #$D0
EE/8D8B:	857D    	STA $7D
EE/8D8D:	A904    	LDA #$04
EE/8D8F:	85CA    	STA $CA        (Mark flashing arrows to be drawn)
EE/8D91:	A904    	LDA #$04       (...)
EE/8D93:	8520    	STA $20        (Set Serpent Trench mode)
EE/8D95:	ADB91E  	LDA $1EB9      (Event bits)
EE/8D98:	8910    	BIT #$10       (Map song override?)
EE/8D9A:	D023    	BNE $8DBF      (Branch if so)
EE/8D9C:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/8D9F:	A910    	LDA #$10
EE/8DA1:	8D0013  	STA $1300
EE/8DA4:	ADB71E  	LDA $1EB7      (Event bits) (Pointless...)
EE/8DA7:	8901    	BIT #$01       (Play alternate overworld music?) (Pointless...)
EE/8DA9:	F001    	BEQ $8DAC      (Branch if not) (LSR A, BCC...) (Pointless...)
EE/8DAB:	E8      	INX            (Increase song index) (Pointless...)
EE/8DAC:	BF9783EE	LDA $EE8397,X  (Song number for "The Serpent Trench")
EE/8DB0:	8D801F  	STA $1F80      (Save in SRAM variables)
EE/8DB3:	8D0113  	STA $1301      (Set song)
EE/8DB6:	A9FF    	LDA #$FF
EE/8DB8:	8D0213  	STA $1302      (Set volume to maximum)
EE/8DBB:	220400C5	JSL $C50004    (Play song)
EE/8DBF:	A9A3    	LDA #$A3
EE/8DC1:	8D3121  	STA $2131      (Enable color math for BG1, BG2, and backdrop; subtract colors)
EE/8DC4:	E220    	SEP #$20       (8-bit A)
EE/8DC6:	7B      	TDC            (Zero A) (Do so before SEP...)
EE/8DC7:	8F00207E	STA $7E2000    (Zero $2000, which will serve to clear VRAM)
EE/8DCB:	8F01207E	STA $7E2001    (Zero the high byte)
EE/8DCF:	A980    	LDA #$80
EE/8DD1:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/8DD4:	A20050  	LDX #$5000
EE/8DD7:	8E1621  	STX $2116      (Set VRAM pointer to $A000)
EE/8DDA:	A20918  	LDX #$1809
EE/8DDD:	8E0043  	STX $4300      (Control for DMA channel 0; fixed transfer, set destination to $2118: VRAM)
EE/8DE0:	A20020  	LDX #$2000
EE/8DE3:	8E0243  	STX $4302      (Source address)
EE/8DE6:	A97E    	LDA #$7E
EE/8DE8:	8D0443  	STA $4304      (Source bank; 7E/2000)
EE/8DEB:	A20040  	LDX #$4000
EE/8DEE:	8E0543  	STX $4305      (Number of bytes: #$4000)
EE/8DF1:	A901    	LDA #$01
EE/8DF3:	8D0B42  	STA $420B      (Enable DMA channel 0; clears $A000-$DFFF in VRAM)
EE/8DF6:	A980    	LDA #$80
EE/8DF8:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/8DFB:	A20044  	LDX #$4400
EE/8DFE:	8E1621  	STX $2116      (Set VRAM pointer to $8800)
EE/8E01:	A20918  	LDX #$1809
EE/8E04:	8E0043  	STX $4300      (Control for DMA channel 0; fixed transfer, set destination to $2118: VRAM)
EE/8E07:	A20020  	LDX #$2000
EE/8E0A:	8E0243  	STX $4302      (Source address)
EE/8E0D:	A97E    	LDA #$7E
EE/8E0F:	8D0443  	STA $4304      (Source bank; 7E/2000)
EE/8E12:	A20010  	LDX #$1000
EE/8E15:	8E0543  	STX $4305      (Number of bytes: #$1000)
EE/8E18:	A901    	LDA #$01
EE/8E1A:	8D0B42  	STA $420B      (Enable DMA channel 0; clears $8800-$97FF in VRAM)
EE/8E1D:	A2BAE6  	LDX #$E6BA
EE/8E20:	86D2    	STX $D2        (Source address)
EE/8E22:	A9D8    	LDA #$D8
EE/8E24:	85D4    	STA $D3        (Source bank; D8/E6BA, Serpent Trench map and arrow palettes)
EE/8E26:	A200E0  	LDX #$E000
EE/8E29:	86D5    	STX $D5        (Destination address)
EE/8E2B:	A97E    	LDA #$7E
EE/8E2D:	85D7    	STA $D7        (Destination bank; 7E/E000)
EE/8E2F:	2076A4  	JSR $A476      (LZSS decompression)
EE/8E32:	AF42B2EE	LDA $EEB242    (Pointer to shadow and gradient overlay graphics, low byte)
EE/8E36:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8E38:	AF43B2EE	LDA $EEB243    (Pointer to shadow and gradient overlay graphics, middle byte)
EE/8E3C:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8E3E:	AF44B2EE	LDA $EEB244    (Pointer to shadow and gradient overlay graphics, high byte)
EE/8E42:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8E44:	A20020  	LDX #$2000
EE/8E47:	86D5    	STX $D5        (Destination address)
EE/8E49:	A97E    	LDA #$7E
EE/8E4B:	85D7    	STA $D7        (Destination bank; 7E/2000)
EE/8E4D:	2076A4  	JSR $A476      (LZSS decompression)
EE/8E50:	AF0CB2EE	LDA $EEB20C    (Pointer to Blackjack graphics, low byte)
EE/8E54:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8E56:	AF0DB2EE	LDA $EEB20D    (Pointer to Blackjack graphics, middle byte)
EE/8E5A:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8E5C:	AF0EB2EE	LDA $EEB20E    (Pointer to Blackjack graphics, high byte)
EE/8E60:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8E62:	A20028  	LDX #$2800
EE/8E65:	86D5    	STX $D5        (Destination address)
EE/8E67:	A97E    	LDA #$7E
EE/8E69:	85D7    	STA $D7        (Destination bank; 7E/2800)
EE/8E6B:	2076A4  	JSR $A476      (LZSS decompression)
EE/8E6E:	AF45B2EE	LDA $EEB245    (Pointer to miscellaneous sprites, low byte)
EE/8E72:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8E74:	AF46B2EE	LDA $EEB246    (Pointer to miscellaneous sprites, middle byte)
EE/8E78:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8E7A:	AF47B2EE	LDA $EEB247    (Pointer to miscellaneous sprites, middle byte)
EE/8E7E:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8E80:	A20048  	LDX #$4800
EE/8E83:	86D5    	STX $D5        (Destination address)
EE/8E85:	A97E    	LDA #$7E
EE/8E87:	85D7    	STA $D7        (Destination bank; 7E/4800)
EE/8E89:	2076A4  	JSR $A476      (LZSS decompression)
EE/8E8C:	20D0AD  	JSR $ADD0      (Transfer decompressed sprites to VRAM)
EE/8E8F:	AF2AB2EE	LDA $EEB22A    (Pointer to Serpent Trench tile graphics, low byte)
EE/8E93:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8E95:	AF2BB2EE	LDA $EEB22B    (Pointer to Serpent Trench tile graphics, middle byte)
EE/8E99:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8E9B:	AF2CB2EE	LDA $EEB22C    (Pointer to Serpent Trench tile graphics, high byte)
EE/8E9F:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8EA1:	A2506F  	LDX #$6F50
EE/8EA4:	86D5    	STX $D5        (Destination address)
EE/8EA6:	A97E    	LDA #$7E
EE/8EA8:	85D7    	STA $D7        (Destination bank; 7E/6F50)
EE/8EAA:	2076A4  	JSR $A476      (LZSS decompression)
EE/8EAD:	204F3F  	JSR $3F4F
EE/8EB0:	AF27B2EE	LDA $EEB227    (Pointer to Serpent Trench tilemap, low byte)
EE/8EB4:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8EB6:	AF28B2EE	LDA $EEB228    (Pointer to Serpent Trench tilemap, middle byte)
EE/8EBA:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8EBC:	AF29B2EE	LDA $EEB229    (Pointer to Serpent Trench tilemap, high byte)
EE/8EC0:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8EC2:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/8EC5:	86D5    	STX $D5        (Destination address)
EE/8EC7:	A97F    	LDA #$7F
EE/8EC9:	85D7    	STA $D7        (Destination bank; 7F/0000)
EE/8ECB:	2076A4  	JSR $A476      (LZSS decompression)
EE/8ECE:	20FA36  	JSR $36FA      (Generate 32x32 Serpent Trench map for VRAM...?)
EE/8ED1:	4C4691  	JMP $9146      (Set NMI and IRQ locations, then jump to EE/0018)

Airship scene from the ending
EE/8ED4:	E220    	SEP #$20       (8-bit A)
EE/8ED6:	C210    	REP #$10       (16-bit indexes)
EE/8ED8:	221800C3	JSL $C30018    (Jumps to C3/D57F)
EE/8EDC:	7B      	TDC            (Zero A)
EE/8EDD:	48      	PHA
EE/8EDE:	AB      	PLB            (Set data bank to 00)
EE/8EDF:	A980    	LDA #$80
EE/8EE1:	8D0021  	STA $2100      (Disable screen)
EE/8EE4:	20AF8F  	JSR $8FAF      (Initialize various registers)
EE/8EE7:	208C90  	JSR $908C      (Move #$06E0 bytes from 7E/0520 to 00/F120)
EE/8EEA:	E220    	SEP #$20       (8-bit A)
EE/8EEC:	A980    	LDA #$80
EE/8EEE:	857B    	STA $7B        (Variable used to determine BG1/Mode 7 BG horizontal scroll during NMI)
EE/8EF0:	A9D0    	LDA #$D0
EE/8EF2:	857D    	STA $7D        (Variable used to determine BG1/Mode 7 BG vertical scroll during NMI)
EE/8EF4:	A97E    	LDA #$7E
EE/8EF6:	48      	PHA
EE/8EF7:	AB      	PLB            (Set data bank to 7E)
EE/8EF8:	C220    	REP #$20       (16-bit A)
EE/8EFA:	A20003  	LDX #$0300     (Point to WoR palettes)
EE/8EFD:	A00000  	LDY #$0000     (Zero Y) ($00...)
EE/8F00:	BF00ECD2	LDA $D2EC00,X  (Overworld object palettes)
EE/8F04:	9900E1  	STA $E100,Y    (Save in RAM)
EE/8F07:	C8      	INY
EE/8F08:	C8      	INY            (Point to next color in RAM)
EE/8F09:	E8      	INX
EE/8F0A:	E8      	INX            (Point to next color in ROM)
EE/8F0B:	C00001  	CPY #$0100     (Copied 128 colors?)
EE/8F0E:	D0F0    	BNE $8F00      (Loop if not)
EE/8F10:	A20000  	LDX #$0000     (Start from first color) (LDX $00...)
EE/8F13:	BDC0E1  	LDA $E1C0,X    (Color)
EE/8F16:	9D40E1  	STA $E140,X
EE/8F19:	E8      	INX
EE/8F1A:	E8      	INX            (Point to next color)
EE/8F1B:	E02000  	CPX #$0020     (Copied the entire palette?)
EE/8F1E:	D0F3    	BNE $8F13      (Loop if not)
EE/8F20:	E220    	SEP #$20       (8-bit A)
EE/8F22:	AF54B2EE	LDA $EEB254    (Pointer to grassland palette, low byte)
EE/8F26:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8F28:	AF55B2EE	LDA $EEB255    (Pointer to grassland palette, middle byte)
EE/8F2C:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8F2E:	AF56B2EE	LDA $EEB256    (Pointer to grassland palette, high byte)
EE/8F32:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8F34:	C220    	REP #$20       (16-bit A)
EE/8F36:	A00000  	LDY #$0000     (Zero Y) (LDY $00...)
EE/8F39:	B7D2    	LDA [$D2],Y    (Grassland palette)
EE/8F3B:	9900E0  	STA $E000,Y    (Save in RAM)
EE/8F3E:	C8      	INY
EE/8F3F:	C8      	INY            (Point to next color)
EE/8F40:	C00001  	CPY #$0100     (Copied 128 colors?)
EE/8F43:	D0F4    	BNE $8F39      (Loop if not)
EE/8F45:	9C00E0  	STZ $E000      (Set first color to black)
EE/8F48:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/8F4B:	BD00E1  	LDA $E100,X    (Color)
EE/8F4E:	9D20E1  	STA $E120,X
EE/8F51:	E8      	INX
EE/8F52:	E8      	INX            (Point to next color)
EE/8F53:	E02000  	CPX #$0020     (Copied 16 colors?)
EE/8F56:	D0F3    	BNE $8F4B      (Loop if not)
EE/8F58:	E220    	SEP #$20       (8-bit A)
EE/8F5A:	7B      	TDC            (Zero A)
EE/8F5B:	48      	PHA
EE/8F5C:	AB      	PLB            (Set data bank to 00)
EE/8F5D:	AF51B2EE	LDA $EEB251    (Pointer to Falcon graphics, low byte)
EE/8F61:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8F63:	AF52B2EE	LDA $EEB252    (Pointer to Falcon graphics, middle byte)
EE/8F67:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8F69:	AF53B2EE	LDA $EEB253    (Pointer to Falcon graphics, high byte)
EE/8F6D:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8F6F:	A20028  	LDX #$2800
EE/8F72:	86D5    	STX $D5        (Destination address)
EE/8F74:	A97E    	LDA #$7E
EE/8F76:	85D7    	STA $D7        (Destination bank; 7E/2800)
EE/8F78:	2076A4  	JSR $A476      (LZSS decompression)
EE/8F7B:	AF45B2EE	LDA $EEB245    (Pointer to miscellaneous sprites, low byte)
EE/8F7F:	85D2    	STA $D2        (Set source for decompression, low byte)
EE/8F81:	AF46B2EE	LDA $EEB246    (Pointer to miscellaneous sprites, middle byte)
EE/8F85:	85D3    	STA $D3        (Set source for decompression, middle byte)
EE/8F87:	AF47B2EE	LDA $EEB247    (Pointer to miscellaneous sprites, high byte)
EE/8F8B:	85D4    	STA $D4        (Set source for decompression, high byte)
EE/8F8D:	A20048  	LDX #$4800
EE/8F90:	86D5    	STX $D5        (Destination address)
EE/8F92:	A97E    	LDA #$7E
EE/8F94:	85D7    	STA $D7        (Destination bank; 7E/4800)
EE/8F96:	2076A4  	JSR $A476      (LZSS decompression)
EE/8F99:	20D0AD  	JSR $ADD0      (Transfer decompressed sprites to VRAM)
EE/8F9C:	A95C    	LDA #$5C
EE/8F9E:	8D0015  	STA $1500      (Precede NMI address with JML opcode)
EE/8FA1:	A24DAB  	LDX #$AB4D
EE/8FA4:	8E0115  	STX $1501      (NMI address)
EE/8FA7:	A9EE    	LDA #$EE
EE/8FA9:	8D0315  	STA $1503      (NMI bank; EE/AB4D)
EE/8FAC:	4CBC0D  	JMP $0DBC

Initialize various registers
EE/8FAF:	7B      	TDC            (Zero A)
EE/8FB0:	48      	PHA
EE/8FB1:	AB      	PLB            (Set data bank to 00)
EE/8FB2:	8D0C42  	STA $420C      (Disable HDMA)
EE/8FB5:	A903    	LDA #$03
EE/8FB7:	8D0121  	STA $2101      (Set 8x8 and 16x16 sprite sizes, store character data to $C000 in VRAM)
EE/8FBA:	9C0221  	STZ $2102      (OAM address, low byte)
EE/8FBD:	9C0321  	STZ $2103      (OAM address MSB; OAM priority rotation)
EE/8FC0:	A907    	LDA #$07
EE/8FC2:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/8FC5:	A940    	LDA #$40
EE/8FC7:	9C0621  	STZ $2106      (Deactivate mosaic effect)
EE/8FCA:	8D0721  	STA $2107      (BG1 tilemap address and size)
EE/8FCD:	A945    	LDA #$45
EE/8FCF:	8D0821  	STA $2108      (BG2 tilemap address and size)
EE/8FD2:	A94C    	LDA #$4C
EE/8FD4:	8D0921  	STA $2109      (BG3 tilemap address and size)
EE/8FD7:	9C0A21  	STZ $210A      (BG4 tilemap address and size)
EE/8FDA:	A955    	LDA #$55
EE/8FDC:	8D0B21  	STA $210B
EE/8FDF:	9C0C21  	STZ $210C      (BG character data area designation)
EE/8FE2:	9C1121  	STZ $2111      (BG3 horizontal scroll, low byte)
EE/8FE5:	9C1121  	STZ $2111      (BG3 horizontal scroll, high byte; no scrolling)
EE/8FE8:	9C1221  	STZ $2112      (BG3 vertical scroll, low byte)
EE/8FEB:	9C1221  	STZ $2112      (BG3 vertical scroll, high byte; no scrolling)
EE/8FEE:	A980    	LDA #$80
EE/8FF0:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/8FF3:	9C1A21  	STZ $211A      (Mode 7 settings)
EE/8FF6:	A933    	LDA #$33
EE/8FF8:	8D2321  	STA $2123      (Window mask settings for BG1 and BG2)
EE/8FFB:	9C2421  	STZ $2124      (Window mask settings for BG3 and BG4)
EE/8FFE:	A933    	LDA #$33       (...)
EE/9000:	8D2521  	STA $2125      (Window mask settings for OBJ and color window)
EE/9003:	A908    	LDA #$08
EE/9005:	8D2621  	STA $2126      (Window 1 left position)
EE/9008:	A9F7    	LDA #$F7
EE/900A:	8D2721  	STA $2127      (Window 1 right position)
EE/900D:	9C2821  	STZ $2128      (Window 2 left position)
EE/9010:	9C2921  	STZ $2129      (Window 2 right position)
EE/9013:	9C2A21  	STZ $212A      (Window mask logic for BGs)
EE/9016:	9C2B21  	STZ $212B      (Window mask logic for OBJs and Color Window)
EE/9019:	A913    	LDA #$13
EE/901B:	8D2C21  	STA $212C      (Enable BG1, BG2, and sprites for main screen)
EE/901E:	A910    	LDA #$10
EE/9020:	8D2D21  	STA $212D      (Enable objects for subscreen)
EE/9023:	A913    	LDA #$13
EE/9025:	8D2E21  	STA $212E      (Enable window masking for BG1, BG2, and OBJ on main screen)
EE/9028:	A910    	LDA #$10
EE/902A:	8D2F21  	STA $212F      (Enable window masking for OBJ on subscreen)
EE/902D:	A902    	LDA #$02
EE/902F:	8D3021  	STA $2130      (Color addition select)
EE/9032:	A923    	LDA #$23
EE/9034:	8D3121  	STA $2131      (Enable color math for BG1, BG2, and backdrop)
EE/9037:	A9E0    	LDA #$E0
EE/9039:	8D3221  	STA $2132      (Fixed color data)
EE/903C:	9C3321  	STZ $2133      (Screen mode/video select)
EE/903F:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/9042:	A9FF    	LDA #$FF
EE/9044:	8D0142  	STA $4201      (Programmable I/O port)
EE/9047:	9C0242  	STZ $4202      (Zero multiplicand...)
EE/904A:	9C0342  	STZ $4203      (Zero multiplier...)
EE/904D:	9C0442  	STZ $4204      (Zero dividend, low byte...)
EE/9050:	9C0542  	STZ $4205      (Zero dividend, high byte...)
EE/9053:	9C0642  	STZ $4206      (Zero divisor...)
EE/9056:	9C0742  	STZ $4207      (Zero H-Count timer, low byte)
EE/9059:	9C0842  	STZ $4208      (Zero H-Count timer, high byte)
EE/905C:	9C0942  	STZ $4209      (Zero V-Count timer, low byte)
EE/905F:	9C0A42  	STZ $420A      (Zero V-Count timer, high byte)
EE/9062:	9C0B42  	STZ $420B      (Disable DMA)
EE/9065:	9C0C42  	STZ $420C      (Disable HDMA)
EE/9068:	8B      	PHB            (Save data bank)
EE/9069:	A97E    	LDA #$7E
EE/906B:	48      	PHA
EE/906C:	AB      	PLB            (Set data bank to 7E)
EE/906D:	C220    	REP #$20       (16-bit A)
EE/906F:	A20000  	LDX #$0000     (Start from $B5D0) (LDX $00...)
EE/9072:	9ED0B5  	STZ $B5D0,X    (Zero $B5D0+X)
EE/9075:	E8      	INX            (Point to next byte)
EE/9076:	E8      	INX            (Point to next byte)
EE/9077:	E08001  	CPX #$0180     (Pointing to $B750?)
EE/907A:	D0F6    	BNE $9072      (Loop if not)
EE/907C:	AB      	PLB            (Restore data bank)
EE/907D:	E220    	SEP #$20       (8-bit A)
EE/907F:	A21900  	LDX #$0019     (Start from $0019)
EE/9082:	9E0000  	STZ $0000,X    (Zero $0019+X)
EE/9085:	E8      	INX            (Increase X)
EE/9086:	E00001  	CPX #$0100     (Zeroed 256 bytes?)
EE/9089:	D0F7    	BNE $9082      (Loop if not)
EE/908B:	60      	RTS

Move #$06E0 bytes from 7E/0520 to 00/F120
EE/908C:	8B      	PHB
EE/908D:	08      	PHP
EE/908E:	C230    	REP #$30       (16-bit A and indexes)
EE/9090:	A22005  	LDX #$0520     (Source: 7E/0520)
EE/9093:	A020F1  	LDY #$F120     (Destination: 00/F120)
EE/9096:	A9DF06  	LDA #$06DF     (Block size: $06E0 bytes)
EE/9099:	547E00  	MVN $7E,$00    (Move data)
EE/909C:	28      	PLP
EE/909D:	AB      	PLB
EE/909E:	60      	RTS

Move #$06E0 bytes from 7E/F120 to 00/0520
EE/909F:	8B      	PHB
EE/90A0:	08      	PHP
EE/90A1:	C230    	REP #$30       (16-bit A and indexes)
EE/90A3:	A220F1  	LDX #$F120     (Source: 00/F120)
EE/90A6:	A02005  	LDY #$0520     (Destination: 7E/0520)
EE/90A9:	A9DF06  	LDA #$06DF     (Block size: $06E0 bytes)
EE/90AC:	54007E  	MVN $00,$7E    (Move data)
EE/90AF:	28      	PLP
EE/90B0:	AB      	PLB
EE/90B1:	60      	RTS

Copy 256 bytes of RAM from $0000 to $0A00
EE/90B2:	08      	PHP
EE/90B3:	8B      	PHB
EE/90B4:	E230    	SEP #$30       (8-bit A and indexes)
EE/90B6:	A900    	LDA #$00
EE/90B8:	48      	PHA
EE/90B9:	AB      	PLB            (Set data bank to 00)
EE/90BA:	C221    	REP #$21       (16-bit A; clear Carry)
EE/90BC:	A90000  	LDA #$0000     (Zero A)
EE/90BF:	AA      	TAX            (Transfer A to X)
EE/90C0:	BD0000  	LDA $0000,X
EE/90C3:	9D000A  	STA $0A00,X
EE/90C6:	BD0200  	LDA $0002,X
EE/90C9:	9D020A  	STA $0A02,X
EE/90CC:	BD0400  	LDA $0004,X
EE/90CF:	9D040A  	STA $0A04,X
EE/90D2:	BD0600  	LDA $0006,X
EE/90D5:	9D060A  	STA $0A06,X
EE/90D8:	BD0800  	LDA $0008,X
EE/90DB:	9D080A  	STA $0A08,X
EE/90DE:	BD0A00  	LDA $000A,X
EE/90E1:	9D0A0A  	STA $0A0A,X
EE/90E4:	BD0C00  	LDA $000C,X
EE/90E7:	9D0C0A  	STA $0A0C,X
EE/90EA:	BD0E00  	LDA $000E,X
EE/90ED:	9D0E0A  	STA $0A0E,X
EE/90F0:	8A      	TXA            (Transfer X to A)
EE/90F1:	691000  	ADC #$0010
EE/90F4:	C90001  	CMP #$0100     (Copied 256 bytes?)
EE/90F7:	D0C6    	BNE $90BF      (Loop if not)
EE/90F9:	AB      	PLB
EE/90FA:	28      	PLP
EE/90FB:	60      	RTS

Copy 256 bytes from $0A00 to $0000
EE/90FC:	08      	PHP
EE/90FD:	8B      	PHB
EE/90FE:	E230    	SEP #$30       (8-bit A and indexes)
EE/9100:	A900    	LDA #$00
EE/9102:	48      	PHA
EE/9103:	AB      	PLB            (Set data bank to 00)
EE/9104:	C221    	REP #$21       (16-bit A; clear Carry)
EE/9106:	A90000  	LDA #$0000     (Zero A)
EE/9109:	AA      	TAX            (Transfer A to X)
EE/910A:	BD000A  	LDA $0A00,X
EE/910D:	9D0000  	STA $0000,X
EE/9110:	BD020A  	LDA $0A02,X
EE/9113:	9D0200  	STA $0002,X
EE/9116:	BD040A  	LDA $0A04,X
EE/9119:	9D0400  	STA $0004,X
EE/911C:	BD060A  	LDA $0A06,X
EE/911F:	9D0600  	STA $0006,X
EE/9122:	BD080A  	LDA $0A08,X
EE/9125:	9D0800  	STA $0008,X
EE/9128:	BD0A0A  	LDA $0A0A,X
EE/912B:	9D0A00  	STA $000A,X
EE/912E:	BD0C0A  	LDA $0A0C,X
EE/9131:	9D0C00  	STA $000C,X
EE/9134:	BD0E0A  	LDA $0A0E,X
EE/9137:	9D0E00  	STA $000E,X
EE/913A:	8A      	TXA            (Transfer X to A)
EE/913B:	691000  	ADC #$0010
EE/913E:	C90001  	CMP #$0100     (Copied 256 bytes?)
EE/9141:	D0C6    	BNE $9109      (Loop if not)
EE/9143:	AB      	PLB
EE/9144:	28      	PLP
EE/9145:	60      	RTS

NMI and IRQ locations for vehicle mode
EE/9146:	E220    	SEP #$20       (8-bit A)
EE/9148:	C210    	REP #$10       (16-bit indexes)
EE/914A:	A95C    	LDA #$5C
EE/914C:	8D0015  	STA $1500      (Precede NMI address with JML opcode) (STA $1504 should go here...)
EE/914F:	A209A5  	LDX #$A509
EE/9152:	8E0115  	STX $1501      (NMI address)
EE/9155:	A9EE    	LDA #$EE
EE/9157:	8D0315  	STA $1503      (NMI bank; EE/A509) (STA $1507 should go here...)
EE/915A:	A95C    	LDA #$5C
EE/915C:	8D0415  	STA $1504      (Precede IRQ address with JML opcode)
EE/915F:	AD2000  	LDA $0020      (Map mode)
EE/9162:	C902    	CMP #$02       (Riding a chocobo?)
EE/9164:	F00D    	BEQ $9173      (Branch if so)
EE/9166:	A2B7A6  	LDX #$A6B7
EE/9169:	8E0515  	STX $1505      (IRQ address)
EE/916C:	A9EE    	LDA #$EE       (BRA $9179...)
EE/916E:	8D0715  	STA $1507      (IRQ bank; EE/A6B7)
EE/9171:	800B    	BRA $917E
EE/9173:	A2CFA6  	LDX #$A6CF
EE/9176:	8E0515  	STX $1505      (IRQ address)
EE/9179:	A9EE    	LDA #$EE
EE/917B:	8D0715  	STA $1507      (IRQ bank; EE/A6CF)
EE/917E:	4C1800  	JMP $0018

NMI and IRQ locations for character mode
EE/9181:	E220    	SEP #$20       (8-bit A)
EE/9183:	C210    	REP #$10       (16-bit indexes)
EE/9185:	A95C    	LDA #$5C
EE/9187:	8D0015  	STA $1500      (Precede NMI address with JML opcode) (STA $1504 should go here...)
EE/918A:	A228A7  	LDX #$A728
EE/918D:	8E0115  	STX $1501      (NMI address)
EE/9190:	A9EE    	LDA #$EE
EE/9192:	8D0315  	STA $1503      (NMI bank; EE/A728) (STA $1507 should go here...)
EE/9195:	A95C    	LDA #$5C
EE/9197:	8D0415  	STA $1504      (Precede IRQ address with JML opcode)
EE/919A:	A23AA9  	LDX #$A93A
EE/919D:	8E0515  	STX $1505      (IRQ address)
EE/91A0:	A9EE    	LDA #$EE
EE/91A2:	8D0715  	STA $1507      (IRQ bank; EE/A93A)
EE/91A5:	4C5102  	JMP $0251

NMI and IRQ locations for mine-cart sequence
EE/91A8:	E220    	SEP #$20       (8-bit A)
EE/91AA:	C210    	REP #$10       (16-bit indexes)
EE/91AC:	7B      	TDC            (Zero A)
EE/91AD:	48      	PHA
EE/91AE:	AB      	PLB            (Set data bank to 00)
EE/91AF:	A95C    	LDA #$5C
EE/91B1:	8D0015  	STA $1500      (Precede NMI address with JML opcode) (STA $1504 should go here...)
EE/91B4:	A24DA9  	LDX #$A94D
EE/91B7:	8E0115  	STX $1501      (NMI address)
EE/91BA:	A9EE    	LDA #$EE
EE/91BC:	8D0315  	STA $1503      (NMI bank; EE/A94D) (STA $1507 should go here...)
EE/91BF:	A95C    	LDA #$5C
EE/91C1:	8D0415  	STA $1504      (Precede IRQ address with JML opcode)
EE/91C4:	A235AA  	LDX #$AA35
EE/91C7:	8E0515  	STX $1505      (IRQ address)
EE/91CA:	A9EE    	LDA #$EE
EE/91CC:	8D0715  	STA $1507      (IRQ bank; EE/AA35)
EE/91CF:	4CB104  	JMP $04B1

Exit point for vehicle mode
EE/91D2:	E220    	SEP #$20       (8-bit A)
EE/91D4:	ADF611  	LDA $11F6
EE/91D7:	8910    	BIT #$10       (Was the dismounting shown?)
EE/91D9:	F00B    	BEQ $91E6      (Branch if not)
EE/91DB:	A520    	LDA $20        (Map mode)
EE/91DD:	C902    	CMP #$02       (Chocobo mode?)
EE/91DF:	F002    	BEQ $91E3      (Branch if so) (BNE $91E6...)
EE/91E1:	8003    	BRA $91E6      (Skip next instruction)
EE/91E3:	20FE97  	JSR $97FE
EE/91E6:	A980    	LDA #$80
EE/91E8:	8D0021  	STA $2100      (Disable screen)
EE/91EB:	A900    	LDA #$00
EE/91ED:	8D0042  	STA $4200      (Disable NMI, IRQ, auto joypad read) (STZ...)
EE/91F0:	8D0C42  	STA $420C      (Disable HDMA) (STZ...)
EE/91F3:	78      	SEI            (Disable IRQ)
EE/91F4:	A519    	LDA $19
EE/91F6:	C9FF    	CMP #$FF       (Exiting because a map was loaded via a vehicle script command?) (INC A...)
EE/91F8:	F012    	BEQ $920C      (Branch if so)
EE/91FA:	209F90  	JSR $909F      (Move #$06E0 bytes from 7E/F120 to 00/0520)
EE/91FD:	9CFA11  	STZ $11FA      (Clear the chocobo and airship flags, among other things)
EE/9200:	9CFD11  	STZ $11FD      (Zero backup of event address, low byte)
EE/9203:	9CFE11  	STZ $11FE      (Zero backup of event address, middle byte)
EE/9206:	9CFF11  	STZ $11FF      (Zero backup of event address, high byte)
EE/9209:	4CF683  	JMP $83F6      (Formalities prior to returning to a world map from a battle, a menu, etc.)
EE/920C:	C230    	REP #$30       (16-bit A and indexes)
EE/920E:	A5F4    	LDA $F4        (Map number and flags)
EE/9210:	29FF01  	AND #$01FF     (Isolate map number)
EE/9213:	C90300  	CMP #$0003     (Serpent Trench or either world map?)
EE/9216:	B01B    	BCS $9233      (Branch if not)
EE/9218:	E220    	SEP #$20       (8-bit A)
EE/921A:	A5EA    	LDA $EA        (Event address, low byte)
EE/921C:	48      	PHA            (Push on stack)
EE/921D:	A5EB    	LDA $EB        (Event address, middle byte)
EE/921F:	48      	PHA            (Push on stack)
EE/9220:	A5E7    	LDA $E7
EE/9222:	8940    	BIT #$40
EE/9224:	F008    	BEQ $922E      (ASL A, BPL...)
EE/9226:	A5EC    	LDA $EC        (Event address, high byte)
EE/9228:	38      	SEC            (Set Carry for subtraction)
EE/9229:	E980    	SBC #$80       (Subtract 128; this basically clears the high bit)
EE/922B:	48      	PHA            (Push on stack)
EE/922C:	801F    	BRA $924D
EE/922E:	A5EC    	LDA $EC        (Event address, high byte)
EE/9230:	48      	PHA            (Push on stack)
EE/9231:	801A    	BRA $924D
EE/9233:	E220    	SEP #$20       (8-bit A)
EE/9235:	A5E7    	LDA $E7
EE/9237:	8940    	BIT #$40
EE/9239:	D00B    	BNE $9246      (ASL A, BMI...)
EE/923B:	A5EA    	LDA $EA        (Event address, low byte)
EE/923D:	48      	PHA            (Push on stack)
EE/923E:	A5EB    	LDA $EB        (Event address, middle byte)
EE/9240:	48      	PHA            (Push on stack)
EE/9241:	A5EC    	LDA $EC        (Event address, high byte)
EE/9243:	48      	PHA            (Push on stack)
EE/9244:	8007    	BRA $924D
EE/9246:	A900    	LDA #$00
EE/9248:	48      	PHA            (Push on stack)
EE/9249:	48      	PHA            (Push on stack)
EE/924A:	A9CA    	LDA #$CA
EE/924C:	48      	PHA            (Push on stack; event address CA/0000)
EE/924D:	A5F1    	LDA $F1
EE/924F:	48      	PHA            (Push on stack)
EE/9250:	C220    	REP #$20       (16-bit A)
EE/9252:	A51C    	LDA $1C        (Load the coordinates for the destination)
EE/9254:	48      	PHA            (Push on stack)
EE/9255:	A5F4    	LDA $F4        (Map number and flags)
EE/9257:	48      	PHA            (Push on stack)
EE/9258:	209F90  	JSR $909F      (Move #$06E0 bytes from 7E/F120 to 00/0520)
EE/925B:	68      	PLA            (Pull the map number and flags for destination)
EE/925C:	8D641F  	STA $1F64      (Save in SRAM variables)
EE/925F:	29FF01  	AND #$01FF     (Isolate map number)
EE/9262:	C90200  	CMP #$0002     (Either world map?)
EE/9265:	B006    	BCS $926D      (Branch if not)
EE/9267:	68      	PLA            (Pull the position parameter)
EE/9268:	8D601F  	STA $1F60      (Save in SRAM variables; this is for world maps)
EE/926B:	8004    	BRA $9271      (Skip next two instructions)
EE/926D:	68      	PLA            (Pull the position parameter)
EE/926E:	8D661F  	STA $1F66      (Save in SRAM variables; this is for other maps)
EE/9271:	E220    	SEP #$20       (8-bit A)
EE/9273:	68      	PLA
EE/9274:	8DFA11  	STA $11FA
EE/9277:	68      	PLA            (Pull event address, high byte)
EE/9278:	8DFF11  	STA $11FF      (Save as backup of event address, high byte)
EE/927B:	68      	PLA            (Pull event address, middle byte)
EE/927C:	8DFE11  	STA $11FE      (Save as backup of event address, middle byte)
EE/927F:	68      	PLA            (Pull event address, low byte)
EE/9280:	8DFD11  	STA $11FD      (Save as backup of event address, low byte)
EE/9283:	6B      	RTL

Exit point for character mode resulting from a map load
EE/9284:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/9286:	A97E    	LDA #$7E
EE/9288:	48      	PHA
EE/9289:	AB      	PLB            (Set data bank to 7E)
EE/928A:	A980    	LDA #$80
EE/928C:	8F002100	STA $002100    (Disable screen)
EE/9290:	A900    	LDA #$00
EE/9292:	8F004200	STA $004200    (Disable NMI, IRQ, auto joypad read)
EE/9296:	8F0C4200	STA $00420C    (Disable HDMA)
EE/929A:	78      	SEI            (Disable IRQ)
EE/929B:	C230    	REP #$30       (16-bit A and indexes)
EE/929D:	A5F4    	LDA $F4        (Map number and flags)
EE/929F:	29FF01  	AND #$01FF     (Isolate map number)
EE/92A2:	C90300  	CMP #$0003     (Serpent Trench or either world map?)
EE/92A5:	B01B    	BCS $92C2      (Branch if not)
EE/92A7:	E220    	SEP #$20       (8-bit A)
EE/92A9:	A5EA    	LDA $EA        (Event address, low byte)
EE/92AB:	48      	PHA            (Push on stack)
EE/92AC:	A5EB    	LDA $EB        (Event address, middle byte)
EE/92AE:	48      	PHA            (Push on stack)
EE/92AF:	A5E7    	LDA $E7
EE/92B1:	8940    	BIT #$40
EE/92B3:	F008    	BEQ $92BD      (ASL A, BPL...)
EE/92B5:	A5EC    	LDA $EC        (Event address, high byte)
EE/92B7:	38      	SEC            (Set Carry for subtraction)
EE/92B8:	E980    	SBC #$80       (Subtract 128; this basically clears the high bit)
EE/92BA:	48      	PHA            (Push on stack)
EE/92BB:	801F    	BRA $92DC
EE/92BD:	A5EC    	LDA $EC        (Event address, high byte)
EE/92BF:	48      	PHA            (Push on stack)
EE/92C0:	801A    	BRA $92DC
EE/92C2:	E220    	SEP #$20       (8-bit A)
EE/92C4:	A5E7    	LDA $E7
EE/92C6:	8940    	BIT #$40
EE/92C8:	D00B    	BNE $92D5      (ASL A, BMI...)
EE/92CA:	A5EA    	LDA $EA        (Event address, low byte)
EE/92CC:	48      	PHA            (Push on stack)
EE/92CD:	A5EB    	LDA $EB        (Event address, middle byte)
EE/92CF:	48      	PHA            (Push on stack)
EE/92D0:	A5EC    	LDA $EC        (Event address, high byte)
EE/92D2:	48      	PHA            (Push on stack)
EE/92D3:	8007    	BRA $92DC
EE/92D5:	A900    	LDA #$00       (TDC...)
EE/92D7:	48      	PHA            (Push on stack)
EE/92D8:	48      	PHA            (Push on stack)
EE/92D9:	A9CA    	LDA #$CA
EE/92DB:	48      	PHA            (Push on stack; event address CA/0000)
EE/92DC:	A5F1    	LDA $F1
EE/92DE:	48      	PHA            (Push on stack)
EE/92DF:	C220    	REP #$20       (16-bit A)
EE/92E1:	A51C    	LDA $1C        (Coordinates for destination)
EE/92E3:	48      	PHA            (Push on stack)
EE/92E4:	A5F4    	LDA $F4        (Map number and flags)
EE/92E6:	48      	PHA            (Push on stack)
EE/92E7:	209F90  	JSR $909F      (Move #$06E0 bytes from 7E/F120 to 00/0520)
EE/92EA:	68      	PLA            (Pull the map number and flags for destination)
EE/92EB:	8F641F00	STA $001F64    (Save in SRAM)
EE/92EF:	29FF01  	AND #$01FF     (Isolate map number)
EE/92F2:	C90200  	CMP #$0002     (Either world map?)
EE/92F5:	B007    	BCS $92FE      (Branch if not)
EE/92F7:	68      	PLA            (Pull position parameter for destination)
EE/92F8:	8F601F00	STA $001F60    (Save in SRAM; this is for world maps)
EE/92FC:	8005    	BRA $9303      (Skip next two instructions)
EE/92FE:	68      	PLA            (Pull position parameter)
EE/92FF:	8F661F00	STA $001F66    (Save in SRAM; this is for other maps)
EE/9303:	E220    	SEP #$20       (8-bit A)
EE/9305:	68      	PLA
EE/9306:	8FFA1100	STA $0011FA
EE/930A:	68      	PLA            (Pull event address, high byte)
EE/930B:	8FFF1100	STA $0011FF    (Save as backup of event address, high byte)
EE/930F:	68      	PLA            (Pull event address, middle byte)
EE/9310:	8FFE1100	STA $0011FE    (Save as backup of event address, middle byte)
EE/9314:	68      	PLA            (Pull event address, low byte)
EE/9315:	8FFD1100	STA $0011FD    (Save as backup of event address, low byte)
EE/9319:	6B      	RTL

Exit point for the mine-cart sequence
EE/931A:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/931C:	A900    	LDA #$00
EE/931E:	48      	PHA
EE/931F:	AB      	PLB            (Set data bank to 00)
EE/9320:	A980    	LDA #$80
EE/9322:	8D0021  	STA $2100      (Disable screen)
EE/9325:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/9328:	9C0C42  	STZ $420C      (Disable HDMA)
EE/932B:	78      	SEI            (Disable IRQ)
EE/932C:	A97E    	LDA #$7E
EE/932E:	48      	PHA
EE/932F:	AB      	PLB            (Set data bank to 7E)
EE/9330:	78      	SEI            (Disable IRQ again...)
EE/9331:	209F90  	JSR $909F      (Move #$06E0 bytes from 7E/F120 to 00/0520)
EE/9334:	6B      	RTL

Game over!
EE/9335:	E220    	SEP #$20       (8-bit A) (SEP #$24...)
EE/9337:	7B      	TDC            (Zero A)
EE/9338:	48      	PHA
EE/9339:	AB      	PLB            (Set data bank to 00)
EE/933A:	A980    	LDA #$80
EE/933C:	8D0021  	STA $2100      (Disable screen)
EE/933F:	9C0042  	STZ $4200      (Disable NMI, IRQ, auto joypad read)
EE/9342:	9C0C42  	STZ $420C      (Disable HDMA)
EE/9345:	78      	SEI            (Disable IRQ)
EE/9346:	209F90  	JSR $909F      (Move #$06E0 bytes from 7E/F120 to 00/0520)
EE/9349:	A903    	LDA #$03
EE/934B:	8F641F00	STA $001F64    (Set map to #$0003: darkness) ($1F64...)
EE/934F:	7B      	TDC            (Zero A)
EE/9350:	8F651F00	STA $001F65    (This is a formality to prevent the vehicle script from executing, any map > 2 will work here) ($1F65...)
EE/9354:	A9CA    	LDA #$CA
EE/9356:	8FFF1100	STA $0011FF    (Save as backup of event address, high byte) ($11FF...)
EE/935A:	7B      	TDC            (Zero A)
EE/935B:	8FFE1100	STA $0011FE    (Save as backup of event address, middle byte) (STZ $11FE, or put this after EE/9350...)
EE/935F:	A92E    	LDA #$2E
EE/9361:	8FFD1100	STA $0011FD    (Save as backup of event address, low byte; CA/002E, game over!) ($11FD...)
EE/9365:	ADF611  	LDA $11F6
EE/9368:	29FD    	AND #$FD       (Clear "invoke battle" bit)
EE/936A:	8DF611  	STA $11F6      (Save changes) (LDA #$02, TRB $11F6...)
EE/936D:	6B      	RTL

Dismounting from a vehicle
EE/936E:	08      	PHP
EE/936F:	8B      	PHB
EE/9370:	E220    	SEP #$20       (8-bit A)
EE/9372:	A520    	LDA $20        (Map mode)
EE/9374:	C902    	CMP #$02       (Chocobo mode?)
EE/9376:	F05C    	BEQ $93D4      (Branch if so)
EE/9378:	A5C2    	LDA $C2        (Tile properties, low byte)
EE/937A:	8902    	BIT #$02       (Can the airship land on this tile?)
EE/937C:	F003    	BEQ $9381      (Branch if so)
EE/937E:	4C2C94  	JMP $942C      (Exit)
EE/9381:	AD641F  	LDA $1F64      (Map number from SRAM, low byte)
EE/9384:	C901    	CMP #$01       (World of Ruin?)
EE/9386:	D04C    	BNE $93D4      (Branch if not)
EE/9388:	A5C3    	LDA $C3        (Tile properties, high byte)
EE/938A:	8980    	BIT #$80       (Over Kefka's Tower?) (BPL...)
EE/938C:	F021    	BEQ $93AF      (Branch if not)
EE/938E:	AF75B2EE	LDA $EEB275    (Pointer to Kefka's Tower event, low byte)
EE/9392:	85EA    	STA $EA        (Set event address, low byte)
EE/9394:	AF76B2EE	LDA $EEB276    (Pointer to Kefka's Tower event, middle byte)
EE/9398:	85EB    	STA $EB        (Set event address, middle byte)
EE/939A:	AF77B2EE	LDA $EEB277    (Pointer to Kefka's Tower event, high byte)
EE/939E:	18      	CLC            (BRA $93C3...)
EE/939F:	69CA    	ADC #$CA       (Add base bank)
EE/93A1:	85EC    	STA $EC        (Set event address, high byte)
EE/93A3:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/93A5:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/93A7:	A5E7    	LDA $E7
EE/93A9:	0941    	ORA #$41
EE/93AB:	85E7    	STA $E7        (Save changes) (LDA #$41, TSB $E7...)
EE/93AD:	807D    	BRA $942C      (Exit)
EE/93AF:	8940    	BIT #$40       (Over Phoenix Cave?)
EE/93B1:	F021    	BEQ $93D4      (Branch if not) (ASL A, BPL...)
EE/93B3:	AF72B2EE	LDA $EEB272    (Pointer to Phoenix Cave event, low byte)
EE/93B7:	85EA    	STA $EA        (Set event address, low byte)
EE/93B9:	AF73B2EE	LDA $EEB273    (Pointer to Phoenix Cave event, middle byte)
EE/93BD:	85EB    	STA $EB        (Set event address, middle byte)
EE/93BF:	AF74B2EE	LDA $EEB274    (Pointer to Phoenix Cave event, high byte)
EE/93C3:	18      	CLC            (Clear Carry for addition)
EE/93C4:	69CA    	ADC #$CA       (Add base bank)
EE/93C6:	85EC    	STA $EC        (Set event address, high byte)
EE/93C8:	64ED    	STZ $ED        (Zero low byte of event queue)
EE/93CA:	64EE    	STZ $EE        (Zero high byte of event queue)
EE/93CC:	A5E7    	LDA $E7
EE/93CE:	0941    	ORA #$41
EE/93D0:	85E7    	STA $E7        (Save changes) (LDA #$41, TSB $E7...)
EE/93D2:	8058    	BRA $942C      (Exit)

Fork: Normal dismounting
EE/93D4:	A5C3    	LDA $C3        (Tile properties, high byte)
EE/93D6:	8920    	BIT #$20       (Over the Veldt?)
EE/93D8:	F008    	BEQ $93E2      (Branch if not)
EE/93DA:	ADB71E  	LDA $1EB7      (Event bits)
EE/93DD:	0908    	ORA #$08       (Set "Wild West" to play after the dismounting)
EE/93DF:	8DB71E  	STA $1EB7      (Save changes) (LDA #$08, TSB $1EB7...)
EE/93E2:	A903    	LDA #$03
EE/93E4:	8519    	STA $19
EE/93E6:	A51E    	LDA $1E        (Vehicle behavior)
EE/93E8:	0901    	ORA #$01       (Make current action repeat indefinitely)
EE/93EA:	851E    	STA $1E        (Save changes) (LDA #$01, TSB $1E...)
EE/93EC:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/93EF:	8629    	STX $29        (Zero rotation speed)
EE/93F1:	862B    	STX $2B
EE/93F3:	8626    	STX $26        (Zero vehicle speed)
EE/93F5:	6428    	STZ $28
EE/93F7:	862D    	STX $2D        (Zero speed of ascent or descent)
EE/93F9:	C220    	REP #$20       (16-bit A)
EE/93FB:	A534    	LDA $34        (Current X position in pixels)
EE/93FD:	4A      	LSR A          (Divide by 2)
EE/93FE:	4A      	LSR A          (Divide by 4)
EE/93FF:	4A      	LSR A          (Divide by 8)
EE/9400:	4A      	LSR A          (Divide by 16)
EE/9401:	29FF00  	AND #$00FF     (Finalize conversion to tiles)
EE/9404:	8F601F00	STA $001F60    (Save in SRAM)
EE/9408:	A538    	LDA $38        (Current Y position in pixels)
EE/940A:	0A      	ASL A          (Multiply by 2)
EE/940B:	0A      	ASL A          (Multiply by 4)
EE/940C:	0A      	ASL A          (Multiply by 8)
EE/940D:	0A      	ASL A          (Multiply by 16)
EE/940E:	2900FF  	AND #$FF00     (Finalize conversion to tiles)
EE/9411:	18      	CLC            (Clear Carry for addition)
EE/9412:	6F601F00	ADC $001F60    (Merge with X position)
EE/9416:	8F601F00	STA $001F60    (Save in SRAM variables)
EE/941A:	A520    	LDA $20        (Map mode)
EE/941C:	29FF00  	AND #$00FF     (Discard surplus)
EE/941F:	C90100  	CMP #$0001     (Airship mode?)
EE/9422:	D008    	BNE $942C      (Exit if not)
EE/9424:	AF601F00	LDA $001F60    (Coordinates in SRAM variables)
EE/9428:	8F621F00	STA $001F62    (Set position of landed airship)
EE/942C:	AB      	PLB
EE/942D:	28      	PLP
EE/942E:	60      	RTS

Redraw portions of world map in accordance with event bits
EE/942F:	8B      	PHB
EE/9430:	08      	PHP
EE/9431:	E230    	SEP #$30       (8-bit A and indexes)
EE/9433:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/9437:	0A      	ASL A          (Multiply by 2) (BEQ $943D, LDA #$03...)
EE/9438:	18      	CLC            (The previous opcode cleared Carry...)
EE/9439:	6F641F00	ADC $001F64    (Add one if WoR)
EE/943D:	AA      	TAX            (Transfer A to X) (WoB = 0, WoR = 3)
EE/943E:	BF60B2EE	LDA $EEB260,X  (Pointer, low byte)
EE/9442:	856A    	STA $6A        (Save it temporarily)
EE/9444:	BF61B2EE	LDA $EEB261,X  (Pointer, middle byte)
EE/9448:	856B    	STA $6B        (Save it temporarily)
EE/944A:	BF62B2EE	LDA $EEB262,X  (Pointer, high byte) (WoB: CE/F600, WoR: CE/F63C)
EE/944E:	856C    	STA $6C        (Save it temporarily)
EE/9450:	48      	PHA
EE/9451:	AB      	PLB            (Set data bank to CE)
EE/9452:	C230    	REP #$30       (16-bit A and indexes)
EE/9454:	BF63B2EE	LDA $EEB263,X  (Load the next pointer, ignoring the bank byte)
EE/9458:	38      	SEC            (Set Carry for subtraction)
EE/9459:	FF60B2EE	SBC $EEB260,X  (Subtract our pointer to determine the table's length)
EE/945D:	8566    	STA $66        (Save it temporarily) (#$3C if WoB, #$0C if WoR)
EE/945F:	A00000  	LDY #$0000     (Point to first table entry)
EE/9462:	C220    	REP #$20       (16-bit A)
EE/9464:	B76A    	LDA [$6A],Y    (Event bit table)
EE/9466:	C8      	INY
EE/9467:	C8      	INY            (Point to next table entry)
EE/9468:	855A    	STA $5A        (Save bit temporarily)
EE/946A:	290700  	AND #$0007     (Isolate 0-7 bit number)
EE/946D:	AA      	TAX            (Transfer it to X)
EE/946E:	BFFA7CEE	LDA $EE7CFA,X  (Bitfield)
EE/9472:	855C    	STA $5C        (Save it temporarily)
EE/9474:	A55A    	LDA $5A        (Event bit number)
EE/9476:	29FF7F  	AND #$7FFF     (...)
EE/9479:	4A      	LSR A          (Divide by 2)
EE/947A:	4A      	LSR A          (Divide by 4)
EE/947B:	4A      	LSR A          (Divide by 8)
EE/947C:	AA      	TAX            (Transfer it to X)
EE/947D:	E220    	SEP #$20       (8-bit A)
EE/947F:	BF801E00	LDA $001E80,X  (Event bits)
EE/9483:	255C    	AND $5C        (Isolate relevant bit)
EE/9485:	F044    	BEQ $94CB      (Branch if clear)
EE/9487:	5A      	PHY            (Save Y)
EE/9488:	C221    	REP #$21       (16-bit A; clear Carry)
EE/948A:	B76A    	LDA [$6A],Y    (Relative pointer)
EE/948C:	6F60B2EE	ADC $EEB260    (Add #$F600)
EE/9490:	A8      	TAY            (Transfer it to Y)
EE/9491:	B90000  	LDA $0000,Y    (Destination address)
EE/9494:	AA      	TAX            (Transfer it to X)
EE/9495:	E220    	SEP #$20       (8-bit A)
EE/9497:	B90200  	LDA $0002,Y    (Number of columns and rows)
EE/949A:	4A      	LSR A          (Divide by 2)
EE/949B:	4A      	LSR A          (Divide by 4)
EE/949C:	4A      	LSR A          (Divide by 8)
EE/949D:	4A      	LSR A          (Divide by 16)
EE/949E:	8568    	STA $68        (Set number of columns)
EE/94A0:	B90200  	LDA $0002,Y    (Number of columns and rows)
EE/94A3:	290F    	AND #$0F       (Clear column info)
EE/94A5:	8569    	STA $69        (Set number of rows)
EE/94A7:	E220    	SEP #$20       (8-bit A)
EE/94A9:	A568    	LDA $68        (Number of columns)
EE/94AB:	855E    	STA $5E        (Set row length)
EE/94AD:	8660    	STX $60        (Set destination address)
EE/94AF:	B90300  	LDA $0003,Y    (Replacement tile)
EE/94B2:	9F00007F	STA $7F0000,X  (Substitute map tile)
EE/94B6:	C8      	INY            (Point to next tile in ROM)
EE/94B7:	E8      	INX            (Point to next tile in RAM)
EE/94B8:	C65E    	DEC $5E        (One less row tile to process)
EE/94BA:	D0F3    	BNE $94AF      (Loop if row is incomplete)
EE/94BC:	C221    	REP #$21       (16-bit A; clear Carry)
EE/94BE:	A560    	LDA $60        (Destination address)
EE/94C0:	690001  	ADC #$0100     (Pont to next row)
EE/94C3:	AA      	TAX            (Transfer it to X)
EE/94C4:	E220    	SEP #$20       (8-bit A)
EE/94C6:	C669    	DEC $69        (One less row to process)
EE/94C8:	D0DF    	BNE $94A9      (Loop if any remains)
EE/94CA:	7A      	PLY            (Restore Y)
EE/94CB:	C8      	INY
EE/94CC:	C8      	INY            (Point to next event bit in table)
EE/94CD:	C466    	CPY $66        (Processed them all?)
EE/94CF:	D091    	BNE $9462      (Loop if not)
EE/94D1:	28      	PLP
EE/94D2:	AB      	PLB
EE/94D3:	60      	RTS

Show airship taking off
EE/94D4:	08      	PHP
EE/94D5:	8B      	PHB
EE/94D6:	C230    	REP #$30       (16-bit A and indexes)
EE/94D8:	A90600  	LDA #$0006
EE/94DB:	8FCA0000	STA $0000CA    (This will draw the airship taking off) ($C6...)
EE/94DF:	A97800  	LDA #$0078
EE/94E2:	8F60B67E	STA $7EB660    (Set initial onscreen Y position to 120)
EE/94E6:	A90001  	LDA #$0100 
EE/94E9:	8F62B67E	STA $7EB662    (Set initial speed to 256...?)
EE/94ED:	A90100  	LDA #$0001     (XBA...)
EE/94F0:	8F64B67E	STA $7EB664
EE/94F4:	A90A00  	LDA #$000A
EE/94F7:	8F68B67E	STA $7EB668
EE/94FB:	7B      	TDC            (Zero A)
EE/94FC:	8F66B67E	STA $7EB666    (Erase landing/ascending airship)
EE/9500:	8FD8B57E	STA $7EB5D8    (Erase landed airship)
EE/9504:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/9507:	200243  	JSR $4302      (Sprite-related function)
EE/950A:	20ADAA  	JSR $AAAD      (Animate water tiles) (SFC and GBA versions lack this)
EE/950D:	C220    	REP #$20       (...)
EE/950F:	AF62B67E	LDA $7EB662
EE/9513:	C9C003  	CMP #$03C0     (960?) (Attained at EE/4C27)
EE/9516:	D005    	BNE $951D      (Branch if not) (SEP, BNE...)
EE/9518:	E220    	SEP #$20       (8-bit A)
EE/951A:	7B      	TDC            (Zero A)
EE/951B:	8522    	STA $22        (Set screen to go blank)
EE/951D:	E220    	SEP #$20       (8-bit A)
EE/951F:	A524    	LDA $24        (NMI count)
EE/9521:	F0FC    	BEQ $951F      (Loop if not zero)
EE/9523:	6424    	STZ $24        (Reset NMI count)
EE/9525:	A523    	LDA $23        (Current brightness)
EE/9527:	C522    	CMP $22        (Compare to desired brightness)
EE/9529:	F006    	BEQ $9531      (Branch if equal)
EE/952B:	B003    	BCS $9530      (Branch if greater)
EE/952D:	1A      	INC A          (Increase brightness)
EE/952E:	8001    	BRA $9531      (Skip next instruction) (INC A...)
EE/9530:	3A      	DEC A          (Decrease brightness)
EE/9531:	8523    	STA $23        (Save changes)
EE/9533:	C900    	CMP #$00       (Results in black screen?)
EE/9535:	D002    	BNE $9539      (Branch if not)
EE/9537:	A980    	LDA #$80       (Disable screen)
EE/9539:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/953C:	A523    	LDA $23        (Current brightness)
EE/953E:	D0C4    	BNE $9504      (Loop until screen goes blank)
EE/9540:	AB      	PLB
EE/9541:	28      	PLP
EE/9542:	60      	RTS

Mode 7 rendering for when the airship is taking off
EE/9543:	08      	PHP
EE/9544:	8B      	PHB
EE/9545:	C230    	REP #$30       (16-bit A and indexes)
EE/9547:	A90090  	LDA #$9000
EE/954A:	858B    	STA $8B        (Set zoom variable to #$9000)
EE/954C:	A9FF8F  	LDA #$8FFF
EE/954F:	858D    	STA $8D
EE/9551:	A9FFFF  	LDA #$FFFF     (TDC, DEC A...)
EE/9554:	858F    	STA $8F
EE/9556:	A9F200  	LDA #$00F2
EE/9559:	8562    	STA $62
EE/955B:	A97000  	LDA #$0070
EE/955E:	857D    	STA $7D
EE/9560:	A9E000  	LDA #$00E0
EE/9563:	8585    	STA $85
EE/9565:	8587    	STA $87
EE/9567:	A90700  	LDA #$0007
EE/956A:	8FCA0000	STA $0000CA    (This will initialize a flying airship) ($CA...)
EE/956E:	A94006  	LDA #$0640
EE/9571:	8F62B67E	STA $7EB662
EE/9575:	A90100  	LDA #$0001     (TDC, INC A...)
EE/9578:	8F64B67E	STA $7EB664
EE/957C:	E220    	SEP #$20       (8-bit A)
EE/957E:	A524    	LDA $24        (NMI count)
EE/9580:	F0FC    	BEQ $957E      (Loop until an NMI occurs)
EE/9582:	6424    	STZ $24        (Reset NMI count)
EE/9584:	A20000  	LDX #$0000     (Zero X) (LDX $00...)
EE/9587:	DA      	PHX            (Save X)
EE/9588:	E220    	SEP #$20       (8-bit A)
EE/958A:	A562    	LDA $62
EE/958C:	C9E0    	CMP #$E0
EE/958E:	B00C    	BCS $959C
EE/9590:	A9E0    	LDA #$E0
EE/9592:	38      	SEC            (Set Carry for subtraction)
EE/9593:	E587    	SBC $87
EE/9595:	8D0942  	STA $4209      (V-Count timer, low byte)
EE/9598:	A902    	LDA #$02
EE/959A:	8007    	BRA $95A3      (Skip next three instructions)
EE/959C:	A901    	LDA #$01
EE/959E:	8D0942  	STA $4209      (V-Count timer, low byte)
EE/95A1:	A907    	LDA #$07
EE/95A3:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/95A6:	A923    	LDA #$23
EE/95A8:	8D3121  	STA $2131      (Enable color math for BG1, BG2, and backdrop)
EE/95AB:	20FF39  	JSR $39FF      (Sky rotation mechanics)
EE/95AE:	20B637  	JSR $37B6      (Adjust the sky's position)
EE/95B1:	C220    	REP #$20       (16-bit A)
EE/95B3:	A585    	LDA $85
EE/95B5:	8587    	STA $87
EE/95B7:	208838  	JSR $3888      (Draw the gradient overlay beneath the sky)
EE/95BA:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/95BD:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/95C0:	207C42  	JSR $427C      (Sprite-related function)
EE/95C3:	20ADAA  	JSR $AAAD      (Animate water tiles)
EE/95C6:	FA      	PLX            (Restore X)
EE/95C7:	BFF198EE	LDA $EE98F1,X
EE/95CB:	8558    	STA $58        (Save it temporarily)
EE/95CD:	A58B    	LDA $8B        (Zoom variable)
EE/95CF:	38      	SEC            (Set Carry for subtraction)
EE/95D0:	E558    	SBC $58
EE/95D2:	858B    	STA $8B        (Save changes)
EE/95D4:	BFF398EE	LDA $EE98F3,X
EE/95D8:	8558    	STA $58        (Save it temporarily)
EE/95DA:	A58D    	LDA $8D
EE/95DC:	38      	SEC            (Set Carry for subtraction)
EE/95DD:	E558    	SBC $58
EE/95DF:	858D    	STA $8D        (Save changes)
EE/95E1:	BFF598EE	LDA $EE98F5,X
EE/95E5:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/95E8:	8558    	STA $58        (Save it temporarily)
EE/95EA:	A58F    	LDA $8F
EE/95EC:	38      	SEC            (Set Carry for subtraction)
EE/95ED:	E558    	SBC $58
EE/95EF:	858F    	STA $8F        (Save changes)
EE/95F1:	BFF698EE	LDA $EE98F6,X
EE/95F5:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/95F8:	8558    	STA $58        (Save it temporarily)
EE/95FA:	A562    	LDA $62
EE/95FC:	38      	SEC            (Set Carry for subtraction)
EE/95FD:	E558    	SBC $58
EE/95FF:	8562    	STA $62        (Save changes)
EE/9601:	C9E000  	CMP #$00E0
EE/9604:	9003    	BCC $9609
EE/9606:	A9E000  	LDA #$00E0
EE/9609:	8585    	STA $85
EE/960B:	BFF698EE	LDA $EE98F6,X
EE/960F:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/9612:	8558    	STA $58        (Save it temporarily)
EE/9614:	A57D    	LDA $7D
EE/9616:	18      	CLC            (Clear Carry for addition)
EE/9617:	6558    	ADC $58
EE/9619:	857D    	STA $7D        (Save changes)
EE/961B:	8A      	TXA            (Transfer X to A)
EE/961C:	18      	CLC            (Clear Carry for addition)
EE/961D:	690700  	ADC #$0007
EE/9620:	AA      	TAX            (Transfer A to X)
EE/9621:	E220    	SEP #$20       (8-bit A)
EE/9623:	A524    	LDA $24        (NMI count)
EE/9625:	F0FC    	BEQ $9623      (Loop until an NMI occurs)
EE/9627:	6424    	STZ $24        (Reset NMI count)
EE/9629:	A523    	LDA $23        (Current brightness)
EE/962B:	C522    	CMP $22        (Compare to desired brightness)
EE/962D:	F006    	BEQ $9635      (Branch if equal)
EE/962F:	B003    	BCS $9634      (Branch if greater)
EE/9631:	1A      	INC A          (Increase brightness)
EE/9632:	8001    	BRA $9635      (Skip next instruction) (INC A...)
EE/9634:	3A      	DEC A          (Decrease brightness)
EE/9635:	8523    	STA $23        (Save changes)
EE/9637:	C900    	CMP #$00       (Results in black screen?)
EE/9639:	D002    	BNE $963D      (Branch if not)
EE/963B:	A980    	LDA #$80       (Disable screen)
EE/963D:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/9640:	E0E000  	CPX #$00E0
EE/9643:	F003    	BEQ $9648
EE/9645:	4C8795  	JMP $9587
EE/9648:	ADF611  	LDA $11F6
EE/964B:	29EF    	AND #$EF       (Clear the "show animation for mode transition" bit)
EE/964D:	8DF611  	STA $11F6      (Save changes) (LDA #$10, TRB $11F6...)
EE/9650:	AB      	PLB
EE/9651:	28      	PLP
EE/9652:	60      	RTS

Mode 7 rendering for a landing airship
EE/9653:	08      	PHP
EE/9654:	8B      	PHB
EE/9655:	208F41  	JSR $418F      (Hide minimap)
EE/9658:	206C42  	JSR $426C      (Hide both minimap dots)
EE/965B:	C230    	REP #$30       (16-bit A and indexes)
EE/965D:	A90030  	LDA #$3000
EE/9660:	858B    	STA $8B        (Set zoom variable to #$3000)
EE/9662:	A90018  	LDA #$1800
EE/9665:	858D    	STA $8D
EE/9667:	A9FFFE  	LDA #$FEFF
EE/966A:	858F    	STA $8F
EE/966C:	A99200  	LDA #$0092
EE/966F:	8562    	STA $62
EE/9671:	A9D000  	LDA #$00D0
EE/9674:	857D    	STA $7D
EE/9676:	A99200  	LDA #$0092
EE/9679:	8585    	STA $85
EE/967B:	8587    	STA $87
EE/967D:	A90800  	LDA #$0008
EE/9680:	8FCA0000	STA $0000CA    (This will animate a landing airship)
EE/9684:	A98000  	LDA #$0080
EE/9687:	8F60B67E	STA $7EB660
EE/968B:	A90001  	LDA #$0100
EE/968E:	8F62B67E	STA $7EB662
EE/9692:	A9E000  	LDA #$00E0     (Line 225 is off the screen)
EE/9695:	8F396B7E	STA $7E6B39    (Hide and blank left portion of vehicle shadow)
EE/9699:	8F3D6B7E	STA $7E6B3D    (Hide and blank right portion of vehicle shadow)
EE/969D:	A524    	LDA $24        (NMI count)
EE/969F:	F0FC    	BEQ $969D      (Loop until an NMI occurs)
EE/96A1:	6424    	STZ $24        (Reset NMI count)
EE/96A3:	A2D900  	LDX #$00D9
EE/96A6:	DA      	PHX
EE/96A7:	E220    	SEP #$20       (8-bit A)
EE/96A9:	A562    	LDA $62
EE/96AB:	C9E0    	CMP #$E0
EE/96AD:	B00C    	BCS $96BB
EE/96AF:	A9E0    	LDA #$E0
EE/96B1:	38      	SEC            (Set Carry for subtraction)
EE/96B2:	E587    	SBC $87
EE/96B4:	8D0942  	STA $4209      (V-Count timer, low byte)
EE/96B7:	A902    	LDA #$02
EE/96B9:	8007    	BRA $96C2      (Skip next three instructions)
EE/96BB:	A901    	LDA #$01
EE/96BD:	8D0942  	STA $4209      (V-Count timer, low byte)
EE/96C0:	A907    	LDA #$07
EE/96C2:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/96C5:	A923    	LDA #$23
EE/96C7:	8D3121  	STA $2131      (Enable color math for BG1, BG2, and backdrop)
EE/96CA:	20FF39  	JSR $39FF      (Sky rotation mechanics)
EE/96CD:	20B637  	JSR $37B6      (Adjust the sky's position)
EE/96D0:	C220    	REP #$20       (16-bit A)
EE/96D2:	A585    	LDA $85
EE/96D4:	8587    	STA $87
EE/96D6:	208838  	JSR $3888      (Draw the gradient overlay beneath the sky)
EE/96D9:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/96DC:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/96DF:	207C42  	JSR $427C      (Sprite-related function)
EE/96E2:	20ADAA  	JSR $AAAD      (Animate water tiles)
EE/96E5:	FA      	PLX
EE/96E6:	305A    	BMI $9742
EE/96E8:	BFF198EE	LDA $EE98F1,X
EE/96EC:	8558    	STA $58        (Save it temporarily)
EE/96EE:	A58B    	LDA $8B        (Zoom variable)
EE/96F0:	18      	CLC            (Clear Carry for addition)
EE/96F1:	6558    	ADC $58
EE/96F3:	858B    	STA $8B        (Save changes)
EE/96F5:	BFF398EE	LDA $EE98F3,X
EE/96F9:	8558    	STA $58        (Save it temporarily)
EE/96FB:	A58D    	LDA $8D
EE/96FD:	18      	CLC            (Clear Carry for addition)
EE/96FE:	6558    	ADC $58
EE/9700:	858D    	STA $8D        (Save changes)
EE/9702:	BFF598EE	LDA $EE98F5,X
EE/9706:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/9709:	8558    	STA $58        (Save it temporarily)
EE/970B:	A58F    	LDA $8F
EE/970D:	18      	CLC            (Clear Carry for addition)
EE/970E:	6558    	ADC $58
EE/9710:	858F    	STA $8F        (Save changes)
EE/9712:	BFF698EE	LDA $EE98F6,X
EE/9716:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/9719:	8558    	STA $58        (Save it temporarily)
EE/971B:	A562    	LDA $62
EE/971D:	18      	CLC            (Clear Carry for addition)
EE/971E:	6558    	ADC $58
EE/9720:	8562    	STA $62        (Save changes)
EE/9722:	C9E000  	CMP #$00E0
EE/9725:	9003    	BCC $972A
EE/9727:	A9E000  	LDA #$00E0
EE/972A:	8585    	STA $85
EE/972C:	BFF798EE	LDA $EE98F7,X
EE/9730:	29FF00  	AND #$00FF     (Discard superfluous byte)
EE/9733:	8558    	STA $58        (Save it temporarily)
EE/9735:	A57D    	LDA $7D
EE/9737:	38      	SEC            (Set Carry for subtraction)
EE/9738:	E558    	SBC $58
EE/973A:	857D    	STA $7D        (Save changes)
EE/973C:	8A      	TXA            (Transfer X to A)
EE/973D:	38      	SEC            (Set Carry for subtraction)
EE/973E:	E90700  	SBC #$0007     (Subtract 7)
EE/9741:	AA      	TAX            (Transfer A to X)
EE/9742:	E220    	SEP #$20       (8-bit A)
EE/9744:	A524    	LDA $24        (NMI count)
EE/9746:	F0FC    	BEQ $9744      (Loop until an NMI occurs)
EE/9748:	6424    	STZ $24        (Reset NMI count)
EE/974A:	A523    	LDA $23        (Current brightness)
EE/974C:	C522    	CMP $22        (Compare to desired brightness)
EE/974E:	F006    	BEQ $9756      (Branch if equal)
EE/9750:	B003    	BCS $9755      (Branch if greater)
EE/9752:	1A      	INC A          (Increase brightness)
EE/9753:	8001    	BRA $9756      (Skip next instruction) (INC A...)
EE/9755:	3A      	DEC A          (Decrease brightness)
EE/9756:	8523    	STA $23        (Save changes)
EE/9758:	C900    	CMP #$00       (Results in black screen?)
EE/975A:	D002    	BNE $975E      (Branch if not)
EE/975C:	A980    	LDA #$80       (Disable screen)
EE/975E:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/9761:	EA      	NOP
EE/9762:	EA      	NOP
EE/9763:	EA      	NOP
EE/9764:	EA      	NOP
EE/9765:	E06900  	CPX #$0069
EE/9768:	D002    	BNE $976C
EE/976A:	6422    	STZ $22        (Set screen to go blank)
EE/976C:	A523    	LDA $23        (Current brightness)
EE/976E:	F003    	BEQ $9773      (Exit if the screen is blank)
EE/9770:	4CA696  	JMP $96A6      (Loop)
EE/9773:	AB      	PLB
EE/9774:	28      	PLP
EE/9775:	60      	RTS

Show airship landing
EE/9776:	08      	PHP
EE/9777:	8B      	PHB
EE/9778:	C230    	REP #$30       (16-bit A and indexes)
EE/977A:	A90090  	LDA #$9000
EE/977D:	858B    	STA $8B        (Set zoom variable to #$9000)
EE/977F:	A9FF8F  	LDA #$8FFF
EE/9782:	858D    	STA $8D
EE/9784:	A9FFFF  	LDA #$FFFF     (TDC, DEC A...)
EE/9787:	858F    	STA $8F
EE/9789:	A9F200  	LDA #$00F2
EE/978C:	8562    	STA $62
EE/978E:	A97000  	LDA #$0070
EE/9791:	857D    	STA $7D
EE/9793:	A9E000  	LDA #$00E0
EE/9796:	8585    	STA $85
EE/9798:	8587    	STA $87
EE/979A:	A90900  	LDA #$0009
EE/979D:	8FCA0000	STA $0000CA    (This will initialize the map character and landed airship) ($CA...)
EE/97A1:	A9A0FD  	LDA #$FDA0
EE/97A4:	8F60B67E	STA $7EB660
EE/97A8:	A9C802  	LDA #$02C8
EE/97AB:	8F62B67E	STA $7EB662
EE/97AF:	A90100  	LDA #$0001     (TDC, INC A...)
EE/97B2:	8F64B67E	STA $7EB664
EE/97B6:	E220    	SEP #$20       (8-bit A)
EE/97B8:	A90F    	LDA #$0F
EE/97BA:	8522    	STA $22        (Set screen to reach full brightness)
EE/97BC:	A524    	LDA $24        (NMI count)
EE/97BE:	F0FC    	BEQ $97BC      (Loop until an NMI occurs)
EE/97C0:	6424    	STZ $24        (Reset NMI count)
EE/97C2:	20513E  	JSR $3E51      (Mode 7 rendering for character mode)
EE/97C5:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/97C8:	200243  	JSR $4302      (Sprite-related function)
EE/97CB:	20ADAA  	JSR $AAAD      (Animate water tiles)
EE/97CE:	E220    	SEP #$20       (8-bit A)
EE/97D0:	A524    	LDA $24        (NMI count)
EE/97D2:	F0FC    	BEQ $97D0      (Loop until an NMI occurs)
EE/97D4:	6424    	STZ $24        (Reset NMI count)
EE/97D6:	A523    	LDA $23        (Current brightness)
EE/97D8:	C522    	CMP $22        (Compare to desired brightness)
EE/97DA:	F006    	BEQ $97E2      (Branch if equal)
EE/97DC:	B003    	BCS $97E1      (Branch if greater)
EE/97DE:	1A      	INC A          (Increase brightness)
EE/97DF:	8001    	BRA $97E2      (Skip next instruction) (INC A...)
EE/97E1:	3A      	DEC A          (Decrease brightness)
EE/97E2:	8523    	STA $23        (Save changes)
EE/97E4:	C900    	CMP #$00       (Results in black screen?)
EE/97E6:	D002    	BNE $97EA      (Branch if not)
EE/97E8:	A980    	LDA #$80       (Disable screen)
EE/97EA:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/97ED:	A5CA    	LDA $CA
EE/97EF:	C903    	CMP #$03       (Ready to draw the map character?)
EE/97F1:	D0CF    	BNE $97C2      (Loop if not)
EE/97F3:	ADF611  	LDA $11F6
EE/97F6:	29EF    	AND #$EF       (Clear the "show animation for mode transition" bit)
EE/97F8:	8DF611  	STA $11F6      (Save changes) (LDA #$10, TRB $11F6...)
EE/97FB:	AB      	PLB
EE/97FC:	28      	PLP
EE/97FD:	60      	RTS

Show a chocobo running off
EE/97FE:	08      	PHP
EE/97FF:	8B      	PHB
EE/9800:	C230    	REP #$30       (16-bit A and indexes)
EE/9802:	A90030  	LDA #$3000
EE/9805:	858B    	STA $8B        (Set zoom variable to #$3000)
EE/9807:	A90018  	LDA #$1800
EE/980A:	858D    	STA $8D
EE/980C:	A9FFFE  	LDA #$FEFF
EE/980F:	858F    	STA $8F
EE/9811:	A99200  	LDA #$0092
EE/9814:	8562    	STA $62
EE/9816:	A9D000  	LDA #$00D0
EE/9819:	857D    	STA $7D
EE/981B:	A99200  	LDA #$0092
EE/981E:	8585    	STA $85        (Put this after EE/9814...)
EE/9820:	8587    	STA $87
EE/9822:	A90A00  	LDA #$000A
EE/9825:	8FCA0000	STA $0000CA    (This will draw the dismounting) ($CA...)
EE/9829:	A9B800  	LDA #$00B8
EE/982C:	8F60B67E	STA $7EB660
EE/9830:	A90080  	LDA #$8000
EE/9833:	8F6EB67E	STA $7EB66E
EE/9837:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/983A:	8F62B67E	STA $7EB662
EE/983E:	A90100  	LDA #$0001     (INC A...)
EE/9841:	8F64B67E	STA $7EB664
EE/9845:	A9FDFF  	LDA #$FFFD
EE/9848:	8F66B67E	STA $7EB666
EE/984C:	A9A800  	LDA #$00A8
EE/984F:	8F68B67E	STA $7EB668
EE/9853:	A97800  	LDA #$0078
EE/9856:	8F6AB67E	STA $7EB66A
EE/985A:	A90000  	LDA #$0000     (Zero A) (TDC...)
EE/985D:	8F6CB67E	STA $7EB66C    (Put this after EE/983A...)
EE/9861:	A9E000  	LDA #$00E0     (Line 225 is off the screen)
EE/9864:	8F396B7E	STA $7E6B39    (Hide and blank left portion of vehicle shadow)
EE/9868:	8F3D6B7E	STA $7E6B3D    (Hide and blank right portion of vehicle shadow)
EE/986C:	A524    	LDA $24        (NMI count)
EE/986E:	F0FC    	BEQ $986C      (Loop until an NMI occurs)
EE/9870:	6424    	STZ $24        (Reset NMI count)
EE/9872:	E220    	SEP #$20       (8-bit A)
EE/9874:	A562    	LDA $62
EE/9876:	C9E0    	CMP #$E0
EE/9878:	B00C    	BCS $9886
EE/987A:	A9E0    	LDA #$E0
EE/987C:	38      	SEC            (Set Carry for subtraction)
EE/987D:	E587    	SBC $87
EE/987F:	8D0942  	STA $4209      (V-Count timer, low byte)
EE/9882:	A902    	LDA #$02
EE/9884:	8007    	BRA $988D      (Skip next three instructions)
EE/9886:	A901    	LDA #$01
EE/9888:	8D0942  	STA $4209      (V-Count timer, low byte)
EE/988B:	A907    	LDA #$07
EE/988D:	8D0521  	STA $2105      (Set BG mode 7, 8x8 tiles)
EE/9890:	A923    	LDA #$23
EE/9892:	8D3121  	STA $2131      (Enable color math for BG1, BG2, and backdrop)
EE/9895:	20FF39  	JSR $39FF      (Sky rotation mechanics)
EE/9898:	20B637  	JSR $37B6      (Adjust the sky's position)
EE/989B:	C220    	REP #$20       (16-bit A)
EE/989D:	A585    	LDA $85
EE/989F:	8587    	STA $87
EE/98A1:	208838  	JSR $3888      (Draw the gradient overlay beneath the sky)
EE/98A4:	20803A  	JSR $3A80      (Mode 7 rendering for vehicle mode)
EE/98A7:	20BD43  	JSR $43BD      (Sprite initialization and animation)
EE/98AA:	207C42  	JSR $427C      (Sprite-related function)
EE/98AD:	20ADAA  	JSR $AAAD      (Animate water tiles)
EE/98B0:	E220    	SEP #$20       (8-bit A)
EE/98B2:	A524    	LDA $24        (NMI count)
EE/98B4:	F0FC    	BEQ $98B2      (Loop until an NMI occurs)
EE/98B6:	6424    	STZ $24        (Reset NMI count)
EE/98B8:	A523    	LDA $23        (Current brightness)
EE/98BA:	C522    	CMP $22        (Compare to desired brightness)
EE/98BC:	F006    	BEQ $98C4      (Branch if equal)
EE/98BE:	B003    	BCS $98C3      (Branch if greater)
EE/98C0:	1A      	INC A          (Increase brightness)
EE/98C1:	8001    	BRA $98C4      (Skip next instruction) (INC A...)
EE/98C3:	3A      	DEC A          (Decrease brightness)
EE/98C4:	8523    	STA $23        (Save changes)
EE/98C6:	C900    	CMP #$00       (Results in black screen?)
EE/98C8:	D002    	BNE $98CC      (Branch if not)
EE/98CA:	A980    	LDA #$80       (Disable screen)
EE/98CC:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/98CF:	EA      	NOP
EE/98D0:	EA      	NOP
EE/98D1:	EA      	NOP
EE/98D2:	EA      	NOP
EE/98D3:	AF6CB67E	LDA $7EB66C
EE/98D7:	C93C    	CMP #$3C
EE/98D9:	D002    	BNE $98DD
EE/98DB:	6422    	STZ $22        (Set screen to go blank)
EE/98DD:	A5CA    	LDA $CA
EE/98DF:	C90B    	CMP #$0B       (Reached termination point?)
EE/98E1:	F003    	BEQ $98E6      (Branch if so)
EE/98E3:	4C7298  	JMP $9872      (Loop) (BRA...)

Fork: Termination point
EE/98E6:	ADF611  	LDA $11F6
EE/98E9:	29EF    	AND #$EF       (Disable animation for mode transition)
EE/98EB:	8DF611  	STA $11F6      (Save changes) (LDA #$10, TRB $11F6...)
EE/98EE:	AB      	PLB
EE/98EF:	28      	PLP
EE/98F0:	60      	RTS

Mode 7 configuration for when the airship is landing or taking off
EE/98F1:	0E00
EE/98F3:	1200
EE/98F5:	0000
EE/98F7:	003A
EE/98F9:	0049
EE/98FB:	0000
EE/98FD:	0000
EE/98FF:	8100
EE/9901:	A100
EE/9903:	0100
EE/9905:	00E1
EE/9907:	0019
EE/9909:	0102
EE/990B:	0100
EE/990D:	5501
EE/990F:	AA01
EE/9911:	0301
EE/9913:	01DA
EE/9915:	0150
EE/9917:	0205
EE/9919:	0201
EE/991B:	6A02
EE/991D:	0403
EE/991F:	0602
EE/9921:	0200
EE/9923:	03BF
EE/9925:	0308
EE/9927:	0302
EE/9929:	9603
EE/992B:	7B04
EE/992D:	0A04
EE/992F:	0326
EE/9931:	042F
EE/9933:	050B
EE/9935:	0404
EE/9937:	AB04
EE/9939:	D505
EE/993B:	0D05
EE/993D:	041F
EE/993F:	0566
EE/9941:	060E
EE/9943:	0505
EE/9945:	7F05
EE/9947:	DE06
EE/9949:	0F06
EE/994B:	05C6
EE/994D:	0536
EE/994F:	0710
EE/9951:	0605
EE/9953:	F105
EE/9955:	6D07
EE/9957:	1006
EE/9959:	0500
EE/995B:	0680
EE/995D:	0710
EE/995F:	0605
EE/9961:	F105
EE/9963:	6D07
EE/9965:	1006
EE/9967:	05C6
EE/9969:	0536
EE/996B:	0710
EE/996D:	0605
EE/996F:	7F05
EE/9971:	DE06
EE/9973:	0F06
EE/9975:	051F
EE/9977:	0566
EE/9979:	060E
EE/997B:	0505
EE/997D:	AB04
EE/997F:	D505
EE/9981:	0D05
EE/9983:	0426
EE/9985:	042F
EE/9987:	050B
EE/9989:	0404
EE/998B:	9603
EE/998D:	7B04
EE/998F:	0A04
EE/9991:	0300
EE/9993:	03C0
EE/9995:	0308
EE/9997:	0303
EE/9999:	6A02
EE/999B:	0403
EE/999D:	0602
EE/999F:	02DA
EE/99A1:	0150
EE/99A3:	0205
EE/99A5:	0201
EE/99A7:	5501
EE/99A9:	AA01
EE/99AB:	0301
EE/99AD:	01E1
EE/99AF:	0019
EE/99B1:	0102
EE/99B3:	0100
EE/99B5:	8100
EE/99B7:	A100
EE/99B9:	0100
EE/99BB:	003A
EE/99BD:	0049
EE/99BF:	0000
EE/99C1:	0000
EE/99C3:	0E00
EE/99C5:	1200
EE/99C7:	0000
EE/99C9:	0002
EE/99CB:	000F
EE/99CD:	0000
EE/99CF:	0000

Data for the function below
EE/99D1:	0000
EE/99D3:	0900
EE/99D5:	1000
EE/99D7:	1900
EE/99D9:	2400
EE/99DB:	3100
EE/99DD:	4000
EE/99DF:	5100
EE/99E1:	6400
EE/99E3:	7900
EE/99E5:	9000
EE/99E7:	C400
EE/99E9:	0001

Data for the function below
EE/99EB:	0000
EE/99ED:	0300
EE/99EF:	0400
EE/99F1:	0500
EE/99F3:	0600
EE/99F5:	0700
EE/99F7:	0800
EE/99F9:	0900
EE/99FB:	0A00
EE/99FD:	0B00
EE/99FF:	0C00
EE/9A01:	0E00
EE/9A03:	1000

Function pertaining to mine-cart sequence
EE/9A05:	08      	PHP
EE/9A06:	8B      	PHB
EE/9A07:	0B      	PHD
EE/9A08:	C230    	REP #$30       (16-bit A and indexes)
EE/9A0A:	A90021  	LDA #$2100
EE/9A0D:	5B      	TCD            (Set direct page to 2100)
EE/9A0E:	E220    	SEP #$20       (8-bit A)
EE/9A10:	A20020  	LDX #$2000
EE/9A13:	8681    	STX $81        (WRAM address)
EE/9A15:	A97E    	LDA #$7E
EE/9A17:	8583    	STA $83        (WRAM bank; 7E/2000)
EE/9A19:	A97E    	LDA #$7E       (...)
EE/9A1B:	48      	PHA
EE/9A1C:	AB      	PLB            (Set data bank to 7E)
EE/9A1D:	A00000  	LDY #$0000     (Zero Y)
EE/9A20:	A91D    	LDA #$1D
EE/9A22:	8D6600  	STA $0066
EE/9A25:	A21800  	LDX #$0018
EE/9A28:	8E6800  	STX $0068
EE/9A2B:	C220    	REP #$20       (16-bit A)
EE/9A2D:	9C5A00  	STZ $005A
EE/9A30:	AE6800  	LDX $0068
EE/9A33:	BFD199EE	LDA $EE99D1,X
EE/9A37:	890100  	BIT #$0001
EE/9A3A:	F003    	BEQ $9A3F      (LSR A, BCC...)
EE/9A3C:	EE5A00  	INC $005A
EE/9A3F:	4A      	LSR A          (Divide by 2)
EE/9A40:	AA      	TAX            (Transfer A to X)
EE/9A41:	E220    	SEP #$20       (8-bit A)
EE/9A43:	B900A0  	LDA $A000,Y
EE/9A46:	8D5800  	STA $0058      (Save it temporarily)
EE/9A49:	C8      	INY
EE/9A4A:	B900A0  	LDA $A000,Y
EE/9A4D:	29F0    	AND #$F0
EE/9A4F:	F00B    	BEQ $9A5C
EE/9A51:	4A      	LSR A          (Divide by 2)
EE/9A52:	4A      	LSR A          (Divide by 4)
EE/9A53:	4A      	LSR A          (Divide by 8)
EE/9A54:	4A      	LSR A          (Divide by 16)
EE/9A55:	0D5800  	ORA $0058
EE/9A58:	8580    	STA $80        (WRAM data write)
EE/9A5A:	8002    	BRA $9A5E      (Skip next instruction)
EE/9A5C:	6480    	STZ $80        (WRAM data write: 00)
EE/9A5E:	B900A0  	LDA $A000,Y
EE/9A61:	290F    	AND #$0F
EE/9A63:	F007    	BEQ $9A6C
EE/9A65:	0D5800  	ORA $0058
EE/9A68:	8580    	STA $80        (WRAM data write)
EE/9A6A:	8002    	BRA $9A6E      (Skip next instruction)
EE/9A6C:	6480    	STZ $80        (WRAM data write: 00)
EE/9A6E:	C8      	INY
EE/9A6F:	CA      	DEX
EE/9A70:	D0D8    	BNE $9A4A
EE/9A72:	AD5A00  	LDA $005A
EE/9A75:	F015    	BEQ $9A8C
EE/9A77:	B900A0  	LDA $A000,Y
EE/9A7A:	29F0    	AND #$F0
EE/9A7C:	F00B    	BEQ $9A89
EE/9A7E:	4A      	LSR A          (Divide by 2)
EE/9A7F:	4A      	LSR A          (Divide by 4)
EE/9A80:	4A      	LSR A          (Divide by 8)
EE/9A81:	4A      	LSR A          (Divide by 16)
EE/9A82:	0D5800  	ORA $0058
EE/9A85:	8580    	STA $80        (WRAM data write)
EE/9A87:	8002    	BRA $9A8B      (Skip next instruction)
EE/9A89:	6480    	STZ $80        (WRAM data write: 00)
EE/9A8B:	C8      	INY
EE/9A8C:	CE6800  	DEC $0068
EE/9A8F:	CE6800  	DEC $0068
EE/9A92:	D097    	BNE $9A2B
EE/9A94:	CE6600  	DEC $0066
EE/9A97:	D08C    	BNE $9A25
EE/9A99:	C220    	REP #$20       (16-bit A)
EE/9A9B:	A9D968  	LDA #$68D9
EE/9A9E:	8581    	STA $81        (WRAM address; 7E/68D9)
EE/9AA0:	E220    	SEP #$20       (8-bit A)
EE/9AA2:	A00000  	LDY #$0000     (Zero Y)
EE/9AA5:	A20C00  	LDX #$000C
EE/9AA8:	8E6600  	STX $0066
EE/9AAB:	A21800  	LDX #$0018
EE/9AAE:	8E6800  	STX $0068
EE/9AB1:	AE6800  	LDX $0068
EE/9AB4:	BFEB99EE	LDA $EE99EB,X
EE/9AB8:	8D5800  	STA $0058
EE/9ABB:	C221    	REP #$21       (16-bit A; clear Carry)
EE/9ABD:	AE6800  	LDX $0068
EE/9AC0:	BFEB99EE	LDA $EE99EB,X
EE/9AC4:	8D5A00  	STA $005A
EE/9AC7:	98      	TYA            (Transfer Y to A)
EE/9AC8:	7FEB99EE	ADC $EE99EB,X
EE/9ACC:	AA      	TAX            (Transfer A to X)
EE/9ACD:	A8      	TAY            (Transfer A to Y)
EE/9ACE:	E220    	SEP #$20       (8-bit A)
EE/9AD0:	BDFF1F  	LDA $1FFF,X
EE/9AD3:	8580    	STA $80        (WRAM data write)
EE/9AD5:	CA      	DEX
EE/9AD6:	CE5A00  	DEC $005A
EE/9AD9:	D0F5    	BNE $9AD0
EE/9ADB:	CE5800  	DEC $0058
EE/9ADE:	D0DB    	BNE $9ABB
EE/9AE0:	CE6800  	DEC $0068
EE/9AE3:	CE6800  	DEC $0068
EE/9AE6:	D0C9    	BNE $9AB1
EE/9AE8:	CE6600  	DEC $0066
EE/9AEB:	D0BE    	BNE $9AAB
EE/9AED:	2B      	PLD
EE/9AEE:	AB      	PLB
EE/9AEF:	28      	PLP
EE/9AF0:	60      	RTS

Removal of Sealed Gate area from minimap
EE/9AF1:	08      	PHP
EE/9AF2:	E220    	SEP #$20       (8-bit A)
EE/9AF4:	AD641F  	LDA $1F64      (World of Balance?)
EE/9AF7:	D019    	BNE $9B12      (Exit if not)
EE/9AF9:	AD931E  	LDA $1E93      (Event bits)
EE/9AFC:	8940    	BIT #$40       (Floating Continent exists?)
EE/9AFE:	F012    	BEQ $9B12      (Exit if not) (ASL A, BPL...)
EE/9B00:	C220    	REP #$20       (16-bit A)
EE/9B02:	AFA2E17E	LDA $7EE1A2    (Color for sea pixels)
EE/9B06:	8FACE17E	STA $7EE1AC    (Set color for dark-grey outline)
EE/9B0A:	8FAEE17E	STA $7EE1AE    (Set color for light-grey outline)
EE/9B0E:	8FB0E17E	STA $7EE1B0    (Set color for main land)
EE/9B12:	28      	PLP
EE/9B13:	60      	RTS

Tile properties for the World of Balance
EE/9B14:	0400 0400 4400 0400 0400 0400 5300 5300 4200 5300 4400 4400 4400 4600 4602 4600
EE/9B34:	0400 4600 1B00 4600 0400 4400 4400 5300 4400 5300 4400 4400 4400 4602 4602 4602
EE/9B54:	4600 1B00 1B00 1B00 4600 4400 4400 5300 4200 5300 4400 4400 4400 4600 4602 4600
EE/9B74:	0400 5700 1B00 5700 0400 0700 0700 0700 0700 4600 4600 4600 4600 6603 6603 6603
EE/9B94:	0400 0700 4600 0700 0400 0700 0700 0700 0700 4600 4600 4400 4400 6603 6603 6603
EE/9BB4:	1B00 1B00 0700 0700 0400 0400 4600 4600 1700 1700 1700 4600 4600 6603 6603 6603
EE/9BD4:	1B00 1B00 0700 0700 0400 0400 4600 4600 1700 1700 1700 4602 4602 0400 0400 0400
EE/9BF4:	0400 0400 0400 0400 1600 1700 1600 0400 1700 4400 1700 4602 4602 0400 0400 0400
EE/9C14:	0400 0400 1700 0400 1600 1700 1600 0400 0400 0400 0400 0400 0400 0600 0600 0600
EE/9C34:	0400 1700 1700 1700 1600 1700 1600 0700 0700 0400 0400 0400 0400 0400 0400 4206
EE/9C54:	1700 1700 1700 1700 1700 0400 0400 0700 0700 0400 4606 0400 4426 0400 0400 4426
EE/9C74:	0400 1700 1700 1700 0400 0400 0400 0400 4426 0400 0400 0400 0400 0400 0400 4206
EE/9C94:	0400 0400 1700 0400 0400 0400 0400 4606 0400 4606 4606 0400 4626 0400 4426 4426
EE/9CB4:	0400 0400 0400 0400 0400 0400 4606 0400 0400 0400 4606 4426 4426 4426 4426 4426
EE/9CD4:	4600 4600 0400 0400 0400 0400 0400 0400 0400 0400 0400 4426 4426 4426 4426 4426
EE/9CF4:	4600 4600 0400 0400 0400 0400 0400 0400 4606 0400 0400 4426 4426 4426 4426 4426

Tile properties for the World of Ruin
EE/9D14:	0400 0400 4404 0400 0400 0400 5307 5305 4405 5305 4404 4405 4404 4605 4602 4605
EE/9D34:	0400 4604 1B00 4604 0400 4405 4405 4405 4405 4405 4405 4405 4405 4602 4602 4602
EE/9D54:	4604 1B00 1B00 1B00 4604 4405 4405 5305 4405 5305 4404 4405 4404 4605 4602 4605
EE/9D74:	0400 1704 1B00 1704 0700 0700 0700 0700 0700 4605 4605 4605 4605 6601 6601 6601
EE/9D94:	0400 0700 4604 0700 0400 0700 0700 0700 0700 4605 4605 4405 4405 6601 6601 6601
EE/9DB4:	1B00 1B00 0B00 0700 0400 0600 4605 0700 0700 1700 1700 4605 4605 6601 6601 6601
EE/9DD4:	1B00 1B00 0700 0700 4404 1980 4605 0700 0700 1700 1700 4602 4602 0400 0400 0400
EE/9DF4:	5305 4425 5305 0400 1600 1980 1600 0400 1700 4405 5700 4602 4602 0400 0400 0400
EE/9E14:	4425 4425 4425 0400 1600 1580 1600 0400 0400 0400 0400 0400 0400 0600 0600 0600
EE/9E34:	5305 4425 5305 1700 1600 1700 1600 0400 0400 0400 0400 0400 0400 0400 0400 0400
EE/9E54:	4404 4405 4404 1700 1700 0400 4426 4425 4426 0400 0400 4426 0400 0400 4444 4444
EE/9E74:	4405 4404 4405 1700 0400 0400 4425 4426 4425 0400 4606 1B00 4606 0400 1545 1545
EE/9E94:	4404 4405 4404 0400 0400 0400 4426 4425 4426 4606 0400 4606 0400 4606 0400 1940
EE/9EB4:	0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400
EE/9ED4:	0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400
EE/9EF4:	0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400 0400


Below is a list of tile properties.

jih--ggg -fedccba

a: Chocobos cannot pass
b: Airships cannot land
c: Size of shadow cast by airship
d: Characters cannot pass
e: Characters become partly transparent
f: Enemy encounters are permitted
g: Battle background
h: Play Veldt music after dismounting from a vehicle
i: Entrance to Phoenix Cave
j: Entrance to Kefka's Tower


Graphics function for the mine-cart sequence
EE/9F14:	8B      	PHB
EE/9F15:	08      	PHP
EE/9F16:	0B      	PHD
EE/9F17:	E220    	SEP #$20       (8-bit A)
EE/9F19:	A97F    	LDA #$7F
EE/9F1B:	48      	PHA
EE/9F1C:	AB      	PLB            (Set data bank to 7F)
EE/9F1D:	A900    	LDA #$00
EE/9F1F:	8F832100	STA $002183    (WRAM bank)
EE/9F23:	A900    	LDA #$00       (...)
EE/9F25:	8F240000	STA $000024    (Erase all traces of this routine having completed)
EE/9F29:	8FFA0000	STA $0000FA
EE/9F2D:	C230    	REP #$30       (16-bit A and indexes)
EE/9F2F:	A90021  	LDA #$2100
EE/9F32:	5B      	TCD            (Set direct page to 2100)
EE/9F33:	A20000  	LDX #$0000     (Zero X)
EE/9F36:	9E1896  	STZ $9618,X
EE/9F39:	9E1A96  	STZ $961A,X
EE/9F3C:	9E1C96  	STZ $961C,X
EE/9F3F:	9E1E96  	STZ $961E,X
EE/9F42:	9E2096  	STZ $9620,X
EE/9F45:	9E2296  	STZ $9622,X
EE/9F48:	9E2496  	STZ $9624,X
EE/9F4B:	9E2696  	STZ $9626,X
EE/9F4E:	9E2896  	STZ $9628,X
EE/9F51:	9E2A96  	STZ $962A,X
EE/9F54:	9E2C96  	STZ $962C,X
EE/9F57:	9E2E96  	STZ $962E,X
EE/9F5A:	9E3096  	STZ $9630,X
EE/9F5D:	9E3296  	STZ $9632,X
EE/9F60:	9E3496  	STZ $9634,X
EE/9F63:	9E3696  	STZ $9636,X
EE/9F66:	9E3896  	STZ $9638,X
EE/9F69:	9E3A96  	STZ $963A,X
EE/9F6C:	9E3C96  	STZ $963C,X
EE/9F6F:	9E3E96  	STZ $963E,X
EE/9F72:	9E4096  	STZ $9640,X
EE/9F75:	9E4296  	STZ $9642,X
EE/9F78:	9E4496  	STZ $9644,X
EE/9F7B:	9E4696  	STZ $9646,X
EE/9F7E:	9E4896  	STZ $9648,X
EE/9F81:	9E4A96  	STZ $964A,X
EE/9F84:	9E4C96  	STZ $964C,X
EE/9F87:	9E4E96  	STZ $964E,X
EE/9F8A:	9E5096  	STZ $9650,X
EE/9F8D:	9E5296  	STZ $9652,X
EE/9F90:	9E5496  	STZ $9654,X
EE/9F93:	9E5696  	STZ $9656,X
EE/9F96:	9E5896  	STZ $9658,X
EE/9F99:	9E5A96  	STZ $965A,X
EE/9F9C:	9E5C96  	STZ $965C,X
EE/9F9F:	9E5E96  	STZ $965E,X
EE/9FA2:	9E6096  	STZ $9660,X
EE/9FA5:	9E6296  	STZ $9662,X
EE/9FA8:	9E6496  	STZ $9664,X
EE/9FAB:	9E6696  	STZ $9666,X
EE/9FAE:	8A      	TXA            (Transfer X to A)
EE/9FAF:	18      	CLC            (XBA, INC A, XBA...)
EE/9FB0:	690001  	ADC #$0100
EE/9FB3:	AA      	TAX            (Transfer A to X)
EE/9FB4:	C90050  	CMP #$5000
EE/9FB7:	F003    	BEQ $9FBC
EE/9FB9:	4C369F  	JMP $9F36      (Loop)
EE/9FBC:	A0E001  	LDY #$01E0
EE/9FBF:	BE0200  	LDX $0002,Y
EE/9FC2:	BD1408  	LDA $0814,X
EE/9FC5:	8581    	STA $81        (WRAM address)
EE/9FC7:	BE0000  	LDX $0000,Y
EE/9FCA:	F031    	BEQ $9FFD
EE/9FCC:	8C5C0C  	STY $0C5C
EE/9FCF:	A00400  	LDY #$0004
EE/9FD2:	E220    	SEP #$20       (8-bit A)
EE/9FD4:	A580    	LDA $80        (WRAM data read)
EE/9FD6:	F003    	BEQ $9FDB
EE/9FD8:	9DFF7F  	STA $7FFF,X
EE/9FDB:	A580    	LDA $80        (WRAM data read)
EE/9FDD:	F003    	BEQ $9FE2
EE/9FDF:	9D0080  	STA $8000,X
EE/9FE2:	A580    	LDA $80        (WRAM data read)
EE/9FE4:	F003    	BEQ $9FE9
EE/9FE6:	9D0180  	STA $8001,X
EE/9FE9:	A580    	LDA $80        (WRAM data read)
EE/9FEB:	F003    	BEQ $9FF0
EE/9FED:	9D0280  	STA $8002,X
EE/9FF0:	C221    	REP #$21       (16-bit A; clear Carry)
EE/9FF2:	8A      	TXA            (Transfer X to A)
EE/9FF3:	E9FF00  	SBC #$00FF     (Subtract #$0100)
EE/9FF6:	AA      	TAX            (Transfer A to X)
EE/9FF7:	88      	DEY
EE/9FF8:	D0D8    	BNE $9FD2
EE/9FFA:	AC5C0C  	LDY $0C5C
EE/9FFD:	C8      	INY
EE/9FFE:	C8      	INY
EE/9FFF:	C8      	INY
EE/A000:	C8      	INY
EE/A001:	C00003  	CPY #$0300
EE/A004:	D0B9    	BNE $9FBF      (Loop if not)
EE/A006:	BE0200  	LDX $0002,Y
EE/A009:	BD1208  	LDA $0812,X
EE/A00C:	8581    	STA $81        (WRAM address)
EE/A00E:	BE0000  	LDX $0000,Y
EE/A011:	F038    	BEQ $A04B
EE/A013:	8C5C0C  	STY $0C5C
EE/A016:	A00500  	LDY #$0005
EE/A019:	E220    	SEP #$20       (8-bit A)
EE/A01B:	A580    	LDA $80        (WRAM data read)
EE/A01D:	F003    	BEQ $A022
EE/A01F:	9DFE7F  	STA $7FFE,X
EE/A022:	A580    	LDA $80        (WRAM data read)
EE/A024:	F003    	BEQ $A029
EE/A026:	9DFF7F  	STA $7FFF,X
EE/A029:	A580    	LDA $80        (WRAM data read)
EE/A02B:	F003    	BEQ $A030
EE/A02D:	9D0080  	STA $8000,X
EE/A030:	A580    	LDA $80        (WRAM data read)
EE/A032:	F003    	BEQ $A037
EE/A034:	9D0180  	STA $8001,X
EE/A037:	A580    	LDA $80        (WRAM data read)
EE/A039:	F003    	BEQ $A03E
EE/A03B:	9D0280  	STA $8002,X
EE/A03E:	C221    	REP #$21       (16-bit A; clear Carry)
EE/A040:	8A      	TXA            (Transfer X to A)
EE/A041:	E9FF00  	SBC #$00FF     (Subtract #$0100)
EE/A044:	AA      	TAX            (Transfer A to X)
EE/A045:	88      	DEY
EE/A046:	D0D1    	BNE $A019
EE/A048:	AC5C0C  	LDY $0C5C
EE/A04B:	C8      	INY
EE/A04C:	C8      	INY
EE/A04D:	C8      	INY
EE/A04E:	C8      	INY
EE/A04F:	C0C003  	CPY #$03C0
EE/A052:	D0B2    	BNE $A006      (Loop if not)
EE/A054:	BE0200  	LDX $0002,Y
EE/A057:	BD1008  	LDA $0810,X
EE/A05A:	8581    	STA $81        (WRAM address)
EE/A05C:	BE0000  	LDX $0000,Y
EE/A05F:	F03F    	BEQ $A0A0
EE/A061:	8C5C0C  	STY $0C5C
EE/A064:	A00600  	LDY #$0006
EE/A067:	E220    	SEP #$20       (8-bit A)
EE/A069:	A580    	LDA $80        (WRAM data read)
EE/A06B:	F003    	BEQ $A070
EE/A06D:	9DFE7F  	STA $7FFE,X
EE/A070:	A580    	LDA $80        (WRAM data read)
EE/A072:	F003    	BEQ $A077
EE/A074:	9DFF7F  	STA $7FFF,X
EE/A077:	A580    	LDA $80        (WRAM data read)
EE/A079:	F003    	BEQ $A07E
EE/A07B:	9D0080  	STA $8000,X
EE/A07E:	A580    	LDA $80        (WRAM data read)
EE/A080:	F003    	BEQ $A085
EE/A082:	9D0180  	STA $8001,X
EE/A085:	A580    	LDA $80        (WRAM data read)
EE/A087:	F003    	BEQ $A08C
EE/A089:	9D0280  	STA $8002,X
EE/A08C:	A580    	LDA $80        (WRAM data read)
EE/A08E:	F003    	BEQ $A093
EE/A090:	9D0380  	STA $8003,X
EE/A093:	C221    	REP #$21       (16-bit A; clear Carry)
EE/A095:	8A      	TXA            (Transfer X to A)
EE/A096:	E9FF00  	SBC #$00FF     (Subtract #$0100)
EE/A099:	AA      	TAX            (Transfer A to X)
EE/A09A:	88      	DEY
EE/A09B:	D0CA    	BNE $A067
EE/A09D:	AC5C0C  	LDY $0C5C
EE/A0A0:	C8      	INY
EE/A0A1:	C8      	INY
EE/A0A2:	C8      	INY
EE/A0A3:	C8      	INY
EE/A0A4:	C02004  	CPY #$0420
EE/A0A7:	D0AB    	BNE $A054      (Loop if not)
EE/A0A9:	BE0200  	LDX $0002,Y
EE/A0AC:	BD0E08  	LDA $080E,X
EE/A0AF:	8581    	STA $81        (WRAM address)
EE/A0B1:	BE0000  	LDX $0000,Y
EE/A0B4:	F046    	BEQ $A0FC
EE/A0B6:	8C5C0C  	STY $0C5C
EE/A0B9:	A00700  	LDY #$0007
EE/A0BC:	E220    	SEP #$20       (8-bit A)
EE/A0BE:	A580    	LDA $80        (WRAM data read)
EE/A0C0:	F003    	BEQ $A0C5
EE/A0C2:	9DFD7F  	STA $7FFD,X
EE/A0C5:	A580    	LDA $80        (WRAM data read)
EE/A0C7:	F003    	BEQ $A0CC
EE/A0C9:	9DFE7F  	STA $7FFE,X
EE/A0CC:	A580    	LDA $80        (WRAM data read)
EE/A0CE:	F003    	BEQ $A0D3
EE/A0D0:	9DFF7F  	STA $7FFF,X
EE/A0D3:	A580    	LDA $80        (WRAM data read)
EE/A0D5:	F003    	BEQ $A0DA
EE/A0D7:	9D0080  	STA $8000,X
EE/A0DA:	A580    	LDA $80        (WRAM data read)
EE/A0DC:	F003    	BEQ $A0E1
EE/A0DE:	9D0180  	STA $8001,X
EE/A0E1:	A580    	LDA $80        (WRAM data read)
EE/A0E3:	F003    	BEQ $A0E8
EE/A0E5:	9D0280  	STA $8002,X
EE/A0E8:	A580    	LDA $80        (WRAM data read)
EE/A0EA:	F003    	BEQ $A0EF
EE/A0EC:	9D0380  	STA $8003,X
EE/A0EF:	C221    	REP #$21       (16-bit A; clear Carry)
EE/A0F1:	8A      	TXA            (Transfer X to A)
EE/A0F2:	E9FF00  	SBC #$00FF     (Subtract #$0100)
EE/A0F5:	AA      	TAX            (Transfer A to X)
EE/A0F6:	88      	DEY
EE/A0F7:	D0C3    	BNE $A0BC
EE/A0F9:	AC5C0C  	LDY $0C5C
EE/A0FC:	C8      	INY
EE/A0FD:	C8      	INY
EE/A0FE:	C8      	INY
EE/A0FF:	C8      	INY
EE/A100:	C08004  	CPY #$0480
EE/A103:	D0A4    	BNE $A0A9      (Loop if not)
EE/A105:	BE0200  	LDX $0002,Y
EE/A108:	BD0C08  	LDA $080C,X
EE/A10B:	8581    	STA $81        (WRAM address)
EE/A10D:	BE0000  	LDX $0000,Y
EE/A110:	F04D    	BEQ $A15F
EE/A112:	8C5C0C  	STY $0C5C
EE/A115:	A00800  	LDY #$0008
EE/A118:	E220    	SEP #$20       (8-bit A)
EE/A11A:	A580    	LDA $80        (WRAM data read)
EE/A11C:	F003    	BEQ $A121
EE/A11E:	9DFD7F  	STA $7FFD,X
EE/A121:	A580    	LDA $80        (WRAM data read)
EE/A123:	F003    	BEQ $A128
EE/A125:	9DFE7F  	STA $7FFE,X
EE/A128:	A580    	LDA $80        (WRAM data read)
EE/A12A:	F003    	BEQ $A12F
EE/A12C:	9DFF7F  	STA $7FFF,X
EE/A12F:	A580    	LDA $80        (WRAM data read)
EE/A131:	F003    	BEQ $A136
EE/A133:	9D0080  	STA $8000,X
EE/A136:	A580    	LDA $80        (WRAM data read)
EE/A138:	F003    	BEQ $A13D
EE/A13A:	9D0180  	STA $8001,X
EE/A13D:	A580    	LDA $80        (WRAM data read)
EE/A13F:	F003    	BEQ $A144
EE/A141:	9D0280  	STA $8002,X
EE/A144:	A580    	LDA $80        (WRAM data read)
EE/A146:	F003    	BEQ $A14B
EE/A148:	9D0380  	STA $8003,X
EE/A14B:	A580    	LDA $80        (WRAM data read)
EE/A14D:	F003    	BEQ $A152
EE/A14F:	9D0480  	STA $8004,X
EE/A152:	C221    	REP #$21       (16-bit A; clear Carry)
EE/A154:	8A      	TXA            (Transfer X to A)
EE/A155:	E9FF00  	SBC #$00FF
EE/A158:	AA      	TAX            (Transfer A to X)
EE/A159:	88      	DEY
EE/A15A:	D0BC    	BNE $A118
EE/A15C:	AC5C0C  	LDY $0C5C
EE/A15F:	C8      	INY
EE/A160:	C8      	INY
EE/A161:	C8      	INY
EE/A162:	C8      	INY
EE/A163:	C0E004  	CPY #$04E0
EE/A166:	D09D    	BNE $A105      (Loop if not)
EE/A168:	BE0200  	LDX $0002,Y
EE/A16B:	BD0A08  	LDA $080A,X
EE/A16E:	8581    	STA $81        (WRAM address)
EE/A170:	BE0000  	LDX $0000,Y
EE/A173:	F054    	BEQ $A1C9
EE/A175:	8C5C0C  	STY $0C5C
EE/A178:	A00900  	LDY #$0009
EE/A17B:	E220    	SEP #$20       (8-bit A)
EE/A17D:	A580    	LDA $80        (WRAM data read)
EE/A17F:	F003    	BEQ $A184
EE/A181:	9DFC7F  	STA $7FFC,X
EE/A184:	A580    	LDA $80        (WRAM data read)
EE/A186:	F003    	BEQ $A18B
EE/A188:	9DFD7F  	STA $7FFD,X
EE/A18B:	A580    	LDA $80        (WRAM data read)
EE/A18D:	F003    	BEQ $A192
EE/A18F:	9DFE7F  	STA $7FFE,X
EE/A192:	A580    	LDA $80        (WRAM data read)
EE/A194:	F003    	BEQ $A199
EE/A196:	9DFF7F  	STA $7FFF,X
EE/A199:	A580    	LDA $80        (WRAM data read)
EE/A19B:	F003    	BEQ $A1A0
EE/A19D:	9D0080  	STA $8000,X
EE/A1A0:	A580    	LDA $80        (WRAM data read)
EE/A1A2:	F003    	BEQ $A1A7
EE/A1A4:	9D0180  	STA $8001,X
EE/A1A7:	A580    	LDA $80        (WRAM data read)
EE/A1A9:	F003    	BEQ $A1AE
EE/A1AB:	9D0280  	STA $8002,X
EE/A1AE:	A580    	LDA $80        (WRAM data read)
EE/A1B0:	F003    	BEQ $A1B5
EE/A1B2:	9D0380  	STA $8003,X
EE/A1B5:	A580    	LDA $80        (WRAM data read)
EE/A1B7:	F003    	BEQ $A1BC
EE/A1B9:	9D0480  	STA $8004,X
EE/A1BC:	C221    	REP #$21       (16-bit A; clear Carry)
EE/A1BE:	8A      	TXA            (Transfer X to A)
EE/A1BF:	E9FF00  	SBC #$00FF
EE/A1C2:	AA      	TAX            (Transfer A to X)
EE/A1C3:	88      	DEY
EE/A1C4:	D0B5    	BNE $A17B
EE/A1C6:	AC5C0C  	LDY $0C5C
EE/A1C9:	C8      	INY
EE/A1CA:	C8      	INY
EE/A1CB:	C8      	INY
EE/A1CC:	C8      	INY
EE/A1CD:	C01005  	CPY #$0510
EE/A1D0:	D096    	BNE $A168      (Loop if not)
EE/A1D2:	BE0200  	LDX $0002,Y
EE/A1D5:	BD0808  	LDA $0808,X
EE/A1D8:	8581    	STA $81        (WRAM address)
EE/A1DA:	BE0000  	LDX $0000,Y
EE/A1DD:	F05B    	BEQ $A23A
EE/A1DF:	8C5C0C  	STY $0C5C
EE/A1E2:	A00A00  	LDY #$000A
EE/A1E5:	E220    	SEP #$20       (8-bit A)
EE/A1E7:	A580    	LDA $80        (WRAM data read)
EE/A1E9:	F003    	BEQ $A1EE
EE/A1EB:	9DFC7F  	STA $7FFC,X
EE/A1EE:	A580    	LDA $80        (WRAM data read)
EE/A1F0:	F003    	BEQ $A1F5
EE/A1F2:	9DFD7F  	STA $7FFD,X
EE/A1F5:	A580    	LDA $80        (WRAM data read)
EE/A1F7:	F003    	BEQ $A1FC
EE/A1F9:	9DFE7F  	STA $7FFE,X
EE/A1FC:	A580    	LDA $80        (WRAM data read)
EE/A1FE:	F003    	BEQ $A203
EE/A200:	9DFF7F  	STA $7FFF,X
EE/A203:	A580    	LDA $80        (WRAM data read)
EE/A205:	F003    	BEQ $A20A
EE/A207:	9D0080  	STA $8000,X
EE/A20A:	A580    	LDA $80        (WRAM data read)
EE/A20C:	F003    	BEQ $A211
EE/A20E:	9D0180  	STA $8001,X
EE/A211:	A580    	LDA $80        (WRAM data read)
EE/A213:	F003    	BEQ $A218
EE/A215:	9D0280  	STA $8002,X
EE/A218:	A580    	LDA $80        (WRAM data read)
EE/A21A:	F003    	BEQ $A21F
EE/A21C:	9D0380  	STA $8003,X
EE/A21F:	A580    	LDA $80        (WRAM data read)
EE/A221:	F003    	BEQ $A226
EE/A223:	9D0480  	STA $8004,X
EE/A226:	A580    	LDA $80        (WRAM data read)
EE/A228:	F003    	BEQ $A22D
EE/A22A:	9D0580  	STA $8005,X
EE/A22D:	C221    	REP #$21       (16-bit A; clear Carry)
EE/A22F:	8A      	TXA            (Transfer X to A)
EE/A230:	E9FF00  	SBC #$00FF
EE/A233:	AA      	TAX            (Transfer A to X)
EE/A234:	88      	DEY
EE/A235:	D0AE    	BNE $A1E5
EE/A237:	AC5C0C  	LDY $0C5C
EE/A23A:	C8      	INY
EE/A23B:	C8      	INY
EE/A23C:	C8      	INY
EE/A23D:	C8      	INY
EE/A23E:	C04005  	CPY #$0540
EE/A241:	D08F    	BNE $A1D2      (Loop if not)
EE/A243:	BE0200  	LDX $0002,Y
EE/A246:	BD0608  	LDA $0806,X
EE/A249:	8581    	STA $81        (WRAM address)
EE/A24B:	BE0000  	LDX $0000,Y
EE/A24E:	F062    	BEQ $A2B2
EE/A250:	8C5C0C  	STY $0C5C
EE/A253:	A00B00  	LDY #$000B
EE/A256:	E220    	SEP #$20       (8-bit A)
EE/A258:	A580    	LDA $80        (WRAM data read)
EE/A25A:	F003    	BEQ $A25F
EE/A25C:	9DFB7F  	STA $7FFB,X
EE/A25F:	A580    	LDA $80        (WRAM data read)
EE/A261:	F003    	BEQ $A266
EE/A263:	9DFC7F  	STA $7FFC,X
EE/A266:	A580    	LDA $80        (WRAM data read)
EE/A268:	F003    	BEQ $A26D
EE/A26A:	9DFD7F  	STA $7FFD,X
EE/A26D:	A580    	LDA $80        (WRAM data read)
EE/A26F:	F003    	BEQ $A274
EE/A271:	9DFE7F  	STA $7FFE,X
EE/A274:	A580    	LDA $80        (WRAM data read)
EE/A276:	F003    	BEQ $A27B
EE/A278:	9DFF7F  	STA $7FFF,X
EE/A27B:	A580    	LDA $80        (WRAM data read)
EE/A27D:	F003    	BEQ $A282
EE/A27F:	9D0080  	STA $8000,X
EE/A282:	A580    	LDA $80        (WRAM data read)
EE/A284:	F003    	BEQ $A289
EE/A286:	9D0180  	STA $8001,X
EE/A289:	A580    	LDA $80        (WRAM data read)
EE/A28B:	F003    	BEQ $A290
EE/A28D:	9D0280  	STA $8002,X
EE/A290:	A580    	LDA $80        (WRAM data read)
EE/A292:	F003    	BEQ $A297
EE/A294:	9D0380  	STA $8003,X
EE/A297:	A580    	LDA $80        (WRAM data read)
EE/A299:	F003    	BEQ $A29E
EE/A29B:	9D0480  	STA $8004,X
EE/A29E:	A580    	LDA $80        (WRAM data read)
EE/A2A0:	F003    	BEQ $A2A5
EE/A2A2:	9D0580  	STA $8005,X
EE/A2A5:	C221    	REP #$21       (16-bit A; clear Carry)
EE/A2A7:	8A      	TXA            (Transfer X to A)
EE/A2A8:	E9FF00  	SBC #$00FF
EE/A2AB:	AA      	TAX            (Transfer A to X)
EE/A2AC:	88      	DEY
EE/A2AD:	D0A7    	BNE $A256
EE/A2AF:	AC5C0C  	LDY $0C5C
EE/A2B2:	C8      	INY
EE/A2B3:	C8      	INY
EE/A2B4:	C8      	INY
EE/A2B5:	C8      	INY
EE/A2B6:	C07005  	CPY #$0570
EE/A2B9:	D088    	BNE $A243      (Loop if not)
EE/A2BB:	BE0200  	LDX $0002,Y
EE/A2BE:	BD0408  	LDA $0804,X
EE/A2C1:	8581    	STA $81        (WRAM address)
EE/A2C3:	BE0000  	LDX $0000,Y
EE/A2C6:	F069    	BEQ $A331
EE/A2C8:	8C5C0C  	STY $0C5C
EE/A2CB:	A00C00  	LDY #$000C
EE/A2CE:	E220    	SEP #$20       (8-bit A)
EE/A2D0:	A580    	LDA $80        (WRAM data read)
EE/A2D2:	F003    	BEQ $A2D7
EE/A2D4:	9DFB7F  	STA $7FFB,X
EE/A2D7:	A580    	LDA $80        (WRAM data read)
EE/A2D9:	F003    	BEQ $A2DE
EE/A2DB:	9DFC7F  	STA $7FFC,X
EE/A2DE:	A580    	LDA $80        (WRAM data read)
EE/A2E0:	F003    	BEQ $A2E5
EE/A2E2:	9DFD7F  	STA $7FFD,X
EE/A2E5:	A580    	LDA $80        (WRAM data read)
EE/A2E7:	F003    	BEQ $A2EC
EE/A2E9:	9DFE7F  	STA $7FFE,X
EE/A2EC:	A580    	LDA $80        (WRAM data read)
EE/A2EE:	F003    	BEQ $A2F3
EE/A2F0:	9DFF7F  	STA $7FFF,X
EE/A2F3:	A580    	LDA $80        (WRAM data read)
EE/A2F5:	F003    	BEQ $A2FA
EE/A2F7:	9D0080  	STA $8000,X
EE/A2FA:	A580    	LDA $80        (WRAM data read)
EE/A2FC:	F003    	BEQ $A301
EE/A2FE:	9D0180  	STA $8001,X
EE/A301:	A580    	LDA $80        (WRAM data read)
EE/A303:	F003    	BEQ $A308
EE/A305:	9D0280  	STA $8002,X
EE/A308:	A580    	LDA $80        (WRAM data read)
EE/A30A:	F003    	BEQ $A30F
EE/A30C:	9D0380  	STA $8003,X
EE/A30F:	A580    	LDA $80        (WRAM data read)
EE/A311:	F003    	BEQ $A316
EE/A313:	9D0480  	STA $8004,X
EE/A316:	A580    	LDA $80        (WRAM data read)
EE/A318:	F003    	BEQ $A31D
EE/A31A:	9D0580  	STA $8005,X
EE/A31D:	A580    	LDA $80        (WRAM data read)
EE/A31F:	F003    	BEQ $A324
EE/A321:	9D0680  	STA $8006,X
EE/A324:	C221    	REP #$21       (16-bit A; clear Carry)
EE/A326:	8A      	TXA            (Transfer X to A)
EE/A327:	E9FF00  	SBC #$00FF
EE/A32A:	AA      	TAX            (Transfer A to X)
EE/A32B:	88      	DEY
EE/A32C:	D0A0    	BNE $A2CE
EE/A32E:	AC5C0C  	LDY $0C5C
EE/A331:	C8      	INY
EE/A332:	C8      	INY
EE/A333:	C8      	INY
EE/A334:	C8      	INY
EE/A335:	C0A005  	CPY #$05A0
EE/A338:	D081    	BNE $A2BB      (Loop if not)
EE/A33A:	BE0200  	LDX $0002,Y
EE/A33D:	BD0208  	LDA $0802,X
EE/A340:	8581    	STA $81        (WRAM address)
EE/A342:	BE0000  	LDX $0000,Y
EE/A345:	F077    	BEQ $A3BE
EE/A347:	8C5C0C  	STY $0C5C
EE/A34A:	A00E00  	LDY #$000E
EE/A34D:	E220    	SEP #$20       (8-bit A)
EE/A34F:	A580    	LDA $80        (WRAM data read)
EE/A351:	F003    	BEQ $A356
EE/A353:	9DFA7F  	STA $7FFA,X
EE/A356:	A580    	LDA $80        (WRAM data read)
EE/A358:	F003    	BEQ $A35D
EE/A35A:	9DFB7F  	STA $7FFB,X
EE/A35D:	A580    	LDA $80        (WRAM data read)
EE/A35F:	F003    	BEQ $A364
EE/A361:	9DFC7F  	STA $7FFC,X
EE/A364:	A580    	LDA $80        (WRAM data read)
EE/A366:	F003    	BEQ $A36B
EE/A368:	9DFD7F  	STA $7FFD,X
EE/A36B:	A580    	LDA $80        (WRAM data read)
EE/A36D:	F003    	BEQ $A372
EE/A36F:	9DFE7F  	STA $7FFE,X
EE/A372:	A580    	LDA $80        (WRAM data read)
EE/A374:	F003    	BEQ $A379
EE/A376:	9DFF7F  	STA $7FFF,X
EE/A379:	A580    	LDA $80        (WRAM data read)
EE/A37B:	F003    	BEQ $A380
EE/A37D:	9D0080  	STA $8000,X
EE/A380:	A580    	LDA $80        (WRAM data read)
EE/A382:	F003    	BEQ $A387
EE/A384:	9D0180  	STA $8001,X
EE/A387:	A580    	LDA $80        (WRAM data read)
EE/A389:	F003    	BEQ $A38E
EE/A38B:	9D0280  	STA $8002,X
EE/A38E:	A580    	LDA $80        (WRAM data read)
EE/A390:	F003    	BEQ $A395
EE/A392:	9D0380  	STA $8003,X
EE/A395:	A580    	LDA $80        (WRAM data read)
EE/A397:	F003    	BEQ $A39C
EE/A399:	9D0480  	STA $8004,X
EE/A39C:	A580    	LDA $80        (WRAM data read)
EE/A39E:	F003    	BEQ $A3A3
EE/A3A0:	9D0580  	STA $8005,X
EE/A3A3:	A580    	LDA $80        (WRAM data read)
EE/A3A5:	F003    	BEQ $A3AA
EE/A3A7:	9D0680  	STA $8006,X
EE/A3AA:	A580    	LDA $80        (WRAM data read)
EE/A3AC:	F003    	BEQ $A3B1
EE/A3AE:	9D0780  	STA $8007,X
EE/A3B1:	C221    	REP #$21       (16-bit A; clear Carry)
EE/A3B3:	8A      	TXA            (Transfer X to A)
EE/A3B4:	E9FF00  	SBC #$00FF
EE/A3B7:	AA      	TAX            (Transfer A to X)
EE/A3B8:	88      	DEY
EE/A3B9:	D092    	BNE $A34D
EE/A3BB:	AC5C0C  	LDY $0C5C
EE/A3BE:	C8      	INY
EE/A3BF:	C8      	INY
EE/A3C0:	C8      	INY
EE/A3C1:	C8      	INY
EE/A3C2:	C0D005  	CPY #$05D0
EE/A3C5:	F003    	BEQ $A3CA      (Loop if not)
EE/A3C7:	4C3AA3  	JMP $A33A      (Loop)
EE/A3CA:	BE0200  	LDX $0002,Y
EE/A3CD:	BD0008  	LDA $0800,X
EE/A3D0:	8581    	STA $81        (WRAM address)
EE/A3D2:	BE0000  	LDX $0000,Y
EE/A3D5:	D003    	BNE $A3DA
EE/A3D7:	4C5FA4  	JMP $A45F
EE/A3DA:	8C5C0C  	STY $0C5C
EE/A3DD:	A01000  	LDY #$0010
EE/A3E0:	E220    	SEP #$20       (8-bit A)
EE/A3E2:	A580    	LDA $80        (WRAM data read)
EE/A3E4:	F003    	BEQ $A3E9
EE/A3E6:	9DF97F  	STA $7FF9,X
EE/A3E9:	A580    	LDA $80        (WRAM data read)
EE/A3EB:	F003    	BEQ $A3F0
EE/A3ED:	9DFA7F  	STA $7FFA,X
EE/A3F0:	A580    	LDA $80        (WRAM data read)
EE/A3F2:	F003    	BEQ $A3F7
EE/A3F4:	9DFB7F  	STA $7FFB,X
EE/A3F7:	A580    	LDA $80        (WRAM data read)
EE/A3F9:	F003    	BEQ $A3FE
EE/A3FB:	9DFC7F  	STA $7FFC,X
EE/A3FE:	A580    	LDA $80        (WRAM data read)
EE/A400:	F003    	BEQ $A405
EE/A402:	9DFD7F  	STA $7FFD,X
EE/A405:	A580    	LDA $80        (WRAM data read)
EE/A407:	F003    	BEQ $A40C
EE/A409:	9DFE7F  	STA $7FFE,X
EE/A40C:	A580    	LDA $80        (WRAM data read)
EE/A40E:	F003    	BEQ $A413
EE/A410:	9DFF7F  	STA $7FFF,X
EE/A413:	A580    	LDA $80        (WRAM data read)
EE/A415:	F003    	BEQ $A41A
EE/A417:	9D0080  	STA $8000,X
EE/A41A:	A580    	LDA $80        (WRAM data read)
EE/A41C:	F003    	BEQ $A421
EE/A41E:	9D0180  	STA $8001,X
EE/A421:	A580    	LDA $80        (WRAM data read)
EE/A423:	F003    	BEQ $A428
EE/A425:	9D0280  	STA $8002,X
EE/A428:	A580    	LDA $80        (WRAM data read)
EE/A42A:	F003    	BEQ $A42F
EE/A42C:	9D0380  	STA $8003,X
EE/A42F:	A580    	LDA $80        (WRAM data read)
EE/A431:	F003    	BEQ $A436
EE/A433:	9D0480  	STA $8004,X
EE/A436:	A580    	LDA $80        (WRAM data read)
EE/A438:	F003    	BEQ $A43D
EE/A43A:	9D0580  	STA $8005,X
EE/A43D:	A580    	LDA $80        (WRAM data read)
EE/A43F:	F003    	BEQ $A444
EE/A441:	9D0680  	STA $8006,X
EE/A444:	A580    	LDA $80        (WRAM data read)
EE/A446:	F003    	BEQ $A44B
EE/A448:	9D0780  	STA $8007,X
EE/A44B:	A580    	LDA $80        (WRAM data read)
EE/A44D:	F003    	BEQ $A452
EE/A44F:	9D0880  	STA $8008,X
EE/A452:	C221    	REP #$21       (16-bit A; clear Carry)
EE/A454:	8A      	TXA            (Transfer X to A)
EE/A455:	E9FF00  	SBC #$00FF
EE/A458:	AA      	TAX            (Transfer A to X)
EE/A459:	88      	DEY
EE/A45A:	D084    	BNE $A3E0
EE/A45C:	AC5C0C  	LDY $0C5C
EE/A45F:	C8      	INY
EE/A460:	C8      	INY
EE/A461:	C8      	INY
EE/A462:	C8      	INY
EE/A463:	C00006  	CPY #$0600
EE/A466:	F003    	BEQ $A46B      (Branch if so)
EE/A468:	4CCAA3  	JMP $A3CA      (Loop)
EE/A46B:	A90100  	LDA #$0001
EE/A46E:	8F240000	STA $000024    (Inform NMI routine that this function has completed)
EE/A472:	2B      	PLD
EE/A473:	28      	PLP
EE/A474:	AB      	PLB
EE/A475:	60      	RTS

LZSS decompression (source is $D2-$D4, destination is $D5-$D7)
EE/A476:	8B      	PHB
EE/A477:	0B      	PHD
EE/A478:	A20000  	LDX #$0000     (Zero X) (PEA $0000, PLD...)
EE/A47B:	DA      	PHX
EE/A47C:	2B      	PLD            (Set direct page to 0000)
EE/A47D:	C220    	REP #$20       (16-bit A)
EE/A47F:	A7D2    	LDA [$D2]      (Size of compressed data)
EE/A481:	85DB    	STA $DB        (Save in RAM)
EE/A483:	A5D5    	LDA $D5        (Destination address)
EE/A485:	8F812100	STA $002181    (Save as WRAM address)
EE/A489:	E220    	SEP #$20       (8-bit A)
EE/A48B:	A5D7    	LDA $D7        (Destination bank)
EE/A48D:	2901    	AND #$01       (7E becomes 00, 7F becomes 01)
EE/A48F:	8F832100	STA $002183    (Save as WRAM bank)
EE/A493:	A901    	LDA #$01
EE/A495:	85DD    	STA $DD
EE/A497:	A00200  	LDY #$0002     (Point past size bytes)
EE/A49A:	A97E    	LDA #$7E
EE/A49C:	48      	PHA
EE/A49D:	AB      	PLB            (Set data bank to 7E)
EE/A49E:	A200F8  	LDX #$F800     (Start from 7E/F800)
EE/A4A1:	7B      	TDC            (Zero A)
EE/A4A2:	9D0000  	STA $0000,X    (Zero 7E/F800+X)
EE/A4A5:	E8      	INX            (Increase X)
EE/A4A6:	D0FA    	BNE $A4A2      (Loop until 7E/FFFF has been processed)
EE/A4A8:	A2DEFF  	LDX #$FFDE
EE/A4AB:	C6DD    	DEC $DD
EE/A4AD:	D009    	BNE $A4B8
EE/A4AF:	A908    	LDA #$08
EE/A4B1:	85DD    	STA $DD
EE/A4B3:	B7D2    	LDA [$D2],Y    (Load a byte from buffer)
EE/A4B5:	85DE    	STA $DE        (Save it for now)
EE/A4B7:	C8      	INY            (Point to next byte in buffer)
EE/A4B8:	46DE    	LSR $DE        (Halve $DE)
EE/A4BA:	9011    	BCC $A4CD      (Branch if low bit was clear)
EE/A4BC:	B7D2    	LDA [$D2],Y    (Load next byte from buffer)
EE/A4BE:	8F802100	STA $002180    (WRAM data write)
EE/A4C2:	9D0000  	STA $0000,X    (Save to $FFDE+X)
EE/A4C5:	E8      	INX
EE/A4C6:	D037    	BNE $A4FF      (Branch if X hasn't reached zero)
EE/A4C8:	A200F8  	LDX #$F800     (Set starting position again)
EE/A4CB:	8032    	BRA $A4FF
EE/A4CD:	B7D2    	LDA [$D2],Y    (Load next byte from buffer)
EE/A4CF:	EB      	XBA            (Exchange B and A)
EE/A4D0:	C8      	INY            (Move to the next byte in buffer)
EE/A4D1:	84D8    	STY $D8        (Save Y)
EE/A4D3:	B7D2    	LDA [$D2],Y    (Load another byte from buffer)
EE/A4D5:	4A      	LSR A          (Divide by 2)
EE/A4D6:	4A      	LSR A          (Divide by 4)
EE/A4D7:	4A      	LSR A          (Divide by 8)
EE/A4D8:	18      	CLC            (Clear Carry for addition)
EE/A4D9:	6903    	ADC #$03       (Add 3)
EE/A4DB:	85DA    	STA $DA
EE/A4DD:	B7D2    	LDA [$D2],Y    (Load the byte again)
EE/A4DF:	09F8    	ORA #$F8       (Set bits 3-7, this will form an address)
EE/A4E1:	EB      	XBA            (Exchange B and A)
EE/A4E2:	A8      	TAY            (Transfer A to Y)
EE/A4E3:	B90000  	LDA $0000,Y    (Load from 7E/F800+Y)
EE/A4E6:	8F802100	STA $002180    (WRAM data write)
EE/A4EA:	9D0000  	STA $0000,X    (To 7E/FFDE+X)
EE/A4ED:	E8      	INX
EE/A4EE:	D003    	BNE $A4F3      (Branch if X hasn't reached zero)
EE/A4F0:	A200F8  	LDX #$F800     (Set starting position again)
EE/A4F3:	C8      	INY
EE/A4F4:	D003    	BNE $A4F9      (Branch if Y hasn't reached zero)
EE/A4F6:	A000F8  	LDY #$F800     (Set starting position again)
EE/A4F9:	C6DA    	DEC $DA
EE/A4FB:	D0E6    	BNE $A4E3      (Loop unless null)
EE/A4FD:	A4D8    	LDY $D8        (Restore Y)
EE/A4FF:	C8      	INY            (Point to next byte in buffer)
EE/A500:	C4DB    	CPY $DB        (Decompressed all data?)
EE/A502:	D0A7    	BNE $A4AB      (Loop if not)
EE/A504:	7B      	TDC            (Zero A)
EE/A505:	EB      	XBA            (...)
EE/A506:	2B      	PLD
EE/A507:	AB      	PLB
EE/A508:	60      	RTS

NMI for vehicle mode
EE/A509:	08      	PHP            (Interrupts automatically push the processor status...)
EE/A50A:	8B      	PHB
EE/A50B:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/A50D:	48      	PHA
EE/A50E:	C210    	REP #$10       (16-bit indexes)
EE/A510:	DA      	PHX
EE/A511:	5A      	PHY
EE/A512:	0B      	PHD
EE/A513:	E220    	SEP #$20       (8-bit A)
EE/A515:	7B      	TDC            (Zero A)
EE/A516:	48      	PHA
EE/A517:	AB      	PLB            (Set data bank to 00)
EE/A518:	EE2400  	INC $0024      (Increase NMI count)
EE/A51B:	CD1042  	CMP $4210      (Clear NMI flag)
EE/A51E:	220C00C3	JSL $C3000C    (Adjust in-game time)
EE/A522:	A5F7    	LDA $F7        (Pose number of map character)
EE/A524:	A2006F  	LDX #$6F00     (VRAM pointer will be to $DE00)
EE/A527:	220000C0	JSL $C00000    (Transfer character sprites to VRAM, may be pointless)
EE/A52B:	A644    	LDX $44        (First VRAM pointer for NMI)
EE/A52D:	3026    	BMI $A555      (Branch if the high bit is set; the value used for that is #$8000)
EE/A52F:	8E1621  	STX $2116      (Set VRAM pointer)
EE/A532:	A20018  	LDX #$1800
EE/A535:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/A538:	A2506D  	LDX #$6D50
EE/A53B:	8E0243  	STX $4302      (Source address)
EE/A53E:	A97E    	LDA #$7E
EE/A540:	8D0443  	STA $4304      (Source bank; 7E/6D50)
EE/A543:	A20001  	LDX #$0100
EE/A546:	8E0543  	STX $4305      (Number of bytes: #$0100)
EE/A549:	A900    	LDA #$00
EE/A54B:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2118 or $2139 is accessed) (STZ...)
EE/A54E:	A901    	LDA #$01
EE/A550:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A553:	804F    	BRA $A5A4      (Skip the following VRAM-related segment of code)
EE/A555:	A646    	LDX $46        (Second VRAM pointer for NMI)
EE/A557:	304B    	BMI $A5A4      (Branch if the high bit is set; the value used for that is #$8000)
EE/A559:	8E1621  	STX $2116      (Set VRAM pointer)
EE/A55C:	A20018  	LDX #$1800
EE/A55F:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/A562:	A2506E  	LDX #$6E50
EE/A565:	8E0243  	STX $4302      (Source address)
EE/A568:	A97E    	LDA #$7E
EE/A56A:	8D0443  	STA $4304      (Source bank; 7E/6E50)
EE/A56D:	A28000  	LDX #$0080
EE/A570:	8E0543  	STX $4305      (Number of bytes: #$0080)
EE/A573:	A902    	LDA #$02
EE/A575:	8D1521  	STA $2115      (VRAM pointer increases by 128 words when $2118 or $2139 is accessed)
EE/A578:	A901    	LDA #$01
EE/A57A:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A57D:	A646    	LDX $46        (Second VRAM pointer for NMI)
EE/A57F:	E8      	INX            (Increase it by a word)
EE/A580:	8E1621  	STX $2116      (Set VRAM pointer)
EE/A583:	A20018  	LDX #$1800
EE/A586:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/A589:	A2D06E  	LDX #$6ED0
EE/A58C:	8E0243  	STX $4302      (Source address)
EE/A58F:	A97E    	LDA #$7E
EE/A591:	8D0443  	STA $4304      (Source bank; 7E/6ED0)
EE/A594:	A28000  	LDX #$0080
EE/A597:	8E0543  	STX $4305      (Number of bytes: #$0080)
EE/A59A:	A902    	LDA #$02
EE/A59C:	8D1521  	STA $2115      (VRAM pointer increases by 128 words when $2118 or $2139 is accessed)
EE/A59F:	A901    	LDA #$01
EE/A5A1:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A5A4:	9C2121  	STZ $2121      (Zero CGRAM address)
EE/A5A7:	A20022  	LDX #$2200
EE/A5AA:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2122: CGRAM)
EE/A5AD:	A200E0  	LDX #$E000
EE/A5B0:	8E0243  	STX $4302      (Source address)
EE/A5B3:	A97E    	LDA #$7E
EE/A5B5:	8D0443  	STA $4304      (Source bank; 7E/E000, palettes)
EE/A5B8:	A20002  	LDX #$0200
EE/A5BB:	8E0543  	STX $4305      (Number of bytes: #$0200)
EE/A5BE:	A901    	LDA #$01
EE/A5C0:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A5C3:	C220    	REP #$20       (16-bit A)
EE/A5C5:	A534    	LDA $34        (Current X position in pixels)
EE/A5C7:	38      	SEC            (Set Carry for subtraction)
EE/A5C8:	E57B    	SBC $7B
EE/A5CA:	29FF1F  	AND #$1FFF
EE/A5CD:	8D7700  	STA $0077
EE/A5D0:	A538    	LDA $38        (Current Y position in pixels)
EE/A5D2:	38      	SEC            (Set Carry for subtraction)
EE/A5D3:	E57D    	SBC $7D
EE/A5D5:	29FF1F  	AND #$1FFF
EE/A5D8:	8D7900  	STA $0079
EE/A5DB:	E220    	SEP #$20       (8-bit A)
EE/A5DD:	A577    	LDA $77
EE/A5DF:	8D0D21  	STA $210D      (BG1/Mode 7 BG horizontal scroll, low byte)
EE/A5E2:	A578    	LDA $78
EE/A5E4:	8D0D21  	STA $210D      (BG1/Mode 7 BG horizontal scroll, high byte)
EE/A5E7:	A579    	LDA $79
EE/A5E9:	8D0E21  	STA $210E      (BG1/Mode 7 BG vertical scroll, low byte)
EE/A5EC:	A57A    	LDA $7A
EE/A5EE:	8D0E21  	STA $210E      (BG1/Mode 7 BG vertical scroll, high byte)
EE/A5F1:	A534    	LDA $34        (Current X position in pixels, low byte)
EE/A5F3:	8D1F21  	STA $211F      (Mode 7 center X, low byte)
EE/A5F6:	A535    	LDA $35        (Current X position in pixels, high byte)
EE/A5F8:	8D1F21  	STA $211F      (Mode 7 center X, high byte)
EE/A5FB:	A538    	LDA $38        (Current Y position in pixels, low byte)
EE/A5FD:	8D2021  	STA $2120      (Mode 7 center Y, low byte)
EE/A600:	A539    	LDA $39        (Current Y position in pixels, high byte)
EE/A602:	8D2021  	STA $2120      (Mode 7 center Y, high byte)
EE/A605:	9C0043  	STZ $4300      (Control for DMA channel 0)
EE/A608:	A904    	LDA #$04       (Destination: $2104; OAM)
EE/A60A:	8D0143  	STA $4301      (Set destination for DMA channel 0)
EE/A60D:	A2306B  	LDX #$6B30
EE/A610:	8E0243  	STX $4302      (Source address)
EE/A613:	A97E    	LDA #$7E
EE/A615:	8D0443  	STA $4304      (Source bank; 7E/6B30)
EE/A618:	A22002  	LDX #$0220
EE/A61B:	8E0543  	STX $4305      (Number of bytes: #$0220)
EE/A61E:	A901    	LDA #$01
EE/A620:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A623:	AF641F00	LDA $001F64    (Map number from SRAM, low byte)
EE/A627:	C902    	CMP #$02       (Serpent Trench?)
EE/A629:	F049    	BEQ $A674      (Branch if so)
EE/A62B:	A980    	LDA #$80
EE/A62D:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/A630:	A20011  	LDX #$1100
EE/A633:	8E1621  	STX $2116      (Set VRAM pointer to $2200)
EE/A636:	A20019  	LDX #$1900
EE/A639:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2119: VRAM, high byte)
EE/A63C:	A250B7  	LDX #$B750
EE/A63F:	8E0243  	STX $4302      (Source address)
EE/A642:	A97E    	LDA #$7E
EE/A644:	8D0443  	STA $4304      (Source bank; 7E/B750)
EE/A647:	A28000  	LDX #$0080
EE/A64A:	8E0543  	STX $4305      (Number of bytes: #$0080)
EE/A64D:	A901    	LDA #$01
EE/A64F:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A652:	A20015  	LDX #$1500
EE/A655:	8E1621  	STX $2116      (Set VRAM pointer to $2A00)
EE/A658:	A20019  	LDX #$1900
EE/A65B:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2119: VRAM, high byte)
EE/A65E:	A2D0B7  	LDX #$B7D0
EE/A661:	8E0243  	STX $4302      (Source address)
EE/A664:	A97E    	LDA #$7E
EE/A666:	8D0443  	STA $4304      (Source bank; 7E/B7D0)
EE/A669:	A28000  	LDX #$0080
EE/A66C:	8E0543  	STX $4305      (Number of bytes: #$0080)
EE/A66F:	A901    	LDA #$01
EE/A671:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A674:	A5E7    	LDA $E7        (...)
EE/A676:	8901    	BIT #$01       (...)
EE/A678:	D006    	BNE $A680      (...)
EE/A67A:	A520    	LDA $20        (Map mode...)
EE/A67C:	C901    	CMP #$01       (Airship mode?...)
EE/A67E:	D000    	BNE $A680      (If not...)
EE/A680:	E220    	SEP #$20       (8-bit A)
EE/A682:	A523    	LDA $23        (Current brightness)
EE/A684:	D002    	BNE $A688      (Branch if the screen is not set to be blank)
EE/A686:	A980    	LDA #$80       (Disable screen)
EE/A688:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/A68B:	64FA    	STZ $FA
EE/A68D:	A5E9    	LDA $E9
EE/A68F:	8901    	BIT #$01
EE/A691:	F006    	BEQ $A699      (LSR A, BCC...)
EE/A693:	A5FA    	LDA $FA
EE/A695:	0904    	ORA #$04
EE/A697:	85FA    	STA $FA        (Save changes) (LDA #$04, TSB/STA $FA...)
EE/A699:	A5E9    	LDA $E9
EE/A69B:	8902    	BIT #$02
EE/A69D:	F006    	BEQ $A6A5
EE/A69F:	A5FA    	LDA $FA
EE/A6A1:	0908    	ORA #$08
EE/A6A3:	85FA    	STA $FA        (Save changes) (LDA #$08, TSB $FA...)
EE/A6A5:	A9F2    	LDA #$F2
EE/A6A7:	05FA    	ORA $FA
EE/A6A9:	8D0C42  	STA $420C      (Enable selected HDMA channels)
EE/A6AC:	2B      	PLD
EE/A6AD:	C210    	REP #$10       (16-bit indexes) (REP #$30...)
EE/A6AF:	7A      	PLY
EE/A6B0:	FA      	PLX
EE/A6B1:	C220    	REP #$20       (16-bit A)
EE/A6B3:	68      	PLA
EE/A6B4:	AB      	PLB
EE/A6B5:	28      	PLP
EE/A6B6:	40      	RTI

IRQ for airship mode
EE/A6B7:	08      	PHP            (Interrupts automatically push the processor status...)
EE/A6B8:	C220    	REP #$20       (16-bit A)
EE/A6BA:	48      	PHA            (Save A)
EE/A6BB:	8B      	PHB            (Save data bank)
EE/A6BC:	E220    	SEP #$20       (8-bit A)
EE/A6BE:	7B      	TDC            (Zero A)
EE/A6BF:	48      	PHA
EE/A6C0:	AB      	PLB            (Set data bank to 00)
EE/A6C1:	CD1142  	CMP $4211      (Clear IRQ flag)
EE/A6C4:	A907    	LDA #$07
EE/A6C6:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/A6C9:	AB      	PLB
EE/A6CA:	C220    	REP #$20       (16-bit A)
EE/A6CC:	68      	PLA
EE/A6CD:	28      	PLP
EE/A6CE:	40      	RTI

IRQ for chocobo mode
EE/A6CF:	08      	PHP            (Interrupts automatically push the processor status...)
EE/A6D0:	C220    	REP #$20       (16-bit A)
EE/A6D2:	48      	PHA            (Save A)
EE/A6D3:	8B      	PHB            (Save data bank)
EE/A6D4:	E220    	SEP #$20       (8-bit A)
EE/A6D6:	7B      	TDC            (Zero A)
EE/A6D7:	48      	PHA
EE/A6D8:	AB      	PLB            (Set data bank to 00)
EE/A6D9:	CD1142  	CMP $4211      (Clear IRQ flag)
EE/A6DC:	AD1242  	LDA $4212      (PPU status)
EE/A6DF:	8940    	BIT #$40       (H-Blank flag set?)
EE/A6E1:	D0F9    	BNE $A6DC      (If so, loop) (ASL A, BMI...)
EE/A6E3:	CD3721  	CMP $2137      (Latch H/V-Count)
EE/A6E6:	AD3D21  	LDA $213D      (V-Count data)
EE/A6E9:	CD3D21  	CMP $213D
EE/A6EC:	C990    	CMP #$90
EE/A6EE:	B00C    	BCS $A6FC
EE/A6F0:	A99C    	LDA #$9C
EE/A6F2:	8D0942  	STA $4209      (V-Count timer, low byte)
EE/A6F5:	A907    	LDA #$07
EE/A6F7:	8D0521  	STA $2105      (BG mode 7, 8x8 tiles)
EE/A6FA:	8005    	BRA $A701      (Exit)
EE/A6FC:	A963    	LDA #$63
EE/A6FE:	8D3121  	STA $2131      (Enable color math (half) for BG1, BG2, and backdrop)
EE/A701:	AB      	PLB            (Restore data bank)
EE/A702:	C220    	REP #$20       (16-bit A)
EE/A704:	68      	PLA
EE/A705:	28      	PLP
EE/A706:	40      	RTI

IRQ for the scene with the airship heading to Vector
EE/A707:	08      	PHP            (Interrupts automatically push the processor status...)
EE/A708:	C220    	REP #$20       (16-bit A)
EE/A70A:	48      	PHA
EE/A70B:	E220    	SEP #$20       (8-bit A)
EE/A70D:	CF114200	CMP $004211    (Clear IRQ flag)
EE/A711:	A907    	LDA #$07
EE/A713:	8F052100	STA $002105    (BG mode and character size settings)
EE/A717:	A902    	LDA #$02
EE/A719:	8F302100	STA $002130    (Color addition select)
EE/A71D:	A9A3    	LDA #$A3
EE/A71F:	8F312100	STA $002131    (Enable color math for BG1, BG2, and backdrop; subtract colors)
EE/A723:	C220    	REP #$20       (16-bit A)
EE/A725:	68      	PLA
EE/A726:	28      	PLP
EE/A727:	40      	RTI

NMI for character mode
EE/A728:	08      	PHP            (Interrupts automatically push the processor status...)
EE/A729:	8B      	PHB
EE/A72A:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/A72C:	48      	PHA            (Save A)
EE/A72D:	C210    	REP #$10       (16-bit indexes)
EE/A72F:	DA      	PHX
EE/A730:	5A      	PHY
EE/A731:	0B      	PHD
EE/A732:	E220    	SEP #$20       (8-bit A)
EE/A734:	7B      	TDC            (Zero A)
EE/A735:	48      	PHA
EE/A736:	AB      	PLB            (Set data bank to 00)
EE/A737:	EE2400  	INC $0024      (Increase NMI count)
EE/A73A:	CD1042  	CMP $4210      (Clear NMI flag)
EE/A73D:	220C00C3	JSL $C3000C    (Adjust in-game time)
EE/A741:	A5E8    	LDA $E8
EE/A743:	8920    	BIT #$20       (Is a battle about to occur?)
EE/A745:	F003    	BEQ $A74A      (Branch if not)
EE/A747:	4CD2A8  	JMP $A8D2
EE/A74A:	8980    	BIT #$80
EE/A74C:	F003    	BEQ $A751
EE/A74E:	4CC7A8  	JMP $A8C7      (Exit)
EE/A751:	A5F7    	LDA $F7        (Pose number of map character)
EE/A753:	A2006F  	LDX #$6F00     (VRAM pointer will be set to $DE00)
EE/A756:	220000C0	JSL $C00000    (Transfer character sprites to VRAM)
EE/A75A:	A644    	LDX $44        (First VRAM pointer for NMI)
EE/A75C:	3026    	BMI $A784      (Branch if the high bit is set; the value used for that is #$8000)
EE/A75E:	8E1621  	STX $2116      (Set VRAM pointer)
EE/A761:	A20018  	LDX #$1800
EE/A764:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/A767:	A2506D  	LDX #$6D50
EE/A76A:	8E0243  	STX $4302      (Source address)
EE/A76D:	A97E    	LDA #$7E
EE/A76F:	8D0443  	STA $4304      (Source bank; 7E/6D50)
EE/A772:	A20001  	LDX #$0100
EE/A775:	8E0543  	STX $4305      (Number of bytes: #$0100)
EE/A778:	A900    	LDA #$00
EE/A77A:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2118 or $2139 is accessed) (STZ...)
EE/A77D:	A901    	LDA #$01       (INC A...)
EE/A77F:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A782:	804F    	BRA $A7D3      (Skip the following VRAM-related segment of code)
EE/A784:	A646    	LDX $46        (Second VRAM pointer for NMI)
EE/A786:	304B    	BMI $A7D3      (Branch if the high bit is set; the value used for that is #$8000)
EE/A788:	8E1621  	STX $2116      (Set VRAM pointer)
EE/A78B:	A20018  	LDX #$1800
EE/A78E:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/A791:	A2506E  	LDX #$6E50
EE/A794:	8E0243  	STX $4302      (Source address)
EE/A797:	A97E    	LDA #$7E
EE/A799:	8D0443  	STA $4304      (Source bank; 7E/6E50)
EE/A79C:	A28000  	LDX #$0080
EE/A79F:	8E0543  	STX $4305      (Number of bytes: #$0080)
EE/A7A2:	A902    	LDA #$02
EE/A7A4:	8D1521  	STA $2115      (VRAM pointer increases by 128 words when $2118 or $2139 is accessed)
EE/A7A7:	A901    	LDA #$01       (DEC A...)
EE/A7A9:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A7AC:	A646    	LDX $46        (Second VRAM pointer for NMI)
EE/A7AE:	E8      	INX
EE/A7AF:	8E1621  	STX $2116      (Set VRAM pointer)
EE/A7B2:	A20018  	LDX #$1800
EE/A7B5:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/A7B8:	A2D06E  	LDX #$6ED0
EE/A7BB:	8E0243  	STX $4302      (Source address)
EE/A7BE:	A97E    	LDA #$7E
EE/A7C0:	8D0443  	STA $4304      (Source bank; 7E/6ED0)
EE/A7C3:	A28000  	LDX #$0080
EE/A7C6:	8E0543  	STX $4305      (Number of bytes: #$0080)
EE/A7C9:	A902    	LDA #$02
EE/A7CB:	8D1521  	STA $2115      (VRAM pointer increases by 128 words when $2118 or $2139 is accessed)
EE/A7CE:	A901    	LDA #$01       (DEC A...)
EE/A7D0:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A7D3:	9C2121  	STZ $2121      (Zero CGRAM address)
EE/A7D6:	A20022  	LDX #$2200
EE/A7D9:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2122: CGRAM)
EE/A7DC:	A200E0  	LDX #$E000
EE/A7DF:	8E0243  	STX $4302      (Source address)
EE/A7E2:	A97E    	LDA #$7E
EE/A7E4:	8D0443  	STA $4304      (Source bank; 7E/E000, palettes)
EE/A7E7:	A20002  	LDX #$0200
EE/A7EA:	8E0543  	STX $4305      (Number of bytes: #$0200)
EE/A7ED:	A901    	LDA #$01
EE/A7EF:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A7F2:	C220    	REP #$20       (16-bit A)
EE/A7F4:	A534    	LDA $34        (Current X position in pixels)
EE/A7F6:	18      	CLC            (Clear Carry for addition)
EE/A7F7:	690800  	ADC #$0008     (Add 8)
EE/A7FA:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/A7FD:	8DFA00  	STA $00FA      ($FA...)
EE/A800:	A538    	LDA $38        (Current Y position in pixels)
EE/A802:	38      	SEC            (Set Carry for subtraction)
EE/A803:	E90200  	SBC #$0002     (Subtract 2) (DEC A, DEC A...)
EE/A806:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/A809:	8DFC00  	STA $00FC      ($FC...)
EE/A80C:	ADFA00  	LDA $00FA      ($FA...)
EE/A80F:	38      	SEC            (Set Carry for subtraction)
EE/A810:	E57B    	SBC $7B
EE/A812:	29FF1F  	AND #$1FFF
EE/A815:	8D7700  	STA $0077      ($77...)
EE/A818:	ADFC00  	LDA $00FC      ($FC...)
EE/A81B:	38      	SEC            (Set Carry for subtraction)
EE/A81C:	E57D    	SBC $7D
EE/A81E:	29FF1F  	AND #$1FFF
EE/A821:	8D7900  	STA $0079
EE/A824:	E220    	SEP #$20       (8-bit A)
EE/A826:	A577    	LDA $77
EE/A828:	8D0D21  	STA $210D      (BG1/Mode 7 BG horizontal scroll, low byte)
EE/A82B:	A578    	LDA $78
EE/A82D:	8D0D21  	STA $210D      (BG1/Mode 7 BG horizontal scroll, high byte)
EE/A830:	A579    	LDA $79
EE/A832:	8D0E21  	STA $210E      (BG1/Mode 7 BG vertical scroll, low byte)
EE/A835:	A57A    	LDA $7A
EE/A837:	8D0E21  	STA $210E      (BG1/Mode 7 BG vertical scroll, high byte)
EE/A83A:	ADFA00  	LDA $00FA      ($FA...)
EE/A83D:	8D1F21  	STA $211F      (Mode 7 center X, low byte)
EE/A840:	ADFB00  	LDA $00FB      ($FB...)
EE/A843:	8D1F21  	STA $211F      (Mode 7 center X, high byte)
EE/A846:	ADFC00  	LDA $00FC      ($FC...)
EE/A849:	8D2021  	STA $2120      (Mode 7 center Y, low byte)
EE/A84C:	ADFD00  	LDA $00FD      ($FD...)
EE/A84F:	8D2021  	STA $2120      (Mode 7 center Y, high byte)
EE/A852:	9C0043  	STZ $4300      (Control for DMA channel 0)
EE/A855:	A904    	LDA #$04       (Destination: $2104; OAM)
EE/A857:	8D0143  	STA $4301      (Set destination for DMA channel 0)
EE/A85A:	A2306B  	LDX #$6B30
EE/A85D:	8E0243  	STX $4302      (Source address)
EE/A860:	A97E    	LDA #$7E
EE/A862:	8D0443  	STA $4304      (Source bank; 7E/6B30)
EE/A865:	A22002  	LDX #$0220
EE/A868:	8E0543  	STX $4305      (Number of bytes: #$0220)
EE/A86B:	A901    	LDA #$01
EE/A86D:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A870:	A980    	LDA #$80
EE/A872:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/A875:	A20011  	LDX #$1100
EE/A878:	8E1621  	STX $2116      (Set VRAM pointer to $2200)
EE/A87B:	A20019  	LDX #$1900
EE/A87E:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2119: VRAM, high byte)
EE/A881:	A250B7  	LDX #$B750
EE/A884:	8E0243  	STX $4302      (Source address)
EE/A887:	A97E    	LDA #$7E
EE/A889:	8D0443  	STA $4304      (Source bank; 7E/B750)
EE/A88C:	A28000  	LDX #$0080
EE/A88F:	8E0543  	STX $4305      (Number of bytes: #$0080)
EE/A892:	A901    	LDA #$01
EE/A894:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A897:	A20015  	LDX #$1500
EE/A89A:	8E1621  	STX $2116      (Set VRAM pointer to $2A00)
EE/A89D:	A20019  	LDX #$1900
EE/A8A0:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2119: VRAM, high byte)
EE/A8A3:	A2D0B7  	LDX #$B7D0
EE/A8A6:	8E0243  	STX $4302      (Source address)
EE/A8A9:	A97E    	LDA #$7E
EE/A8AB:	8D0443  	STA $4304      (Source bank; 7E/B7D0)
EE/A8AE:	A28000  	LDX #$0080
EE/A8B1:	8E0543  	STX $4305      (Number of bytes: #$0080)
EE/A8B4:	A901    	LDA #$01
EE/A8B6:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A8B9:	A9F0    	LDA #$F0
EE/A8BB:	8D0C42  	STA $420C      (Enable HDMA channels 4-7)
EE/A8BE:	A523    	LDA $23        (Current brightness)
EE/A8C0:	D002    	BNE $A8C4      (Branch if the screen is not set to be blank)
EE/A8C2:	A980    	LDA #$80       (Disable screen)
EE/A8C4:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/A8C7:	2B      	PLD
EE/A8C8:	C210    	REP #$10       (16-bit indexes) (REP #$30...)
EE/A8CA:	7A      	PLY
EE/A8CB:	FA      	PLX
EE/A8CC:	C220    	REP #$20       (16-bit A)
EE/A8CE:	68      	PLA
EE/A8CF:	AB      	PLB
EE/A8D0:	28      	PLP
EE/A8D1:	40      	RTI

From the function above; this is executed when a battle is set to occur
EE/A8D2:	C220    	REP #$20       (16-bit A)
EE/A8D4:	A534    	LDA $34        (Current X position in pixels)
EE/A8D6:	18      	CLC            (Clear Carry for addition)
EE/A8D7:	690800  	ADC #$0008     (Add 8)
EE/A8DA:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/A8DD:	8DFA00  	STA $00FA      ($FA...)
EE/A8E0:	A538    	LDA $38        (Current Y position in pixels)
EE/A8E2:	38      	SEC            (Set Carry for subtraction)
EE/A8E3:	E90200  	SBC #$0002     (Subtract 2)
EE/A8E6:	29FF0F  	AND #$0FFF     (Remain between 0 and 4095)
EE/A8E9:	8DFC00  	STA $00FC      ($FC...)
EE/A8EC:	ADFA00  	LDA $00FA      ($FA...)
EE/A8EF:	38      	SEC            (Set Carry for subtraction)
EE/A8F0:	E57B    	SBC $7B
EE/A8F2:	29FF1F  	AND #$1FFF
EE/A8F5:	8D7700  	STA $0077      ($77...)
EE/A8F8:	ADFC00  	LDA $00FC      ($FC...)
EE/A8FB:	38      	SEC            (Set Carry for subtraction)
EE/A8FC:	E57D    	SBC $7D
EE/A8FE:	29FF1F  	AND #$1FFF
EE/A901:	8D7900  	STA $0079      ($79...)
EE/A904:	E220    	SEP #$20       (8-bit A)
EE/A906:	A577    	LDA $77
EE/A908:	8D0D21  	STA $210D      (BG1/Mode 7 BG horizontal scroll, low byte)
EE/A90B:	A578    	LDA $78
EE/A90D:	8D0D21  	STA $210D      (BG1/Mode 7 BG horizontal scroll, high byte)
EE/A910:	A579    	LDA $79
EE/A912:	8D0E21  	STA $210E      (BG1/Mode 7 BG vertical scroll, low byte)
EE/A915:	A57A    	LDA $7A
EE/A917:	8D0E21  	STA $210E      (BG1/Mode 7 BG vertical scroll, high byte)
EE/A91A:	ADFA00  	LDA $00FA      ($FA...)
EE/A91D:	8D1F21  	STA $211F      (Mode 7 center X, low byte)
EE/A920:	ADFB00  	LDA $00FB      ($FB...)
EE/A923:	8D1F21  	STA $211F      (Mode 7 center X, high byte)
EE/A926:	ADFC00  	LDA $00FC      ($FC...)
EE/A929:	8D2021  	STA $2120      (Mode 7 center Y, low byte)
EE/A92C:	ADFD00  	LDA $00FD      ($FD...)
EE/A92F:	8D2021  	STA $2120      (Mode 7 center Y, high byte)
EE/A932:	A9F0    	LDA #$F0
EE/A934:	8D0C42  	STA $420C      (Enable HDMA channels 4-7)
EE/A937:	4CC7A8  	JMP $A8C7      (BRA...)

IRQ for character mode
EE/A93A:	08      	PHP            (Interrupts automatically push the processor status...)
EE/A93B:	C220    	REP #$20       (16-bit A)
EE/A93D:	48      	PHA            (Save A)
EE/A93E:	8B      	PHB            (Save data bank)
EE/A93F:	E220    	SEP #$20       (8-bit A)
EE/A941:	7B      	TDC            (Zero A)
EE/A942:	48      	PHA
EE/A943:	AB      	PLB            (Set data bank to 00)
EE/A944:	CD1142  	CMP $4211      (Clear IRQ flag)
EE/A947:	AB      	PLB            (Restore data bank)
EE/A948:	C220    	REP #$20       (16-bit A)
EE/A94A:	68      	PLA
EE/A94B:	28      	PLP
EE/A94C:	40      	RTI

NMI for mine-cart sequence
EE/A94D:	08      	PHP            (Interrupts automatically push the processor status...)
EE/A94E:	8B      	PHB            (Save data bank)
EE/A94F:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/A951:	48      	PHA            (Save A)
EE/A952:	C210    	REP #$10       (16-bit indexes)
EE/A954:	DA      	PHX
EE/A955:	5A      	PHY
EE/A956:	0B      	PHD
EE/A957:	A90000  	LDA #$0000     (Zero A)
EE/A95A:	5B      	TCD            (Set direct page to 0000)
EE/A95B:	E220    	SEP #$20       (8-bit A)
EE/A95D:	7B      	TDC            (...)
EE/A95E:	48      	PHA
EE/A95F:	AB      	PLB            (Set data bank to 00)
EE/A960:	CD1042  	CMP $4210      (Clear NMI flag)
EE/A963:	EEFA00  	INC $00FA      (Increase NMI count)
EE/A966:	220C00C3	JSL $C3000C    (Adjust in-game time)
EE/A96A:	A902    	LDA #$02
EE/A96C:	9C1F21  	STZ $211F      (Mode 7 center X, low byte)
EE/A96F:	8D1F21  	STA $211F      (Mode 7 center X, high byte)
EE/A972:	A9E0    	LDA #$E0
EE/A974:	8D2021  	STA $2120      (Mode 7 center Y, low byte)
EE/A977:	A901    	LDA #$01
EE/A979:	8D2021  	STA $2120      (Mode 7 center Y, high byte)
EE/A97C:	A53D    	LDA $3D
EE/A97E:	8D1B21  	STA $211B      (Mode 7 matrix A, low byte)
EE/A981:	A53E    	LDA $3E
EE/A983:	8D1B21  	STA $211B      (Mode 7 matrix A, high byte)
EE/A986:	A53F    	LDA $3F
EE/A988:	8D1C21  	STA $211C      (Mode 7 matrix B, low byte)
EE/A98B:	A540    	LDA $40
EE/A98D:	8D1C21  	STA $211C      (Mode 7 matrix B, high byte)
EE/A990:	A541    	LDA $41
EE/A992:	8D1D21  	STA $211D      (Mode 7 matrix C, low byte)
EE/A995:	A542    	LDA $42
EE/A997:	8D1D21  	STA $211D      (Mode 7 matrix C, high byte)
EE/A99A:	A53D    	LDA $3D
EE/A99C:	8D1E21  	STA $211E      (Mode 7 matrix D, low byte)
EE/A99F:	A53E    	LDA $3E
EE/A9A1:	8D1E21  	STA $211E      (Mode 7 matrix D, high byte)
EE/A9A4:	A524    	LDA $24
EE/A9A6:	D038    	BNE $A9E0      (Branch if the function at EE/9F14 finished)
EE/A9A8:	9C2121  	STZ $2121      (Zero CGRAM address)
EE/A9AB:	A20022  	LDX #$2200
EE/A9AE:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2122: CGRAM)
EE/A9B1:	A200E0  	LDX #$E000
EE/A9B4:	8E0243  	STX $4302      (Source address)
EE/A9B7:	A97E    	LDA #$7E
EE/A9B9:	8D0443  	STA $4304      (Source bank; 7E/E000, palettes)
EE/A9BC:	A20002  	LDX #$0200
EE/A9BF:	8E0543  	STX $4305      (Number of bytes: #$0200)
EE/A9C2:	A901    	LDA #$01
EE/A9C4:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/A9C7:	E220    	SEP #$20       (8-bit A)
EE/A9C9:	A980    	LDA #$80
EE/A9CB:	8D0D21  	STA $210D      (BG1/Mode 7 BG horizontal scroll, low byte)
EE/A9CE:	A901    	LDA #$01
EE/A9D0:	8D0D21  	STA $210D      (BG1/Mode 7 BG horizontal scroll, high byte)
EE/A9D3:	A970    	LDA #$70
EE/A9D5:	8D0E21  	STA $210E      (BG1/Mode 7 BG vertical scroll, low byte)
EE/A9D8:	A901    	LDA #$01
EE/A9DA:	8D0E21  	STA $210E      (BG1/Mode 7 BG vertical scroll, high byte)
EE/A9DD:	4C1CAA  	JMP $AA1C      (BRA...)
EE/A9E0:	9C1521  	STZ $2115      (VRAM pointer increases by a word when $2118 or $2139 is accessed)
EE/A9E3:	A218A6  	LDX #$A618
EE/A9E6:	A01813  	LDY #$1318
EE/A9E9:	E220    	SEP #$20       (8-bit A)
EE/A9EB:	8C1621  	STY $2116      (Set VRAM pointer to $2630)
EE/A9EE:	9C0043  	STZ $4300      (Control for DMA channel 0)
EE/A9F1:	A918    	LDA #$18       (Destination: $2118; VRAM, high byte)
EE/A9F3:	8D0143  	STA $4301      (Set destination for DMA channel 0)
EE/A9F6:	8E0243  	STX $4302      (Source address)
EE/A9F9:	A97F    	LDA #$7F
EE/A9FB:	8D0443  	STA $4304      (Source bank; 7F/A618)
EE/A9FE:	A950    	LDA #$50
EE/AA00:	8D0543  	STA $4305
EE/AA03:	9C0643  	STZ $4306      (Number of bytes: #$0050)
EE/AA06:	A901    	LDA #$01
EE/AA08:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/AA0B:	C221    	REP #$21       (16-bit A; clear Carry)
EE/AA0D:	98      	TYA            (Transfer Y to A)
EE/AA0E:	698000  	ADC #$0080
EE/AA11:	A8      	TAY            (Transfer A to Y)
EE/AA12:	8A      	TXA            (Transfer X to A)
EE/AA13:	690001  	ADC #$0100
EE/AA16:	AA      	TAX            (Transfer A to X)
EE/AA17:	C918E4  	CMP #$E418
EE/AA1A:	D0CD    	BNE $A9E9
EE/AA1C:	E220    	SEP #$20       (8-bit A)
EE/AA1E:	64FE    	STZ $FE        (Let the IRQ function know that an NMI occurred)
EE/AA20:	A910    	LDA #$10
EE/AA22:	8D0942  	STA $4209      (V-Count timer, low byte)
EE/AA25:	A9B1    	LDA #$B1
EE/AA27:	8D0042  	STA $4200      (Enable NMI, H/V-Count IRQ, auto joypad read)
EE/AA2A:	2B      	PLD
EE/AA2B:	C210    	REP #$10       (16-bit indexes) (REP #$30...)
EE/AA2D:	7A      	PLY
EE/AA2E:	FA      	PLX
EE/AA2F:	C220    	REP #$20       (16-bit A)
EE/AA31:	68      	PLA
EE/AA32:	AB      	PLB
EE/AA33:	28      	PLP
EE/AA34:	40      	RTI

IRQ for mine-cart sequence
EE/AA35:	08      	PHP            (Interrupts automatically push the processor status...)
EE/AA36:	C230    	REP #$30       (16-bit A and indexes)
EE/AA38:	48      	PHA            (Save A)
EE/AA39:	DA      	PHX            (Save X)
EE/AA3A:	5A      	PHY            (Save Y)
EE/AA3B:	8B      	PHB            (Save data bank)
EE/AA3C:	E220    	SEP #$20       (8-bit A)
EE/AA3E:	A900    	LDA #$00
EE/AA40:	48      	PHA
EE/AA41:	AB      	PLB            (Set data bank to 00)
EE/AA42:	CD1142  	CMP $4211      (Clear IRQ flag)
EE/AA45:	ADFE00  	LDA $00FE
EE/AA48:	D010    	BNE $AA5A      (Branch if no NMI has occurred since the last execution)
EE/AA4A:	EEFE00  	INC $00FE
EE/AA4D:	A9D0    	LDA #$D0
EE/AA4F:	8D0942  	STA $4209      (V-Count timer, low byte)
EE/AA52:	AD2300  	LDA $0023      (Current brightness)
EE/AA55:	8D0021  	STA $2100      (Turn on the screen; set brightness)
EE/AA58:	804B    	BRA $AAA5      (Exit)
EE/AA5A:	A981    	LDA #$81
EE/AA5C:	8D0042  	STA $4200      (Enable NMI and auto joypad read; disable IRQ)
EE/AA5F:	A980    	LDA #$80
EE/AA61:	8D0021  	STA $2100      (Disable screen)
EE/AA64:	AD2400  	LDA $0024
EE/AA67:	F03C    	BEQ $AAA5      (Branch if the function at EE/9F14 has not finished)
EE/AA69:	9C1521  	STZ $2115      (VRAM pointer increases by a word when $2118 or $2139 is accessed)
EE/AA6C:	A21896  	LDX #$9618
EE/AA6F:	A0180B  	LDY #$0B18
EE/AA72:	E220    	SEP #$20       (8-bit A)
EE/AA74:	8C1621  	STY $2116      (Set VRAM pointer to $1630)
EE/AA77:	9C0043  	STZ $4300      (Control for DMA channel 0)
EE/AA7A:	A918    	LDA #$18       (Destination: $2118; VRAM, high byte)
EE/AA7C:	8D0143  	STA $4301      (Set destination for DMA channel 0)
EE/AA7F:	8E0243  	STX $4302      (Source address)
EE/AA82:	A97F    	LDA #$7F
EE/AA84:	8D0443  	STA $4304      (Source bank; 7F/9618)
EE/AA87:	A950    	LDA #$50
EE/AA89:	8D0543  	STA $4305
EE/AA8C:	9C0643  	STZ $4306      (Number of bytes: #$0050)
EE/AA8F:	A901    	LDA #$01
EE/AA91:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/AA94:	C221    	REP #$21       (16-bit A; clear Carry)
EE/AA96:	98      	TYA            (Transfer Y to A)
EE/AA97:	698000  	ADC #$0080
EE/AA9A:	A8      	TAY            (Transfer A to Y)
EE/AA9B:	8A      	TXA            (Transfer X to A)
EE/AA9C:	690001  	ADC #$0100
EE/AA9F:	AA      	TAX            (Transfer A to X)
EE/AAA0:	C918A6  	CMP #$A618
EE/AAA3:	D0CD    	BNE $AA72      (Loop if not)
EE/AAA5:	AB      	PLB            (Restore data bank)
EE/AAA6:	C230    	REP #$30       (16-bit A and indexes)
EE/AAA8:	7A      	PLY
EE/AAA9:	FA      	PLX
EE/AAAA:	68      	PLA
EE/AAAB:	28      	PLP
EE/AAAC:	40      	RTI

Animate water tiles
EE/AAAD:	08      	PHP
EE/AAAE:	8B      	PHB            (Save data bank)
EE/AAAF:	E220    	SEP #$20       (8-bit A)
EE/AAB1:	A97E    	LDA #$7E
EE/AAB3:	48      	PHA
EE/AAB4:	AB      	PLB            (Set data bank to 7E)
EE/AAB5:	A20000  	LDX #$0000     (LDX $00...)
EE/AAB8:	DA      	PHX
EE/AAB9:	A900    	LDA #$00
EE/AABB:	EB      	XBA            (Exchange B and A)
EE/AABC:	BD50B8  	LDA $B850,X
EE/AABF:	18      	CLC            (Clear Carry for addition)
EE/AAC0:	6910    	ADC #$10       (Add 16)
EE/AAC2:	9D50B8  	STA $B850,X    (Save changes)
EE/AAC5:	9051    	BCC $AB18
EE/AAC7:	8A      	TXA            (Transfer X to A)
EE/AAC8:	C908    	CMP #$08
EE/AACA:	9002    	BCC $AACE
EE/AACC:	6907    	ADC #$07
EE/AACE:	0A      	ASL A          (Multiply by 2)
EE/AACF:	0A      	ASL A          (Multiply by 4)
EE/AAD0:	0A      	ASL A          (Multiply by 8)
EE/AAD1:	AA      	TAX            (Transfer A to X)
EE/AAD2:	BD50B7  	LDA $B750,X
EE/AAD5:	48      	PHA
EE/AAD6:	C220    	REP #$20       (16-bit A)
EE/AAD8:	BD51B7  	LDA $B751,X
EE/AADB:	9D50B7  	STA $B750,X
EE/AADE:	BD53B7  	LDA $B753,X
EE/AAE1:	9D52B7  	STA $B752,X
EE/AAE4:	BD55B7  	LDA $B755,X
EE/AAE7:	9D54B7  	STA $B754,X
EE/AAEA:	E220    	SEP #$20       (8-bit A)
EE/AAEC:	BD57B7  	LDA $B757,X
EE/AAEF:	9D56B7  	STA $B756,X
EE/AAF2:	BD90B7  	LDA $B790,X
EE/AAF5:	9D57B7  	STA $B757,X
EE/AAF8:	C220    	REP #$20       (16-bit A)
EE/AAFA:	BD91B7  	LDA $B791,X
EE/AAFD:	9D90B7  	STA $B790,X
EE/AB00:	BD93B7  	LDA $B793,X
EE/AB03:	9D92B7  	STA $B792,X
EE/AB06:	BD95B7  	LDA $B795,X
EE/AB09:	9D94B7  	STA $B794,X
EE/AB0C:	E220    	SEP #$20       (8-bit A)
EE/AB0E:	BD97B7  	LDA $B797,X
EE/AB11:	9D96B7  	STA $B796,X
EE/AB14:	68      	PLA
EE/AB15:	9D97B7  	STA $B797,X
EE/AB18:	FA      	PLX
EE/AB19:	E8      	INX
EE/AB1A:	E01000  	CPX #$0010
EE/AB1D:	D099    	BNE $AAB8      (Loop if not)
EE/AB1F:	C230    	REP #$30       (16-bit A and indexes)
EE/AB21:	AD641F  	LDA $1F64      (Map number and flags)
EE/AB24:	290300  	AND #$0003     (World of Balance?) (Superfluous...)
EE/AB27:	D021    	BNE $AB4A      (Exit if not)
EE/AB29:	AD60B8  	LDA $B860      (This segment pertains to the waterfall tile)
EE/AB2C:	3A      	DEC A
EE/AB2D:	290F00  	AND #$000F
EE/AB30:	D015    	BNE $AB47
EE/AB32:	AEDAE0  	LDX $E0DA      (Load a color)
EE/AB35:	ADDEE0  	LDA $E0DE      (Load another color)
EE/AB38:	8EDEE0  	STX $E0DE      (Replace latter with former)
EE/AB3B:	AEDCE0  	LDX $E0DC
EE/AB3E:	8DDCE0  	STA $E0DC
EE/AB41:	8EDAE0  	STX $E0DA
EE/AB44:	A91000  	LDA #$0010
EE/AB47:	8D60B8  	STA $B860
EE/AB4A:	AB      	PLB
EE/AB4B:	28      	PLP
EE/AB4C:	60      	RTS

NMI for the airship scene from the ending
EE/AB4D:	08      	PHP            (Interrupts automatically push the processor status...)
EE/AB4E:	8B      	PHB            (Save data bank)
EE/AB4F:	C220    	REP #$20       (16-bit A) (REP #$30...)
EE/AB51:	48      	PHA            (Save A)
EE/AB52:	C210    	REP #$10       (16-bit indexes)
EE/AB54:	DA      	PHX            (Save X)
EE/AB55:	5A      	PHY            (Superfluous...)
EE/AB56:	0B      	PHD            (Superfluous...)
EE/AB57:	E220    	SEP #$20       (8-bit A)
EE/AB59:	7B      	TDC            (Zero A)
EE/AB5A:	48      	PHA
EE/AB5B:	AB      	PLB            (Set data bank to 00)
EE/AB5C:	EE2400  	INC $0024      (Increase NMI count)
EE/AB5F:	CD1042  	CMP $4210      (Clear NMI flag)
EE/AB62:	9C2121  	STZ $2121      (Zero CGRAM address)
EE/AB65:	A20022  	LDX #$2200
EE/AB68:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2122: CGRAM)
EE/AB6B:	A200E0  	LDX #$E000
EE/AB6E:	8E0243  	STX $4302      (Source address)
EE/AB71:	A97E    	LDA #$7E
EE/AB73:	8D0443  	STA $4304      (Source bank; 7E/E000, palettes)
EE/AB76:	A20002  	LDX #$0200
EE/AB79:	8E0543  	STX $4305      (Number of bytes: #$0200)
EE/AB7C:	A901    	LDA #$01
EE/AB7E:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/AB81:	C220    	REP #$20       (16-bit A)
EE/AB83:	A534    	LDA $34        (Current X position in pixels)
EE/AB85:	38      	SEC            (Set Carry for subtraction)
EE/AB86:	E57B    	SBC $7B        (Subtract #$80; this value comes from EE/8EEC)
EE/AB88:	29FF1F  	AND #$1FFF     (Remain between 0 and 8191)
EE/AB8B:	8D7700  	STA $0077      (Variable for BG1/Mode 7 BG horizontal scroll)
EE/AB8E:	A538    	LDA $38        (Current Y position in pixels)
EE/AB90:	38      	SEC            (Set Carry for subtraction)
EE/AB91:	E57D    	SBC $7D        (Subtract #$D0; this value comes from EE/8EF0)
EE/AB93:	29FF1F  	AND #$1FFF     (Remain between 0 and 8191)
EE/AB96:	8D7900  	STA $0079      (Variable for BG1/Mode 7 BG vertical scroll)
EE/AB99:	E220    	SEP #$20       (8-bit A)
EE/AB9B:	A577    	LDA $77        (Variable for BG1/Mode 7 BG horizontal scroll, low byte)
EE/AB9D:	8D0D21  	STA $210D      (BG1/Mode 7 BG horizontal scroll, low byte)
EE/ABA0:	A578    	LDA $78        (Variable for BG1/Mode 7 BG horizontal scroll, high byte)
EE/ABA2:	8D0D21  	STA $210D      (BG1/Mode 7 BG horizontal scroll, high byte)
EE/ABA5:	A579    	LDA $79        (Variable for BG1/Mode 7 BG vertical scroll, low byte)
EE/ABA7:	8D0E21  	STA $210E      (BG1/Mode 7 BG vertical scroll, low byte)
EE/ABAA:	A57A    	LDA $7A        (Variable for BG1/Mode 7 BG vertical scroll, high byte)
EE/ABAC:	8D0E21  	STA $210E      (BG1/Mode 7 BG vertical scroll, high byte)
EE/ABAF:	A534    	LDA $34        (Current X position in pixels, low byte)
EE/ABB1:	8D1F21  	STA $211F      (Mode 7 center X, low byte)
EE/ABB4:	A535    	LDA $35        (Current X position in pixels, high byte)
EE/ABB6:	8D1F21  	STA $211F      (Mode 7 center X, high byte)
EE/ABB9:	A538    	LDA $38        (Current Y position in pixels, low byte)
EE/ABBB:	8D2021  	STA $2120      (Mode 7 center Y, low byte)
EE/ABBE:	A539    	LDA $39        (Current Y position in pixels, high byte)
EE/ABC0:	8D2021  	STA $2120      (Mode 7 center Y, high byte)
EE/ABC3:	9C0043  	STZ $4300      (Control for DMA channel 0)
EE/ABC6:	A904    	LDA #$04       (Destination: $2104; OAM)
EE/ABC8:	8D0143  	STA $4301      (Set destination for DMA channel 0)
EE/ABCB:	A2306B  	LDX #$6B30
EE/ABCE:	8E0243  	STX $4302      (Source address)
EE/ABD1:	A97E    	LDA #$7E
EE/ABD3:	8D0443  	STA $4304      (Source bank; 7E/6B30)
EE/ABD6:	A22002  	LDX #$0220
EE/ABD9:	8E0543  	STX $4305      (Number of bytes: #$0220)
EE/ABDC:	A901    	LDA #$01
EE/ABDE:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/ABE1:	E220    	SEP #$20       (...)
EE/ABE3:	A523    	LDA $23        (Current brightness)
EE/ABE5:	D002    	BNE $ABE9      (Branch if the screen is not blank)
EE/ABE7:	A980    	LDA #$80       (Disable screen)
EE/ABE9:	8D0021  	STA $2100      (Set brightness; turn screen on or off based on high bit)
EE/ABEC:	64FA    	STZ $FA        (Zero $FA in anticipation of what follows)
EE/ABEE:	A5E9    	LDA $E9
EE/ABF0:	8901    	BIT #$01       (Is a gradient effect applied to the screen?)
EE/ABF2:	F006    	BEQ $ABFA      (Branch if not) (LSR A, BCC...)
EE/ABF4:	A5FA    	LDA $FA
EE/ABF6:	0904    	ORA #$04       (Set bit corresponding to HDMA channel 2)
EE/ABF8:	85FA    	STA $FA        (Save changes) (LDA #$04, TSB/STA $FA...)
EE/ABFA:	A5E9    	LDA $E9
EE/ABFC:	8902    	BIT #$02
EE/ABFE:	F006    	BEQ $AC06      (Branch if not)
EE/AC00:	A5FA    	LDA $FA
EE/AC02:	0908    	ORA #$08       (Set bit corresponding to HDMA channel 3)
EE/AC04:	85FA    	STA $FA        (Save changes) (LDA #$08, TSB $FA...)
EE/AC06:	A9F2    	LDA #$F2       (This will enable all channels except 1, 2, and 3)
EE/AC08:	05FA    	ORA $FA        (Add to those enabled above)
EE/AC0A:	8D0C42  	STA $420C      (Enable selected HDMA channels)
EE/AC0D:	2B      	PLD            (...)
EE/AC0E:	C210    	REP #$10       (16-bit indexes) (REP #$30...)
EE/AC10:	7A      	PLY            (...)
EE/AC11:	FA      	PLX
EE/AC12:	C220    	REP #$20       (16-bit A)
EE/AC14:	68      	PLA
EE/AC15:	AB      	PLB
EE/AC16:	28      	PLP
EE/AC17:	40      	RTI

This function seemingly delimits circle-like shapes shown when the world is getting blown up
EE/AC18:	08      	PHP
EE/AC19:	8B      	PHB
EE/AC1A:	E230    	SEP #$30       (8-bit A and indexes)
EE/AC1C:	A559    	LDA $59
EE/AC1E:	F07E    	BEQ $AC9E
EE/AC20:	A97E    	LDA #$7E
EE/AC22:	48      	PHA
EE/AC23:	AB      	PLB            (Set data bank to 7E)
EE/AC24:	C220    	REP #$20       (16-bit A)
EE/AC26:	646C    	STZ $6C
EE/AC28:	646F    	STZ $6F
EE/AC2A:	A558    	LDA $58
EE/AC2C:	856A    	STA $6A        (Save it temporarily)
EE/AC2E:	646D    	STZ $6D
EE/AC30:	C90080  	CMP #$8000     (BMI...)
EE/AC33:	B007    	BCS $AC3C
EE/AC35:	C90040  	CMP #$4000     (ASL A, ASL A, BMI...)
EE/AC38:	B01E    	BCS $AC58
EE/AC3A:	803E    	BRA $AC7A
EE/AC3C:	C221    	REP #$21       (16-bit A; clear Carry)
EE/AC3E:	A56D    	LDA $6D
EE/AC40:	656B    	ADC $6B
EE/AC42:	856D    	STA $6D
EE/AC44:	A56A    	LDA $6A
EE/AC46:	38      	SEC            (Set Carry for subtraction)
EE/AC47:	E56E    	SBC $6E
EE/AC49:	9053    	BCC $AC9E
EE/AC4B:	856A    	STA $6A
EE/AC4D:	A66B    	LDX $6B
EE/AC4F:	E221    	SEP #$21       (8-bit A; set Carry)
EE/AC51:	A56E    	LDA $6E
EE/AC53:	9D62BC  	STA $BC62,X
EE/AC56:	80E4    	BRA $AC3C
EE/AC58:	C221    	REP #$21       (16-bit A; clear Carry)
EE/AC5A:	A56B    	LDA $6B
EE/AC5C:	0A      	ASL A          (Multiply by 2)
EE/AC5D:	656D    	ADC $6D
EE/AC5F:	856D    	STA $6D
EE/AC61:	A56E    	LDA $6E
EE/AC63:	0A      	ASL A          (Multiply by 2)
EE/AC64:	855A    	STA $5A
EE/AC66:	A56A    	LDA $6A
EE/AC68:	38      	SEC            (Set Carry for subtraction)
EE/AC69:	E55A    	SBC $5A
EE/AC6B:	9031    	BCC $AC9E
EE/AC6D:	856A    	STA $6A
EE/AC6F:	A66B    	LDX $6B
EE/AC71:	E221    	SEP #$21       (8-bit A; set Carry again, for no reason)
EE/AC73:	A56E    	LDA $6E
EE/AC75:	9D62BC  	STA $BC62,X
EE/AC78:	80DE    	BRA $AC58
EE/AC7A:	C221    	REP #$21       (16-bit A; clear Carry)
EE/AC7C:	A56B    	LDA $6B
EE/AC7E:	0A      	ASL A          (Multiply by 2)
EE/AC7F:	0A      	ASL A          (Multiply by 4)
EE/AC80:	656D    	ADC $6D
EE/AC82:	856D    	STA $6D
EE/AC84:	A56E    	LDA $6E
EE/AC86:	0A      	ASL A          (Multiply by 2)
EE/AC87:	0A      	ASL A          (Multiply by 4)
EE/AC88:	855A    	STA $5A
EE/AC8A:	A56A    	LDA $6A
EE/AC8C:	38      	SEC            (Set Carry for subtraction)
EE/AC8D:	E55A    	SBC $5A
EE/AC8F:	900D    	BCC $AC9E
EE/AC91:	856A    	STA $6A
EE/AC93:	A66B    	LDX $6B
EE/AC95:	E221    	SEP #$21       (8-bit A; set Carry)
EE/AC97:	A56E    	LDA $6E
EE/AC99:	9D62BC  	STA $BC62,X
EE/AC9C:	80DC    	BRA $AC7A      (Loop)
EE/AC9E:	AB      	PLB
EE/AC9F:	28      	PLP
EE/ACA0:	60      	RTS

This function seemingly fills the circles described above
EE/ACA1:	08      	PHP
EE/ACA2:	8B      	PHB
EE/ACA3:	E220    	SEP #$20       (8-bit A)
EE/ACA5:	A97E    	LDA #$7E
EE/ACA7:	48      	PHA
EE/ACA8:	AB      	PLB            (Set data bank to 7E)
EE/ACA9:	C230    	REP #$30       (16-bit A and indexes)
EE/ACAB:	A55E    	LDA $5E
EE/ACAD:	D003    	BNE $ACB2      (BEQ $AC9E...)
EE/ACAF:	4C3FAD  	JMP $AD3F      (Exit)
EE/ACB2:	A55A    	LDA $5A
EE/ACB4:	0A      	ASL A          (Multiply by 2)
EE/ACB5:	0A      	ASL A          (Multiply by 4)
EE/ACB6:	18      	CLC            (Clear Carry for addition)
EE/ACB7:	655C    	ADC $5C
EE/ACB9:	A8      	TAY            (Transfer A to Y)
EE/ACBA:	A20000  	LDX #$0000     (LDX $00...)
EE/ACBD:	A55E    	LDA $5E
EE/ACBF:	C55A    	CMP $5A
EE/ACC1:	B006    	BCS $ACC9      (BCC $ACCB...)
EE/ACC3:	A55E    	LDA $5E        (The A already holds that...)
EE/ACC5:	8560    	STA $60        (BRA $ACCB...)
EE/ACC7:	8004    	BRA $ACCD      (Skip next two instructions)
EE/ACC9:	A55A    	LDA $5A
EE/ACCB:	8560    	STA $60
EE/ACCD:	E220    	SEP #$20       (8-bit A) (SEP #$21...)
EE/ACCF:	A558    	LDA $58
EE/ACD1:	38      	SEC            (Set Carry for subtraction)
EE/ACD2:	FD62BC  	SBC $BC62,X
EE/ACD5:	B002    	BCS $ACD9
EE/ACD7:	A900    	LDA #$00       (TDC...)
EE/ACD9:	990E62  	STA $620E,Y
EE/ACDC:	A558    	LDA $58
EE/ACDE:	18      	CLC            (Clear Carry for addition)
EE/ACDF:	7D62BC  	ADC $BC62,X
EE/ACE2:	9002    	BCC $ACE6
EE/ACE4:	A9FF    	LDA #$FF
EE/ACE6:	990F62  	STA $620F,Y
EE/ACE9:	88      	DEY
EE/ACEA:	88      	DEY
EE/ACEB:	88      	DEY
EE/ACEC:	88      	DEY
EE/ACED:	E8      	INX
EE/ACEE:	E460    	CPX $60
EE/ACF0:	D0DB    	BNE $ACCD      (Loop if not)
EE/ACF2:	C220    	REP #$20       (16-bit A)
EE/ACF4:	A55A    	LDA $5A
EE/ACF6:	0A      	ASL A          (Multiply by 2)
EE/ACF7:	0A      	ASL A          (Multiply by 4)
EE/ACF8:	18      	CLC            (Clear Carry for addition)
EE/ACF9:	655C    	ADC $5C
EE/ACFB:	A8      	TAY            (Transfer A to Y)
EE/ACFC:	A20000  	LDX #$0000     (LDX $00...)
EE/ACFF:	A9E000  	LDA #$00E0
EE/AD02:	38      	SEC            (Set Carry for subtraction)
EE/AD03:	E55A    	SBC $5A
EE/AD05:	8562    	STA $62
EE/AD07:	A55E    	LDA $5E
EE/AD09:	4A      	LSR A          (Divide by 2)
EE/AD0A:	C562    	CMP $62
EE/AD0C:	B006    	BCS $AD14
EE/AD0E:	A55E    	LDA $5E
EE/AD10:	8560    	STA $60        (BRA $AD17...)
EE/AD12:	8005    	BRA $AD19      (Skip next three instructions)
EE/AD14:	A562    	LDA $62
EE/AD16:	0A      	ASL A          (Multiply by 2)
EE/AD17:	8560    	STA $60
EE/AD19:	E220    	SEP #$20       (8-bit A) (SEP #$21...)
EE/AD1B:	A558    	LDA $58
EE/AD1D:	38      	SEC            (Set Carry for subtraction)
EE/AD1E:	FD62BC  	SBC $BC62,X
EE/AD21:	B002    	BCS $AD25
EE/AD23:	A900    	LDA #$00       (TDC...)
EE/AD25:	990E62  	STA $620E,Y
EE/AD28:	A558    	LDA $58
EE/AD2A:	18      	CLC            (Clear Carry for addition)
EE/AD2B:	7D62BC  	ADC $BC62,X
EE/AD2E:	9002    	BCC $AD32
EE/AD30:	A9FF    	LDA #$FF
EE/AD32:	990F62  	STA $620F,Y
EE/AD35:	C8      	INY
EE/AD36:	C8      	INY
EE/AD37:	C8      	INY
EE/AD38:	C8      	INY
EE/AD39:	E8      	INX
EE/AD3A:	E8      	INX
EE/AD3B:	E460    	CPX $60
EE/AD3D:	90DA    	BCC $AD19
EE/AD3F:	AB      	PLB
EE/AD40:	28      	PLP
EE/AD41:	60      	RTS

Transfer palettes for mine-cart sequence to RAM and CGRAM
EE/AD42:	9C2121  	STZ $2121      (Zero CGRAM address)
EE/AD45:	A20022  	LDX #$2200
EE/AD48:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2122: CGRAM)
EE/AD4B:	A66A    	LDX $6A        (Pointer to mine cart palettes, bottom bytes)
EE/AD4D:	8E0243  	STX $4302      (Source address)
EE/AD50:	A56C    	LDA $6C        (Pointer to mine cart palettes, high byte)
EE/AD52:	8D0443  	STA $4304      (Source bank; EF/4846)
EE/AD55:	A20002  	LDX #$0200
EE/AD58:	8E0543  	STX $4305      (Number of bytes: #$0200)
EE/AD5B:	A901    	LDA #$01
EE/AD5D:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/AD60:	9C2121  	STZ $2121      (Zero CGRAM address)
EE/AD63:	A2803B  	LDX #$3B80
EE/AD66:	8E0043  	STX $4300      (Control for DMA channel 0; set source to $213B: CGRAM)
EE/AD69:	A200E0  	LDX #$E000
EE/AD6C:	8E0243  	STX $4302      (Destination address)
EE/AD6F:	A97E    	LDA #$7E
EE/AD71:	8D0443  	STA $4304      (Destination bank; 7E/E000)
EE/AD74:	A20002  	LDX #$0200
EE/AD77:	8E0543  	STX $4305      (Number of bytes: #$0200)
EE/AD7A:	A901    	LDA #$01
EE/AD7C:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/AD7F:	60      	RTS

Transfer decompressed sky graphics to VRAM (includes Imperial Castle BG)
EE/AD80:	A980    	LDA #$80
EE/AD82:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/AD85:	A20050  	LDX #$5000
EE/AD88:	8E1621  	STX $2116      (Set VRAM pointer to $A000)
EE/AD8B:	A20118  	LDX #$1801
EE/AD8E:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/AD91:	A20020  	LDX #$2000
EE/AD94:	8E0243  	STX $4302      (Source address)
EE/AD97:	A97E    	LDA #$7E
EE/AD99:	8D0443  	STA $4304      (Source bank; 7E/2000)
EE/AD9C:	A20020  	LDX #$2000
EE/AD9F:	8E0543  	STX $4305      (Number of bytes: #$2000)
EE/ADA2:	A901    	LDA #$01
EE/ADA4:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/ADA7:	60      	RTS

Transfer decompressed sky tilemap to VRAM (includes Imperial Castle BG)
EE/ADA8:	A980    	LDA #$80
EE/ADAA:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/ADAD:	A20044  	LDX #$4400
EE/ADB0:	8E1621  	STX $2116      (Set VRAM pointer to $8800)
EE/ADB3:	A20118  	LDX #$1801
EE/ADB6:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/ADB9:	A20020  	LDX #$2000
EE/ADBC:	8E0243  	STX $4302      (Source address)
EE/ADBF:	A97E    	LDA #$7E
EE/ADC1:	8D0443  	STA $4304      (Source bank; 7E/2000)
EE/ADC4:	A20010  	LDX #$1000
EE/ADC7:	8E0543  	STX $4305      (Number of bytes: #$1000)
EE/ADCA:	A901    	LDA #$01
EE/ADCC:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/ADCF:	60      	RTS

Transfer decompressed sprites to VRAM
EE/ADD0:	A980    	LDA #$80
EE/ADD2:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/ADD5:	A20060  	LDX #$6000
EE/ADD8:	8E1621  	STX $2116      (Set VRAM pointer to $C000)
EE/ADDB:	A20118  	LDX #$1801
EE/ADDE:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2118: VRAM)
EE/ADE1:	A20020  	LDX #$2000
EE/ADE4:	8E0243  	STX $4302      (Source address)
EE/ADE7:	A97E    	LDA #$7E
EE/ADE9:	8D0443  	STA $4304      (Source bank; 7E/2000)
EE/ADEC:	A20040  	LDX #$4000
EE/ADEF:	8E0543  	STX $4305      (Number of bytes: #$4000)
EE/ADF2:	A901    	LDA #$01
EE/ADF4:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/ADF7:	60      	RTS

VRAM-related function for mine-cart sequence
EE/ADF8:	A980    	LDA #$80
EE/ADFA:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/ADFD:	9C1621  	STZ $2116      (VRAM pointer, low byte) (LDY $00, STY $2116...)
EE/AE00:	9C1721  	STZ $2117      (VRAM pointer, high byte; $0000)
EE/AE03:	A00000  	LDY #$0000     (Zero Y)
EE/AE06:	8458    	STY $58        ($58 is increased by one every time the function loops)
EE/AE08:	A20819  	LDX #$1908
EE/AE0B:	8E0043  	STX $4300      (Control for DMA channel 0; fixed transfer, set destination to $2119: VRAM, high byte)
EE/AE0E:	A25800  	LDX #$0058
EE/AE11:	8E0243  	STX $4302      (Source address)
EE/AE14:	9C0443  	STZ $4304      (Source bank; 00/0058)
EE/AE17:	A24000  	LDX #$0040
EE/AE1A:	8E0543  	STX $4305      (Number of bytes: #$0040)
EE/AE1D:	A901    	LDA #$01
EE/AE1F:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/AE22:	C8      	INY
EE/AE23:	C00001  	CPY #$0100     (Looped 255 times?)
EE/AE26:	D0DE    	BNE $AE06      (Loop if not)
EE/AE28:	60      	RTS

VRAM-related function for mine-cart sequence
EE/AE29:	A980    	LDA #$80
EE/AE2B:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/AE2E:	A20000  	LDX #$0000     (LDX $00...)
EE/AE31:	8E1621  	STX $2116      (Set VRAM pointer to $0000)
EE/AE34:	A20019  	LDX #$1900
EE/AE37:	8E0043  	STX $4300      (Control for DMA channel 0; set destination to $2119: VRAM, high byte)
EE/AE3A:	A66A    	LDX $6A        (Holds #$DD00)
EE/AE3C:	8E0243  	STX $4302      (Source address)
EE/AE3F:	A56C    	LDA $6C        (Holds #$D8)
EE/AE41:	8D0443  	STA $4304      (Source bank; D8/DD00)
EE/AE44:	A2B802  	LDX #$02B8
EE/AE47:	8E0543  	STX $4305      (Number of bytes: #$02B8)
EE/AE4A:	A901    	LDA #$01
EE/AE4C:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/AE4F:	A20000  	LDX #$0000     (LDX $00...)
EE/AE52:	8E1621  	STX $2116      (Set VRAM pointer to $0000)
EE/AE55:	CD3A21  	CMP $213A      (Increase VRAM pointer)
EE/AE58:	A2803A  	LDX #$3A80
EE/AE5B:	8E0043  	STX $4300      (Control for DMA channel 0; set source to $213A: VRAM)
EE/AE5E:	A20008  	LDX #$0800
EE/AE61:	8E0243  	STX $4302      (Destination address)
EE/AE64:	A97F    	LDA #$7F
EE/AE66:	8D0443  	STA $4304      (Destination bank; 7F/0800)
EE/AE69:	A2B802  	LDX #$02B8
EE/AE6C:	8E0543  	STX $4305      (Number of bytes: #$02B8)
EE/AE6F:	A901    	LDA #$01
EE/AE71:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/AE74:	60      	RTS

Transfer decompressed water tiles
EE/AE75:	A980    	LDA #$80
EE/AE77:	8D1521  	STA $2115      (VRAM pointer increases by a word when $2119 or $213A is accessed)
EE/AE7A:	A20011  	LDX #$1100
EE/AE7D:	8E1621  	STX $2116      (Set VRAM pointer to $2200)
EE/AE80:	CD3A21  	CMP $213A      (Increase VRAM pointer)
EE/AE83:	A2803A  	LDX #$3A80
EE/AE86:	8E0043  	STX $4300      (Control for DMA channel 0; set source to $213A: VRAM)
EE/AE89:	A250B7  	LDX #$B750
EE/AE8C:	8E0243  	STX $4302      (Destination address)
EE/AE8F:	A97E    	LDA #$7E
EE/AE91:	8D0443  	STA $4304      (Destination bank; 7E/B750)
EE/AE94:	A28000  	LDX #$0080
EE/AE97:	8E0543  	STX $4305      (Number of bytes: #$0080)
EE/AE9A:	A901    	LDA #$01
EE/AE9C:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/AE9F:	A20015  	LDX #$1500
EE/AEA2:	8E1621  	STX $2116      (Set VRAM pointer to $2A00)
EE/AEA5:	CD3A21  	CMP $213A      (Increase VRAM pointer)
EE/AEA8:	A2803A  	LDX #$3A80
EE/AEAB:	8E0043  	STX $4300      (Control for DMA channel 0; set source to $213A: VRAM)
EE/AEAE:	A2D0B7  	LDX #$B7D0
EE/AEB1:	8E0243  	STX $4302      (Destination address)
EE/AEB4:	A97E    	LDA #$7E
EE/AEB6:	8D0443  	STA $4304      (Destination bank; 7E/B7D0)
EE/AEB9:	A28000  	LDX #$0080
EE/AEBC:	8E0543  	STX $4305      (Number of bytes: #$0080)
EE/AEBF:	A901    	LDA #$01
EE/AEC1:	8D0B42  	STA $420B      (Enable DMA channel 0)
EE/AEC4:	C220    	REP #$20       (16-bit A)
EE/AEC6:	A98000  	LDA #$0080
EE/AEC9:	8F50B87E	STA $7EB850
EE/AECD:	A94010  	LDA #$1040
EE/AED0:	8F52B87E	STA $7EB852
EE/AED4:	A9A060  	LDA #$60A0
EE/AED7:	8F54B87E	STA $7EB854
EE/AEDB:	A930B0  	LDA #$B030
EE/AEDE:	8F56B87E	STA $7EB856
EE/AEE2:	A9F020  	LDA #$20F0
EE/AEE5:	8F58B87E	STA $7EB858
EE/AEE9:	A970C0  	LDA #$C070
EE/AEEC:	8F5AB87E	STA $7EB85A
EE/AEF0:	A9D050  	LDA #$50D0
EE/AEF3:	8F5CB87E	STA $7EB85C
EE/AEF7:	A990E0  	LDA #$E090
EE/AEFA:	8F5EB87E	STA $7EB85E
EE/AEFE:	E220    	SEP #$20       (8-bit A)
EE/AF00:	60      	RTS

Blank space
EE/AF01:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/AF21:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/AF41:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/AF61:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/AF81:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/AFA1:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/AFC1:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/AFE1:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B001:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B021:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B041:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B061:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B081:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B0A1:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B0C1:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B0E1:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B101:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B121:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B141:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B161:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B181:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B1A1:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B1C1:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
EE/B1E1:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

Pointers to graphics, palettes, and tilemaps
EE/B200:	90B2EE  	(Unused; same as below)
EE/B203:	90B2EE  	(Unused; same as below)
EE/B206:	90B2EE  	(Sky graphics)
EE/B209:	95C2EE  	(Sky tilemap)
EE/B20C:	02C7EE  	(Blackjack graphics)
EE/B20F:	34D4EE  	(WoB tilemap)
EE/B212:	4F11EF  	(WoB tile graphics)
EE/B215:	5032EF  	(Graphics for mine-cart sequence)
EE/B218:	4648EF  	(Unused; same as below)
EE/B21B:	4648EF  	(Palettes for mine-cart sequence)
EE/B21E:	464AEF  	(WoR tile graphics)
EE/B221:	566AEF  	(Unused; same as below)
EE/B224:	566AEF  	(WoR tilemap)
EE/B227:	179DEF  	(Serpent Trench tilemap)
EE/B22A:	31B6EF  	(Serpent Trench tile graphics)
EE/B22D:	24C6EF  	(Unused; same as below)
EE/B230:	24C6EF  	(Chocobo graphics)
EE/B233:	77CEEF  	(Unused; same as below)
EE/B236:	77CEEF  	(Palette for Imperial Castle BG)
EE/B239:	97CEEF  	(Unused; same as below)
EE/B23C:	97CEEF  	(Esper Terra palette)
EE/B23F:	B7CEEF  	(Unused; same as below)
EE/B242:	B7CEEF  	(Shadow and gradient overlay graphics)
EE/B245:	B9CFEF  	(Miscellaneous overworld sprites)
EE/B248:	4CDCEF  	(Chocobo graphics)
EE/B24B:	9BE4EF  	(WoB minimap graphics)
EE/B24E:	B3E8EF  	(WoR minimap graphics)
EE/B251:	26EDEF  	(Falcon graphics)
EE/B254:	C8FAEF  	(Palette for grassland in epilogue)

Blank space
EE/B257:	FFFFFFFFFFFFFFFFFF

Pointers to data for redrawing the overworld
EE/B260:	00F6CE  	(Event bits and tile data for WoB)
EE/B263:	3CF6CE  	(Event bits and tile data for WoR)
EE/B266:	48F6CE  	(Delimits the above) (Bank byte is useless...)

Event pointers
EE/B269:	680000  	(CA/0068) (Going amidship)
EE/B26C:	4F0000  	(CA/004F) (Tent)
EE/B26F:	590000  	(CA/0059) (Boarding the airship)
EE/B272:	880000  	(CA/0088) (Phoenix Cave)
EE/B275:	7F0000  	(CA/007F) (Kefka's Tower)
EE/B278:	8F0000  	(CA/008F) (Zone Eater)
EE/B27B:	960000  	(CA/0096) (Bahamut)

Blank space
EE/B27E:	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

Data removed from the disassembly
EE/B290-EE/C294 (Sky graphics)
EE/C295-EE/C701 (Sky tilemap)
EE/C702-EE/D433 (Blackjack graphics)
EE/D434-EF/114E (World of Balance tilemap (compressed))
